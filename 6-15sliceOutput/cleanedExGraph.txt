digraph "" {
"[101] neg" [label="[101] neg(['edx'])"];
"[456] movzx" [label="[456] movzx(['ecx', '[0xbffff46c]'])"];
"[0xb7fdde98]" [fillcolor=greenyellow, label="[0xb7fdde98]", penwidth=4, shape=parallelogram, style=filled];
"[359] shr" [label="[359] shr(['edx', '0x3'])"];
"[222] cmp" [label="[222] cmp(['eax', '0x1'])"];
"[168] mov" [label="[168] mov(['ecx', 'edx'])"];
"[350] movzx" [label="[350] movzx(['eax', ['edi', 'ecx'], '[0xb7f8be41]'])"];
"[376] mul" [label="[376] mul(['ebp'])"];
"[321] mov" [label="[321] mov(['ebp', '3435973837'])"];
"[179] sub" [label="[179] sub(['ecx', 'eax'])"];
"[379] add" [label="[379] add(['eax', 'eax'])"];
"[425] cmp" [label="[425] cmp(['[0xbfffefd4]', '0x0'])"];
"[0xb7e40014]" [fillcolor=greenyellow, label="[0xb7e40014]", penwidth=4, shape=parallelogram, style=filled];
"[45] xor" [label="[45] xor(['edx', 'ecx'])"];
"[122] shr" [label="[122] shr(['edx', '0x3'])"];
"[283] mov" [label="[283] mov(['[0xb7e40016]', 'cl'])"];
"[210] cmp" [label="[210] cmp(['[0xbfffefe4]', '0x0'])"];
"[174] mov" [label="[174] mov(['ebp', '3435973837'])"];
"[0xb7e41728]" [fillcolor=greenyellow, label="[0xb7e41728]", penwidth=4, shape=parallelogram, style=filled];
"[373] jz" [fillcolor=crimson, label="[373] jz(['jump_diverge'])", penwidth=4, shape=octagon, style=filled];
"[215] jz" [fillcolor=crimson, label="[215] jz(['jump_diverge'])", penwidth=4, shape=octagon, style=filled];
"[0xbffff46e]" [fillcolor=greenyellow, label="[0xbffff46e]", penwidth=4, shape=parallelogram, style=filled];
"[172] jz" [fillcolor=crimson, label="[172] jz(['jump_diverge'])", penwidth=4, shape=octagon, style=filled];
"[156] mov" [label="[156] mov(['ebp', '3435973837'])"];
"[342] lea" [label="[342] lea(['eax', ['edx', 'edx']])"];
"[34] mov" [label="[34] mov(['edx', '0'])"];
"[0xbfffef6c]";
"[80] mov" [label="[80] mov(['eax', '[0xbffff4c8]'])"];
"[118] mov" [label="[118] mov(['ecx', '[0xbfffef70]'])"];
"[115] mov" [label="[115] mov(['[0xbfffef70]', 'eax'])"];
"[405] mov" [label="[405] mov(['ecx', 'edx'])"];
"[0xbfffefd4]" [fillcolor=greenyellow, label="[0xbfffefd4]", penwidth=4, shape=parallelogram, style=filled];
"[484] mov" [label="[484] mov(['[0xb7e40010]', 'cl'])"];
"[48] or" [label="[48] or(['edx', 'eax'])"];
"[271] movzx" [label="[271] movzx(['ecx', '[0xbffff46e]'])"];
"[0xb7f8be45]";
"[186] mov" [label="[186] mov(['ecx', 'edx'])"];
"[237] jz" [fillcolor=crimson, label="[237] jz(['jump_diverge'])", penwidth=4, shape=octagon, style=filled];
"[150] mov" [label="[150] mov(['ecx', 'edx'])"];
"[212] xor" [label="[212] xor(['edx', 'edx'])"];
PF [fillcolor=greenyellow, label=PF, penwidth=4, shape=parallelogram, style=filled];
"[309] mov" [label="[309] mov(['[0xbfffefe4]', 'eax'])"];
"[0xb7e40010]" [fillcolor=greenyellow, label="[0xb7e40010]", penwidth=4, shape=parallelogram, style=filled];
"[143] sub" [label="[143] sub(['ecx', 'eax'])"];
"[42] xor" [label="[42] xor(['eax', 'edi'])"];
"[0xbfffefe4]" [fillcolor=greenyellow, label="[0xbfffefe4]", penwidth=4, shape=parallelogram, style=filled];
"[316] mov" [label="[316] mov(['[0xbfffef70]', 'eax'])"];
"[221] or" [label="[221] or(['eax', '[0xbfffefd8]'])"];
"[100] shr" [label="[100] shr(['ecx', '0x1f'])"];
"[204] mov" [label="[204] mov(['ecx', 'edx'])"];
"[59] mov" [label="[59] mov(['edx', '[0xbfffef6c]'])"];
"[231] jz" [fillcolor=crimson, label="[231] jz(['jump_diverge'])", penwidth=4, shape=octagon, style=filled];
"[345] test" [label="[345] test(['edx', 'edx'])"];
"[337] jz" [fillcolor=crimson, label="[337] jz(['jump_diverge'])", penwidth=4, shape=octagon, style=filled];
"[138] mov" [label="[138] mov(['ebp', '3435973837'])"];
"[0xb7f8be46]";
"[50] mov" [label="[50] mov(['[0xbfffee74]', 'edi'])"];
"[300] mov" [label="[300] mov(['edx', 'eax'])"];
"[323] shr" [label="[323] shr(['edx', '0x3'])"];
"[230] cmp" [label="[230] cmp(['[0xbffff46f]', '0xa'])"];
"[83] mov" [label="[83] mov(['[0xbffff4b4]', 'eax'])"];
"[362] sub" [label="[362] sub(['ecx', 'eax'])"];
"[53] call-close_recheck" [label="[53] call-close_recheck(['eax'])"];
"[295] mov" [label="[295] mov(['[0xbffff4b4]', 'eax'])"];
"[422] or" [label="[422] or(['eax', '[0xbfffefd8]'])"];
"[320] mov" [label="[320] mov(['eax', 'ecx'])"];
"[208] jnz" [fillcolor=crimson, label="[208] jnz(['jump_diverge'])", penwidth=4, shape=octagon, style=filled];
"[14] call-stat64_recheck" [label="[14] call-stat64_recheck(['eax'])"];
"[358] mul" [label="[358] mul(['ebp'])"];
"[310] xor" [label="[310] xor(['eax', 'eax'])"];
"[56] mov" [label="[56] mov(['eax', '[0xbfffef68]'])"];
"[0xb7e4000c]" [fillcolor=greenyellow, label="[0xb7e4000c]", penwidth=4, shape=parallelogram, style=filled];
"[360] lea" [label="[360] lea(['eax', ['edx', 'edx']])"];
"[18] call-stat64_recheck" [label="[18] call-stat64_recheck(['eax'])"];
"[0xbffff4a0]" [fillcolor=greenyellow, label="[0xbffff4a0]", penwidth=4, shape=parallelogram, style=filled];
"[426] jnz" [fillcolor=crimson, label="[426] jnz(['jump_diverge'])", penwidth=4, shape=octagon, style=filled];
"[97] mov" [label="[97] mov(['eax', '[0xbffff4b4]'])"];
"[404] movzx" [label="[404] movzx(['eax', ['edi', 'ecx'], '[0xb7f8be41]'])"];
"[251] mov" [label="[251] mov(['[0xb7e40012]', 'cl'])"];
"[47] xor" [label="[47] xor(['eax', 'edi'])"];
"[0xbffff46f]" [fillcolor=greenyellow, label="[0xbffff46f]", penwidth=4, shape=parallelogram, style=filled];
"[0xb7e4000e]" [fillcolor=greenyellow, label="[0xb7e4000e]", penwidth=4, shape=parallelogram, style=filled];
"[393] mov" [label="[393] mov(['ebp', '3435973837'])"];
"[409] jnz" [fillcolor=crimson, label="[409] jnz(['jump_diverge'])", penwidth=4, shape=octagon, style=filled];
"[397] add" [label="[397] add(['eax', 'eax'])"];
"[217] mov" [label="[217] mov(['eax', '0'])"];
"[394] mul" [label="[394] mul(['ebp'])"];
"[35] xor" [label="[35] xor(['edx', 'ecx'])"];
AF [fillcolor=greenyellow, label=AF, penwidth=4, shape=parallelogram, style=filled];
"[141] lea" [label="[141] lea(['eax', ['edx', 'edx']])"];
"[395] shr" [label="[395] shr(['edx', '0x3'])"];
"[22] call-stat64_recheck" [label="[22] call-stat64_recheck(['eax'])"];
"[46] mov" [label="[46] mov(['eax', '0'])"];
"[52] mov" [label="[52] mov(['edi', '[0xbfffee74]'])"];
"[286] mov" [label="[286] mov(['eax', '[0xbffff4c8]'])"];
"[105] mov" [label="[105] mov(['[0xbfffefd4]', 'ecx'])"];
"[98] mov" [label="[98] mov(['ecx', 'eax'])"];
"[301] shr" [label="[301] shr(['ecx', '0x1f'])"];
"[0xbffff4c8]" [fillcolor=greenyellow, label="[0xbffff4c8]", penwidth=4, shape=parallelogram, style=filled];
"[62] mov" [label="[62] mov(['[0xb7fdde98]', 'eax'])"];
"[374] mov" [label="[374] mov(['eax', 'ecx'])"];
"[24] call-stat64_recheck" [label="[24] call-stat64_recheck(['eax'])"];
"[128] mov" [label="[128] mov(['edi', '0xb7f8be40'])"];
"[336] mov" [label="[336] mov(['[0xbffff46f]', 'al'])"];
"[39] mov" [label="[39] mov(['edx', '0'])"];
OF [fillcolor=greenyellow, label=OF, penwidth=4, shape=parallelogram, style=filled];
"[125] sub" [label="[125] sub(['ecx', 'eax'])"];
"[375] mov" [label="[375] mov(['ebp', '3435973837'])"];
"[149] movzx" [label="[149] movzx(['eax', ['edi', 'ecx'], '[0xb7f8be41]'])"];
"[319] mov" [label="[319] mov(['ecx', '[0xbfffef70]'])"];
"[43] or" [label="[43] or(['edx', 'eax'])"];
"[214] cmp" [label="[214] cmp(['[0xbfffefe4]', '0x0'])"];
"[66] mov" [label="[66] mov(['eax', '20'])"];
"[416] jz" [fillcolor=crimson, label="[416] jz(['jump_diverge'])", penwidth=4, shape=octagon, style=filled];
"[23] call-open_recheck" [label="[23] call-open_recheck(['eax'])"];
"[325] add" [label="[325] add(['eax', 'eax'])"];
"[372] mov" [label="[372] mov(['[0xbffff46d]', 'al'])"];
"[21] call-open_recheck" [label="[21] call-open_recheck(['eax'])"];
"[155] mov" [label="[155] mov(['eax', 'ecx'])"];
"[476] mov" [label="[476] mov(['[0xb7e4000f]', 'cl'])"];
"[200] mov" [label="[200] mov(['edi', '0xb7f8be40'])"];
ROOT;
ZF [fillcolor=greenyellow, label=ZF, penwidth=4, shape=parallelogram, style=filled];
"[292] mov" [label="[292] mov(['eax', '[0xbffff4cc]'])"];
"[464] movzx" [label="[464] movzx(['ecx', '[0xbffff46d]'])"];
"[428] cmp" [label="[428] cmp(['[0xbfffefe4]', '0x0'])"];
"[33] mov" [label="[33] mov(['ecx', '[0xbfffef6c]'])"];
"[411] cmp" [label="[411] cmp(['[0xbfffefe4]', '0x0'])"];
"[12] call-stat64_recheck" [label="[12] call-stat64_recheck(['eax'])"];
"[398] sub" [label="[398] sub(['ecx', 'eax'])"];
"[112] mov" [label="[112] mov(['eax', '[0xbfffefe4]'])"];
"[68] mov" [label="[68] mov(['ecx', 'eax'])"];
"[192] mov" [label="[192] mov(['ebp', '3435973837'])"];
"[94] call-fstat64_recheck" [label="[94] call-fstat64_recheck(['eax'])"];
"[109] xor" [label="[109] xor(['eax', 'eax'])"];
"[16] call-stat64_recheck" [label="[16] call-stat64_recheck(['eax'])"];
"[275] mov" [label="[275] mov(['[0xb7e40015]', 'cl'])"];
"[0xb7e40015]" [fillcolor=greenyellow, label="[0xb7e40015]", penwidth=4, shape=parallelogram, style=filled];
"[377] shr" [label="[377] shr(['edx', '0x3'])"];
"[44] mov" [label="[44] mov(['edx', '0'])"];
"[65] mov" [label="[65] mov(['[0xb7fdde9c]', 'edx'])"];
"[176] shr" [label="[176] shr(['edx', '0x3'])"];
"[30] mov" [label="[30] mov(['edi', '[0xbfffef68]'])"];
"[381] test" [label="[381] test(['edx', 'edx'])"];
"[180] test" [label="[180] test(['edx', 'edx'])"];
"[158] shr" [label="[158] shr(['edx', '0x3'])"];
"[17] call-open_recheck" [label="[17] call-open_recheck(['eax'])"];
"[434] cmp" [label="[434] cmp(['[0xbffff46e]', '0xa'])"];
"[123] lea" [label="[123] lea(['eax', ['edx', 'edx']])"];
"[25] call-open_recheck" [label="[25] call-open_recheck(['eax'])"];
"[13] call-open_recheck" [label="[13] call-open_recheck(['eax'])"];
"[412] jz" [fillcolor=crimson, label="[412] jz(['jump_diverge'])", penwidth=4, shape=octagon, style=filled];
"[120] mov" [label="[120] mov(['ebp', '3435973837'])"];
"[239] cmp" [label="[239] cmp(['[0xbffff46c]', '0xa'])"];
SF [fillcolor=greenyellow, label=SF, penwidth=4, shape=parallelogram, style=filled];
"[255] movzx" [label="[255] movzx(['ecx', '[0xbffff46c]'])"];
"[327] test" [label="[327] test(['edx', 'edx'])"];
"[438] jz" [fillcolor=crimson, label="[438] jz(['jump_diverge'])", penwidth=4, shape=octagon, style=filled];
"[396] lea" [label="[396] lea(['eax', ['edx', 'edx']])"];
"[146] mov" [label="[146] mov(['edi', '0xb7f8be40'])"];
"[240] jz" [fillcolor=crimson, label="[240] jz(['jump_diverge'])", penwidth=4, shape=octagon, style=filled];
"[0xbffff46d]" [fillcolor=greenyellow, label="[0xbffff46d]", penwidth=4, shape=parallelogram, style=filled];
"[444] jz" [fillcolor=crimson, label="[444] jz(['jump_diverge'])", penwidth=4, shape=octagon, style=filled];
CF [fillcolor=greenyellow, label=CF, penwidth=4, shape=parallelogram, style=filled];
"[160] add" [label="[160] add(['eax', 'eax'])"];
"[299] mov" [label="[299] mov(['ecx', 'eax'])"];
"[0xb7e4000f]" [fillcolor=greenyellow, label="[0xb7e4000f]", penwidth=4, shape=parallelogram, style=filled];
"[0xb7f8be41]";
"[326] sub" [label="[326] sub(['ecx', 'eax'])"];
"[121] mul" [label="[121] mul(['ebp'])"];
"[99] mov" [label="[99] mov(['edx', 'eax'])"];
"[347] mov" [label="[347] mov(['edi', '0xb7f8be40'])"];
"[341] shr" [label="[341] shr(['edx', '0x3'])"];
"[302] neg" [label="[302] neg(['edx'])"];
"[390] mov" [label="[390] mov(['[0xbffff46c]', 'al'])"];
"[0xb7e4000d]" [fillcolor=greenyellow, label="[0xb7e4000d]", penwidth=4, shape=parallelogram, style=filled];
"[306] mov" [label="[306] mov(['[0xbfffefd4]', 'ecx'])"];
"[15] call-open_recheck" [label="[15] call-open_recheck(['eax'])"];
"[247] movzx" [label="[247] movzx(['ecx', '[0xbffff46b]'])"];
"[365] mov" [label="[365] mov(['edi', '0xb7f8be40'])"];
"[322] mul" [label="[322] mul(['ebp'])"];
"[157] mul" [label="[157] mul(['ebp'])"];
"[135] mov" [label="[135] mov(['[0xbffff46f]', 'al'])"];
"[415] cmp" [label="[415] cmp(['[0xbfffefe4]', '0x0'])"];
"[0xbffff49c]" [fillcolor=greenyellow, label="[0xbffff49c]", penwidth=4, shape=parallelogram, style=filled];
"[38] or" [label="[38] or(['edx', 'eax'])"];
"[142] add" [label="[142] add(['eax', 'eax'])"];
"[233] cmp" [label="[233] cmp(['[0xbffff46e]', '0xa'])"];
"[443] cmp" [label="[443] cmp(['[0xbffff46b]', '0xa'])"];
"[279] movzx" [label="[279] movzx(['ecx', '[0xbffff46f]'])"];
"[0xbffff4b4]" [fillcolor=greenyellow, label="[0xbffff4b4]", penwidth=4, shape=parallelogram, style=filled];
"[131] movzx" [label="[131] movzx(['eax', ['edi', 'ecx'], '[0xb7f8be46]'])"];
"[242] cmp" [label="[242] cmp(['[0xbffff46b]', '0xa'])"];
"[144] test" [label="[144] test(['edx', 'edx'])"];
"[361] add" [label="[361] add(['eax', 'eax'])"];
"[356] mov" [label="[356] mov(['eax', 'ecx'])"];
"[413] xor" [label="[413] xor(['edx', 'edx'])"];
"[227] cmp" [label="[227] cmp(['[0xbfffefe4]', '0x0'])"];
"[460] mov" [label="[460] mov(['[0xb7e4000d]', 'cl'])"];
"[173] mov" [label="[173] mov(['eax', 'ecx'])"];
"[0xbffff46b]" [fillcolor=greenyellow, label="[0xbffff46b]", penwidth=4, shape=parallelogram, style=filled];
ECX [fillcolor=greenyellow, label=ECX, penwidth=4, shape=parallelogram, style=filled];
"[437] cmp" [label="[437] cmp(['[0xbffff46d]', '0xa'])"];
"[0xb7f8be42]";
"[36] mov" [label="[36] mov(['eax', '0'])"];
"[408] mov" [label="[408] mov(['[0xbffff46b]', 'al'])"];
"[243] jz" [fillcolor=crimson, label="[243] jz(['jump_diverge'])", penwidth=4, shape=octagon, style=filled];
"[421] mov" [label="[421] mov(['[0xbfffefd8]', '0'])"];
"[343] add" [label="[343] add(['eax', 'eax'])"];
"[380] sub" [label="[380] sub(['ecx', 'eax'])"];
"[37] xor" [label="[37] xor(['eax', 'edi'])"];
"[234] jz" [fillcolor=crimson, label="[234] jz(['jump_diverge'])", penwidth=4, shape=octagon, style=filled];
"[196] add" [label="[196] add(['eax', 'eax'])"];
"[355] jz" [fillcolor=crimson, label="[355] jz(['jump_diverge'])", penwidth=4, shape=octagon, style=filled];
"[383] mov" [label="[383] mov(['edi', '0xb7f8be40'])"];
"[41] mov" [label="[41] mov(['eax', '0'])"];
"[171] mov" [label="[171] mov(['[0xbffff46d]', 'al'])"];
"[392] mov" [label="[392] mov(['eax', 'ecx'])"];
"[472] movzx" [label="[472] movzx(['ecx', '[0xbffff46e]'])"];
"[357] mov" [label="[357] mov(['ebp', '3435973837'])"];
"[161] sub" [label="[161] sub(['ecx', 'eax'])"];
"[136] jz" [fillcolor=crimson, label="[136] jz(['jump_diverge'])", penwidth=4, shape=octagon, style=filled];
"[324] lea" [label="[324] lea(['eax', ['edx', 'edx']])"];
"[0xb7e40013]" [fillcolor=greenyellow, label="[0xb7e40013]", penwidth=4, shape=parallelogram, style=filled];
"[369] mov" [label="[369] mov(['ecx', 'edx'])"];
"[418] mov" [label="[418] mov(['eax', '0'])"];
"[140] shr" [label="[140] shr(['edx', '0x3'])"];
"[139] mul" [label="[139] mul(['ebp'])"];
"[26] call-read_recheck" [label="[26] call-read_recheck(['eax'])"];
"[137] mov" [label="[137] mov(['eax', 'ecx'])"];
"[0xbfffee74]" [fillcolor=greenyellow, label="[0xbfffee74]", penwidth=4, shape=parallelogram, style=filled];
"[0xb7e40016]" [fillcolor=greenyellow, label="[0xb7e40016]", penwidth=4, shape=parallelogram, style=filled];
"[435] jz" [fillcolor=crimson, label="[435] jz(['jump_diverge'])", penwidth=4, shape=octagon, style=filled];
"[448] movzx" [label="[448] movzx(['ecx', '[0xbffff46b]'])"];
"[93] mov" [label="[93] mov(['eax', '[0xbffff4a0]'])"];
EDI [fillcolor=greenyellow, label=EDI, penwidth=4, shape=parallelogram, style=filled];
"[0xbfffef70]" [fillcolor=greenyellow, label="[0xbfffef70]", penwidth=4, shape=parallelogram, style=filled];
"[197] sub" [label="[197] sub(['ecx', 'eax'])"];
"[207] mov" [label="[207] mov(['[0xbffff46b]', 'al'])"];
"[423] cmp" [label="[423] cmp(['eax', '0x1'])"];
"[368] movzx" [label="[368] movzx(['eax', ['edi', 'ecx'], '[0xb7f8be42]'])"];
"[391] jz" [fillcolor=crimson, label="[391] jz(['jump_diverge'])", penwidth=4, shape=octagon, style=filled];
"[298] mov" [label="[298] mov(['eax', '[0xbffff4b4]'])"];
"[289] mov" [label="[289] mov(['[0xbffff4cc]', 'eax'])"];
EDX [fillcolor=greenyellow, label=EDX, penwidth=4, shape=parallelogram, style=filled];
"[164] mov" [label="[164] mov(['edi', '0xb7f8be40'])"];
"[429] jz" [fillcolor=crimson, label="[429] jz(['jump_diverge'])", penwidth=4, shape=octagon, style=filled];
"[441] jz" [fillcolor=crimson, label="[441] jz(['jump_diverge'])", penwidth=4, shape=octagon, style=filled];
"[70] mov" [label="[70] mov(['[0xb7e41728]', 'ecx'])"];
"[468] mov" [label="[468] mov(['[0xb7e4000e]', 'cl'])"];
"[11] call-open_recheck" [label="[11] call-open_recheck(['eax'])"];
"[387] mov" [label="[387] mov(['ecx', 'edx'])"];
"[399] test" [label="[399] test(['edx', 'edx'])"];
"[182] mov" [label="[182] mov(['edi', '0xb7f8be40'])"];
"[344] sub" [label="[344] sub(['ecx', 'eax'])"];
"[77] js" [fillcolor=crimson, label="[77] js(['jump_diverge'])", penwidth=4, shape=octagon, style=filled];
"[74] mov" [label="[74] mov(['[0xbffff4c8]', 'eax'])"];
"[177] lea" [label="[177] lea(['eax', ['edx', 'edx']])"];
"[27] call-fstat64_recheck" [label="[27] call-fstat64_recheck(['eax'])"];
"[108] mov" [label="[108] mov(['[0xbfffefe4]', 'eax'])"];
"[90] mov" [label="[90] mov(['ecx', '[0xbffff49c]'])"];
"[0xb7fdde9c]" [fillcolor=greenyellow, label="[0xb7fdde9c]", penwidth=4, shape=parallelogram, style=filled];
"[225] jnz" [fillcolor=crimson, label="[225] jnz(['jump_diverge'])", penwidth=4, shape=octagon, style=filled];
"[351] mov" [label="[351] mov(['ecx', 'edx'])"];
"[267] mov" [label="[267] mov(['[0xb7e40014]', 'cl'])"];
"[236] cmp" [label="[236] cmp(['[0xbffff46d]', '0xa'])"];
"[162] test" [label="[162] test(['edx', 'edx'])"];
"[87] mov" [label="[87] mov(['[0xbffff49c]', 'ecx'])"];
"[159] lea" [label="[159] lea(['eax', ['edx', 'edx']])"];
"[228] jz" [fillcolor=crimson, label="[228] jz(['jump_diverge'])", penwidth=4, shape=octagon, style=filled];
"[259] mov" [label="[259] mov(['[0xb7e40013]', 'cl'])"];
"[191] mov" [label="[191] mov(['eax', 'ecx'])"];
"[132] mov" [label="[132] mov(['ecx', 'edx'])"];
"[339] mov" [label="[339] mov(['ebp', '3435973837'])"];
"[220] mov" [label="[220] mov(['[0xbfffefd8]', '0'])"];
"[386] movzx" [label="[386] movzx(['eax', ['edi', 'ecx'], '[0xb7f8be45]'])"];
"[0xb7e40012]" [fillcolor=greenyellow, label="[0xb7e40012]", penwidth=4, shape=parallelogram, style=filled];
"[154] jz" [fillcolor=crimson, label="[154] jz(['jump_diverge'])", penwidth=4, shape=octagon, style=filled];
EAX [fillcolor=greenyellow, label=EAX, penwidth=4, shape=parallelogram, style=filled];
"[175] mul" [label="[175] mul(['ebp'])"];
"[224] cmp" [label="[224] cmp(['[0xbfffefd4]', '0x0'])"];
"[440] cmp" [label="[440] cmp(['[0xbffff46c]', '0xa'])"];
"[153] mov" [label="[153] mov(['[0xbffff46e]', 'al'])"];
"[211] jz" [fillcolor=crimson, label="[211] jz(['jump_diverge'])", penwidth=4, shape=octagon, style=filled];
"[119] mov" [label="[119] mov(['eax', 'ecx'])"];
"[452] mov" [label="[452] mov(['[0xb7e4000c]', 'cl'])"];
"[338] mov" [label="[338] mov(['eax', 'ecx'])"];
"[313] mov" [label="[313] mov(['eax', '[0xbfffefe4]'])"];
"[332] movzx" [label="[332] movzx(['eax', ['edi', 'ecx'], '[0xb7f8be46]'])"];
"[10] call-access_recheck" [label="[10] call-access_recheck(['eax'])"];
"[20] call-stat64_recheck" [label="[20] call-stat64_recheck(['eax'])"];
"[203] movzx" [label="[203] movzx(['eax', ['edi', 'ecx'], '[0xb7f8be41]'])"];
"[194] shr" [label="[194] shr(['edx', '0x3'])"];
"[198] test" [label="[198] test(['edx', 'edx'])"];
ESP [fillcolor=greenyellow, label=ESP, penwidth=4, shape=parallelogram, style=filled];
"[329] mov" [label="[329] mov(['edi', '0xb7f8be40'])"];
"[0xbffff4cc]" [fillcolor=greenyellow, label="[0xbffff4cc]", penwidth=4, shape=parallelogram, style=filled];
"[363] test" [label="[363] test(['edx', 'edx'])"];
"[0xbfffef68]";
"[40] xor" [label="[40] xor(['edx', 'ecx'])"];
"[76] cmp" [label="[76] cmp(['[0xbffff4c8]', '0x0'])"];
"[178] add" [label="[178] add(['eax', 'eax'])"];
"[218] or" [label="[218] or(['eax', '[0xbfffefd4]'])"];
"[333] mov" [label="[333] mov(['ecx', 'edx'])"];
"[378] lea" [label="[378] lea(['eax', ['edx', 'edx']])"];
"[303] test" [label="[303] test(['ecx', 'ecx'])"];
"[263] movzx" [label="[263] movzx(['ecx', '[0xbffff46d]'])"];
"[0xbffff46c]" [fillcolor=greenyellow, label="[0xbffff46c]", penwidth=4, shape=parallelogram, style=filled];
"[189] mov" [label="[189] mov(['[0xbffff46c]', 'al'])"];
ESI [fillcolor=greenyellow, label=ESI, penwidth=4, shape=parallelogram, style=filled];
"[190] jz" [fillcolor=crimson, label="[190] jz(['jump_diverge'])", penwidth=4, shape=octagon, style=filled];
"[67] int" [label="[67] int(['0x80'])"];
"[340] mul" [label="[340] mul(['ebp'])"];
"[85] mov" [label="[85] mov(['[0xbffff4a0]', 'eax'])"];
"[19] call-open_recheck" [label="[19] call-open_recheck(['eax'])"];
"[354] mov" [label="[354] mov(['[0xbffff46e]', 'al'])"];
"[195] lea" [label="[195] lea(['eax', ['edx', 'edx']])"];
"[193] mul" [label="[193] mul(['ebp'])"];
"[419] or" [label="[419] or(['eax', '[0xbfffefd4]'])"];
"[126] test" [label="[126] test(['edx', 'edx'])"];
"[480] movzx" [label="[480] movzx(['ecx', '[0xbffff46f]'])"];
"[185] movzx" [label="[185] movzx(['eax', ['edi', 'ecx'], '[0xb7f8be45]'])"];
"[71] mov" [label="[71] mov(['eax', 'ecx'])"];
"[431] cmp" [label="[431] cmp(['[0xbffff46f]', '0xa'])"];
EBP [fillcolor=greenyellow, label=EBP, penwidth=4, shape=parallelogram, style=filled];
"[432] jz" [fillcolor=crimson, label="[432] jz(['jump_diverge'])", penwidth=4, shape=octagon, style=filled];
"[102] test" [label="[102] test(['ecx', 'ecx'])"];
"[124] add" [label="[124] add(['eax', 'eax'])"];
EBX [fillcolor=greenyellow, label=EBX, penwidth=4, shape=parallelogram, style=filled];
"[167] movzx" [label="[167] movzx(['eax', ['edi', 'ecx'], '[0xb7f8be42]'])"];
"[401] mov" [label="[401] mov(['edi', '0xb7f8be40'])"];
"[0xbfffefd8]" [fillcolor=greenyellow, label="[0xbfffefd8]", penwidth=4, shape=parallelogram, style=filled];
"[101] neg" -> "[122] shr"  [label="[101] neg(edx)3"];
"[456] movzx" -> "[460] mov"  [label="[456] movzx(cl)0"];
"[359] shr" -> "[377] shr"  [label="[359] shr(edx)3"];
"[359] shr" -> "[360] lea"  [label="[359] shr(edx)3"];
"[359] shr" -> "[363] test"  [label="[359] shr(edx)3"];
"[359] shr" -> "[369] mov"  [label="[359] shr(edx)3"];
"[168] mov" -> "[179] sub"  [label="[168] mov(ecx)3"];
"[168] mov" -> "[173] mov"  [label="[168] mov(ecx)3"];
"[350] movzx" -> "[354] mov"  [label="[350] movzx(al)0"];
"[321] mov" -> "[322] mul"  [label="[321] mov(ebp)3"];
"[179] sub" -> "[190] jz"  [color=red, label="(ZF)EndofSliceValue", penwidth=5, shape=octagon, style=bold];
"[179] sub" -> "[185] movzx"  [label="[179] sub(ecx)3"];
"[379] add" -> "[379] add"  [label="[379] add(eax)3"];
"[379] add" -> "[380] sub"  [label="[379] add(eax)3"];
"[425] cmp" -> "[426] jnz"  [color=red, label="(ZF)EndofSliceValue", penwidth=5, shape=octagon, style=bold];
"[45] xor" -> "[48] or"  [label="[45] xor(edx)3"];
"[122] shr" -> "[140] shr"  [label="[122] shr(edx)3"];
"[122] shr" -> "[132] mov"  [label="[122] shr(edx)3"];
"[122] shr" -> "[123] lea"  [label="[122] shr(edx)3"];
"[122] shr" -> "[126] test"  [label="[122] shr(edx)3"];
"[283] mov" -> "[0xb7e40016]"  [color=green, label=EndofSliceValue, penwidth=5, shape=parallelogram, style=bold];
"[210] cmp" -> "[211] jz"  [color=red, label="(ZF)EndofSliceValue", penwidth=5, shape=octagon, style=bold];
"[174] mov" -> "[175] mul"  [label="[174] mov(ebp)3"];
"[156] mov" -> "[157] mul"  [label="[156] mov(ebp)3"];
"[342] lea" -> "[343] add"  [label="[342] lea(eax)3"];
"[34] mov" -> "[35] xor"  [label="[34] mov(edx)3"];
"[0xbfffef6c]" -> "[33] mov"  [label="[0xbfffef6c](mem)3"];
"[0xbfffef6c]" -> "[59] mov"  [label="[0xbfffef6c](mem)3"];
"[80] mov" -> "[83] mov"  [label="[80] mov(eax)3"];
"[80] mov" -> "[85] mov"  [label="[80] mov(eax)3"];
"[118] mov" -> "[119] mov"  [label="[118] mov(ecx)3"];
"[118] mov" -> "[125] sub"  [label="[118] mov(ecx)3"];
"[115] mov" -> "[118] mov"  [label="[115] mov(mem)3"];
"[484] mov" -> "[0xb7e40010]"  [color=green, label=EndofSliceValue, penwidth=5, shape=parallelogram, style=bold];
"[271] movzx" -> "[275] mov"  [label="[271] movzx(cl)0"];
"[0xb7f8be45]" -> "[185] movzx"  [label="[0xb7f8be45](mem)3"];
"[0xb7f8be45]" -> "[386] movzx"  [label="[0xb7f8be45](mem)3"];
"[186] mov" -> "[191] mov"  [label="[186] mov(ecx)3"];
"[186] mov" -> "[197] sub"  [label="[186] mov(ecx)3"];
"[150] mov" -> "[155] mov"  [label="[150] mov(ecx)3"];
"[150] mov" -> "[161] sub"  [label="[150] mov(ecx)3"];
"[212] xor" -> "[212] xor"  [label="[212] xor(edx)3"];
"[309] mov" -> "[411] cmp"  [label="[309] mov(mem)3"];
"[309] mov" -> "[0xbfffefe4]"  [color=green, label=EndofSliceValue, penwidth=5, shape=parallelogram, style=bold];
"[309] mov" -> "[313] mov"  [label="[309] mov(mem)3"];
"[309] mov" -> "[415] cmp"  [label="[309] mov(mem)3"];
"[309] mov" -> "[428] cmp"  [label="[309] mov(mem)3"];
"[143] sub" -> "[154] jz"  [color=red, label="(ZF)EndofSliceValue", penwidth=5, shape=octagon, style=bold];
"[143] sub" -> "[149] movzx"  [label="[143] sub(ecx)3"];
"[42] xor" -> "[43] or"  [label="[42] xor(eax)3"];
"[316] mov" -> "[0xbfffef70]"  [color=green, label=EndofSliceValue, penwidth=5, shape=parallelogram, style=bold];
"[316] mov" -> "[319] mov"  [label="[316] mov(mem)3"];
"[221] or" -> "[222] cmp"  [label="[221] or(eax)3"];
"[100] shr" -> "[105] mov"  [label="[100] shr(ecx)3"];
"[100] shr" -> "[102] test"  [label="[100] shr(ecx)3"];
"[59] mov" -> "[65] mov"  [label="[59] mov(edx)3"];
"[138] mov" -> "[139] mul"  [label="[138] mov(ebp)3"];
"[0xb7f8be46]" -> "[131] movzx"  [label="[0xb7f8be46](mem)3"];
"[0xb7f8be46]" -> "[332] movzx"  [label="[0xb7f8be46](mem)3"];
"[50] mov" -> "[52] mov"  [label="[50] mov(mem)3"];
"[50] mov" -> "[0xbfffee74]"  [color=green, label=EndofSliceValue, penwidth=5, shape=parallelogram, style=bold];
"[323] shr" -> "[341] shr"  [label="[323] shr(edx)3"];
"[323] shr" -> "[324] lea"  [label="[323] shr(edx)3"];
"[323] shr" -> "[327] test"  [label="[323] shr(edx)3"];
"[323] shr" -> "[333] mov"  [label="[323] shr(edx)3"];
"[230] cmp" -> "[231] jz"  [color=red, label="(ZF)EndofSliceValue", penwidth=5, shape=octagon, style=bold];
"[83] mov" -> "[97] mov"  [label="[83] mov(mem)3"];
"[362] sub" -> "[368] movzx"  [label="[362] sub(ecx)3"];
"[362] sub" -> "[373] jz"  [color=red, label="(ZF)EndofSliceValue", penwidth=5, shape=octagon, style=bold];
"[295] mov" -> "[0xbffff4b4]"  [color=green, label=EndofSliceValue, penwidth=5, shape=parallelogram, style=bold];
"[295] mov" -> "[298] mov"  [label="[295] mov(mem)3"];
"[422] or" -> "[423] cmp"  [label="[422] or(eax)3"];
"[422] or" -> EAX  [color=green, label=EndofSliceValue, penwidth=5, shape=parallelogram, style=bold];
"[310] xor" -> "[310] xor"  [label="[310] xor(eax)3"];
"[56] mov" -> "[62] mov"  [label="[56] mov(eax)3"];
"[360] lea" -> "[361] add"  [label="[360] lea(eax)3"];
"[97] mov" -> "[109] xor"  [label="[97] mov(eax)3"];
"[97] mov" -> "[108] mov"  [label="[97] mov(eax)3"];
"[97] mov" -> "[98] mov"  [label="[97] mov(eax)3"];
"[97] mov" -> "[99] mov"  [label="[97] mov(eax)3"];
"[404] movzx" -> "[408] mov"  [label="[404] movzx(al)0"];
"[251] mov" -> "[0xb7e40012]"  [color=green, label=EndofSliceValue, penwidth=5, shape=parallelogram, style=bold];
"[47] xor" -> "[48] or"  [label="[47] xor(eax)3"];
"[393] mov" -> "[394] mul"  [label="[393] mov(ebp)3"];
"[393] mov" -> EBP  [color=green, label=EndofSliceValue, penwidth=5, shape=parallelogram, style=bold];
"[397] add" -> "[398] sub"  [label="[397] add(eax)3"];
"[397] add" -> "[397] add"  [label="[397] add(eax)3"];
"[217] mov" -> "[218] or"  [label="[217] mov(eax)3"];
"[35] xor" -> "[38] or"  [label="[35] xor(edx)3"];
"[141] lea" -> "[142] add"  [label="[141] lea(eax)3"];
"[395] shr" -> "[399] test"  [label="[395] shr(edx)3"];
"[395] shr" -> "[405] mov"  [label="[395] shr(edx)3"];
"[395] shr" -> "[413] xor"  [label="[395] shr(edx)3"];
"[395] shr" -> "[396] lea"  [label="[395] shr(edx)3"];
"[46] mov" -> "[47] xor"  [label="[46] mov(eax)3"];
"[286] mov" -> "[289] mov"  [label="[286] mov(eax)3"];
"[105] mov" -> "[224] cmp"  [label="[105] mov(mem)3"];
"[105] mov" -> "[218] or"  [label="[105] mov(mem)3"];
"[98] mov" -> "[100] shr"  [label="[98] mov(ecx)3"];
"[301] shr" -> "[303] test"  [label="[301] shr(ecx)3"];
"[301] shr" -> "[306] mov"  [label="[301] shr(ecx)3"];
"[62] mov" -> "[0xb7fdde98]"  [color=green, label=EndofSliceValue, penwidth=5, shape=parallelogram, style=bold];
"[128] mov" -> "[131] movzx"  [label="[128] mov(edi)3"];
"[336] mov" -> "[431] cmp"  [label="[336] mov(mem)3"];
"[336] mov" -> "[480] movzx"  [label="[336] mov(mem)3"];
"[336] mov" -> "[0xbffff46f]"  [color=green, label=EndofSliceValue, penwidth=5, shape=parallelogram, style=bold];
"[39] mov" -> "[40] xor"  [label="[39] mov(edx)3"];
"[125] sub" -> "[131] movzx"  [label="[125] sub(ecx)3"];
"[125] sub" -> "[136] jz"  [color=red, label="(ZF)EndofSliceValue", penwidth=5, shape=octagon, style=bold];
"[375] mov" -> "[376] mul"  [label="[375] mov(ebp)3"];
"[149] movzx" -> "[153] mov"  [label="[149] movzx(al)0"];
"[319] mov" -> "[326] sub"  [label="[319] mov(ecx)3"];
"[319] mov" -> "[320] mov"  [label="[319] mov(ecx)3"];
"[214] cmp" -> "[215] jz"  [color=red, label="(ZF)EndofSliceValue", penwidth=5, shape=octagon, style=bold];
"[66] mov" -> "[68] mov"  [label="[66] mov(eax)3"];
"[325] add" -> "[326] sub"  [label="[325] add(eax)3"];
"[325] add" -> "[325] add"  [label="[325] add(eax)3"];
"[372] mov" -> "[437] cmp"  [label="[372] mov(mem)3"];
"[372] mov" -> "[464] movzx"  [label="[372] mov(mem)3"];
"[372] mov" -> "[0xbffff46d]"  [color=green, label=EndofSliceValue, penwidth=5, shape=parallelogram, style=bold];
"[476] mov" -> "[0xb7e4000f]"  [color=green, label=EndofSliceValue, penwidth=5, shape=parallelogram, style=bold];
"[200] mov" -> "[203] movzx"  [label="[200] mov(edi)3"];
"[292] mov" -> "[295] mov"  [label="[292] mov(eax)3"];
"[464] movzx" -> "[468] mov"  [label="[464] movzx(cl)0"];
"[428] cmp" -> "[429] jz"  [color=red, label="(ZF)EndofSliceValue", penwidth=5, shape=octagon, style=bold];
"[33] mov" -> "[45] xor"  [label="[33] mov(ecx)3"];
"[33] mov" -> "[35] xor"  [label="[33] mov(ecx)3"];
"[33] mov" -> "[40] xor"  [label="[33] mov(ecx)3"];
"[411] cmp" -> "[412] jz"  [color=red, label="(ZF)EndofSliceValue", penwidth=5, shape=octagon, style=bold];
"[398] sub" -> "[404] movzx"  [label="[398] sub(ecx)3"];
"[398] sub" -> "[409] jnz"  [color=red, label="(ZF)EndofSliceValue", penwidth=5, shape=octagon, style=bold];
"[112] mov" -> "[115] mov"  [label="[112] mov(eax)3"];
"[68] mov" -> "[70] mov"  [label="[68] mov(ecx)3"];
"[68] mov" -> "[71] mov"  [label="[68] mov(ecx)3"];
"[68] mov" -> "[87] mov"  [label="[68] mov(ecx)3"];
"[192] mov" -> "[193] mul"  [label="[192] mov(ebp)3"];
"[109] xor" -> "[109] xor"  [label="[109] xor(eax)3"];
"[275] mov" -> "[0xb7e40015]"  [color=green, label=EndofSliceValue, penwidth=5, shape=parallelogram, style=bold];
"[377] shr" -> "[387] mov"  [label="[377] shr(edx)3"];
"[377] shr" -> "[381] test"  [label="[377] shr(edx)3"];
"[377] shr" -> "[395] shr"  [label="[377] shr(edx)3"];
"[377] shr" -> "[378] lea"  [label="[377] shr(edx)3"];
"[44] mov" -> "[45] xor"  [label="[44] mov(edx)3"];
"[65] mov" -> "[0xb7fdde9c]"  [color=green, label=EndofSliceValue, penwidth=5, shape=parallelogram, style=bold];
"[176] shr" -> "[177] lea"  [label="[176] shr(edx)3"];
"[176] shr" -> "[194] shr"  [label="[176] shr(edx)3"];
"[176] shr" -> "[186] mov"  [label="[176] shr(edx)3"];
"[176] shr" -> "[180] test"  [label="[176] shr(edx)3"];
"[30] mov" -> "[42] xor"  [label="[30] mov(edi)3"];
"[30] mov" -> "[47] xor"  [label="[30] mov(edi)3"];
"[30] mov" -> "[37] xor"  [label="[30] mov(edi)3"];
"[30] mov" -> "[50] mov"  [label="[30] mov(edi)3"];
"[158] shr" -> "[168] mov"  [label="[158] shr(edx)3"];
"[158] shr" -> "[176] shr"  [label="[158] shr(edx)3"];
"[158] shr" -> "[159] lea"  [label="[158] shr(edx)3"];
"[158] shr" -> "[162] test"  [label="[158] shr(edx)3"];
"[434] cmp" -> "[435] jz"  [color=red, label="(ZF)EndofSliceValue", penwidth=5, shape=octagon, style=bold];
"[123] lea" -> "[124] add"  [label="[123] lea(eax)3"];
"[120] mov" -> "[121] mul"  [label="[120] mov(ebp)3"];
"[239] cmp" -> "[240] jz"  [color=red, label="(ZF)EndofSliceValue", penwidth=5, shape=octagon, style=bold];
"[255] movzx" -> "[259] mov"  [label="[255] movzx(cl)0"];
"[396] lea" -> "[397] add"  [label="[396] lea(eax)3"];
"[146] mov" -> "[149] movzx"  [label="[146] mov(edi)3"];
"[160] add" -> "[161] sub"  [label="[160] add(eax)3"];
"[160] add" -> "[160] add"  [label="[160] add(eax)3"];
"[299] mov" -> "[301] shr"  [label="[299] mov(ecx)3"];
"[0xb7f8be41]" -> "[350] movzx"  [label="[0xb7f8be41](mem)3"];
"[0xb7f8be41]" -> "[203] movzx"  [label="[0xb7f8be41](mem)3"];
"[0xb7f8be41]" -> "[149] movzx"  [label="[0xb7f8be41](mem)3"];
"[0xb7f8be41]" -> "[404] movzx"  [label="[0xb7f8be41](mem)3"];
"[326] sub" -> "[332] movzx"  [label="[326] sub(ecx)3"];
"[326] sub" -> "[337] jz"  [color=red, label="(ZF)EndofSliceValue", penwidth=5, shape=octagon, style=bold];
"[347] mov" -> "[350] movzx"  [label="[347] mov(edi)3"];
"[341] shr" -> "[345] test"  [label="[341] shr(edx)3"];
"[341] shr" -> "[351] mov"  [label="[341] shr(edx)3"];
"[341] shr" -> "[342] lea"  [label="[341] shr(edx)3"];
"[341] shr" -> "[359] shr"  [label="[341] shr(edx)3"];
"[302] neg" -> "[323] shr"  [label="[302] neg(edx)3"];
"[390] mov" -> "[0xbffff46c]"  [color=green, label=EndofSliceValue, penwidth=5, shape=parallelogram, style=bold];
"[390] mov" -> "[456] movzx"  [label="[390] mov(mem)3"];
"[390] mov" -> "[440] cmp"  [label="[390] mov(mem)3"];
"[306] mov" -> "[419] or"  [label="[306] mov(mem)3"];
"[306] mov" -> "[425] cmp"  [label="[306] mov(mem)3"];
"[306] mov" -> "[0xbfffefd4]"  [color=green, label=EndofSliceValue, penwidth=5, shape=parallelogram, style=bold];
"[247] movzx" -> "[251] mov"  [label="[247] movzx(cl)0"];
"[365] mov" -> "[368] movzx"  [label="[365] mov(edi)3"];
"[135] mov" -> "[230] cmp"  [label="[135] mov(mem)3"];
"[135] mov" -> "[279] movzx"  [label="[135] mov(mem)3"];
"[415] cmp" -> "[416] jz"  [color=red, label="(ZF)EndofSliceValue", penwidth=5, shape=octagon, style=bold];
"[142] add" -> "[143] sub"  [label="[142] add(eax)3"];
"[142] add" -> "[142] add"  [label="[142] add(eax)3"];
"[233] cmp" -> "[234] jz"  [color=red, label="(ZF)EndofSliceValue", penwidth=5, shape=octagon, style=bold];
"[443] cmp" -> AF  [color=green, label=EndofSliceValue, penwidth=5, shape=parallelogram, style=bold];
"[443] cmp" -> OF  [color=green, label=EndofSliceValue, penwidth=5, shape=parallelogram, style=bold];
"[443] cmp" -> ZF  [color=green, label=EndofSliceValue, penwidth=5, shape=parallelogram, style=bold];
"[443] cmp" -> CF  [color=green, label=EndofSliceValue, penwidth=5, shape=parallelogram, style=bold];
"[443] cmp" -> SF  [color=green, label=EndofSliceValue, penwidth=5, shape=parallelogram, style=bold];
"[443] cmp" -> PF  [color=green, label=EndofSliceValue, penwidth=5, shape=parallelogram, style=bold];
"[443] cmp" -> "[444] jz"  [color=red, label="(ZF)EndofSliceValue", penwidth=5, shape=octagon, style=bold];
"[279] movzx" -> "[283] mov"  [label="[279] movzx(cl)0"];
"[131] movzx" -> "[135] mov"  [label="[131] movzx(al)0"];
"[242] cmp" -> "[243] jz"  [color=red, label="(ZF)EndofSliceValue", penwidth=5, shape=octagon, style=bold];
"[361] add" -> "[362] sub"  [label="[361] add(eax)3"];
"[361] add" -> "[361] add"  [label="[361] add(eax)3"];
"[413] xor" -> EDX  [color=green, label=EndofSliceValue, penwidth=5, shape=parallelogram, style=bold];
"[413] xor" -> "[413] xor"  [label="[413] xor(edx)3"];
"[227] cmp" -> "[228] jz"  [color=red, label="(ZF)EndofSliceValue", penwidth=5, shape=octagon, style=bold];
"[460] mov" -> "[0xb7e4000d]"  [color=green, label=EndofSliceValue, penwidth=5, shape=parallelogram, style=bold];
"[437] cmp" -> "[438] jz"  [color=red, label="(ZF)EndofSliceValue", penwidth=5, shape=octagon, style=bold];
"[0xb7f8be42]" -> "[368] movzx"  [label="[0xb7f8be42](mem)3"];
"[0xb7f8be42]" -> "[167] movzx"  [label="[0xb7f8be42](mem)3"];
"[36] mov" -> "[37] xor"  [label="[36] mov(eax)3"];
"[408] mov" -> "[448] movzx"  [label="[408] mov(mem)3"];
"[408] mov" -> "[0xbffff46b]"  [color=green, label=EndofSliceValue, penwidth=5, shape=parallelogram, style=bold];
"[408] mov" -> "[443] cmp"  [label="[408] mov(mem)3"];
"[421] mov" -> "[422] or"  [label="[421] mov(mem)3"];
"[421] mov" -> "[0xbfffefd8]"  [color=green, label=EndofSliceValue, penwidth=5, shape=parallelogram, style=bold];
"[343] add" -> "[343] add"  [label="[343] add(eax)3"];
"[343] add" -> "[344] sub"  [label="[343] add(eax)3"];
"[380] sub" -> "[391] jz"  [color=red, label="(ZF)EndofSliceValue", penwidth=5, shape=octagon, style=bold];
"[380] sub" -> "[386] movzx"  [label="[380] sub(ecx)3"];
"[37] xor" -> "[38] or"  [label="[37] xor(eax)3"];
"[196] add" -> "[196] add"  [label="[196] add(eax)3"];
"[196] add" -> "[197] sub"  [label="[196] add(eax)3"];
"[383] mov" -> "[386] movzx"  [label="[383] mov(edi)3"];
"[41] mov" -> "[42] xor"  [label="[41] mov(eax)3"];
"[171] mov" -> "[263] movzx"  [label="[171] mov(mem)3"];
"[171] mov" -> "[236] cmp"  [label="[171] mov(mem)3"];
"[472] movzx" -> "[476] mov"  [label="[472] movzx(cl)0"];
"[357] mov" -> "[358] mul"  [label="[357] mov(ebp)3"];
"[161] sub" -> "[172] jz"  [color=red, label="(ZF)EndofSliceValue", penwidth=5, shape=octagon, style=bold];
"[161] sub" -> "[167] movzx"  [label="[161] sub(ecx)3"];
"[324] lea" -> "[325] add"  [label="[324] lea(eax)3"];
"[369] mov" -> "[380] sub"  [label="[369] mov(ecx)3"];
"[369] mov" -> "[374] mov"  [label="[369] mov(ecx)3"];
"[418] mov" -> "[419] or"  [label="[418] mov(eax)3"];
"[140] shr" -> "[158] shr"  [label="[140] shr(edx)3"];
"[140] shr" -> "[150] mov"  [label="[140] shr(edx)3"];
"[140] shr" -> "[141] lea"  [label="[140] shr(edx)3"];
"[140] shr" -> "[144] test"  [label="[140] shr(edx)3"];
"[448] movzx" -> "[452] mov"  [label="[448] movzx(cl)0"];
"[197] sub" -> "[203] movzx"  [label="[197] sub(ecx)3"];
"[197] sub" -> "[208] jnz"  [color=red, label="(ZF)EndofSliceValue", penwidth=5, shape=octagon, style=bold];
"[207] mov" -> "[247] movzx"  [label="[207] mov(mem)3"];
"[207] mov" -> "[242] cmp"  [label="[207] mov(mem)3"];
"[368] movzx" -> "[372] mov"  [label="[368] movzx(al)0"];
"[298] mov" -> "[300] mov"  [label="[298] mov(eax)3"];
"[298] mov" -> "[310] xor"  [label="[298] mov(eax)3"];
"[298] mov" -> "[309] mov"  [label="[298] mov(eax)3"];
"[298] mov" -> "[299] mov"  [label="[298] mov(eax)3"];
"[289] mov" -> "[292] mov"  [label="[289] mov(mem)3"];
"[289] mov" -> "[0xbffff4cc]"  [color=green, label=EndofSliceValue, penwidth=5, shape=parallelogram, style=bold];
"[164] mov" -> "[167] movzx"  [label="[164] mov(edi)3"];
"[70] mov" -> "[0xb7e41728]"  [color=green, label=EndofSliceValue, penwidth=5, shape=parallelogram, style=bold];
"[468] mov" -> "[0xb7e4000e]"  [color=green, label=EndofSliceValue, penwidth=5, shape=parallelogram, style=bold];
"[387] mov" -> "[398] sub"  [label="[387] mov(ecx)3"];
"[387] mov" -> "[392] mov"  [label="[387] mov(ecx)3"];
"[182] mov" -> "[185] movzx"  [label="[182] mov(edi)3"];
"[344] sub" -> "[350] movzx"  [label="[344] sub(ecx)3"];
"[344] sub" -> "[355] jz"  [color=red, label="(ZF)EndofSliceValue", penwidth=5, shape=octagon, style=bold];
"[74] mov" -> "[76] cmp"  [label="[74] mov(mem)3"];
"[74] mov" -> "[80] mov"  [label="[74] mov(mem)3"];
"[74] mov" -> "[0xbffff4c8]"  [color=green, label=EndofSliceValue, penwidth=5, shape=parallelogram, style=bold];
"[74] mov" -> "[286] mov"  [label="[74] mov(mem)3"];
"[177] lea" -> "[178] add"  [label="[177] lea(eax)3"];
"[108] mov" -> "[214] cmp"  [label="[108] mov(mem)3"];
"[108] mov" -> "[227] cmp"  [label="[108] mov(mem)3"];
"[108] mov" -> "[210] cmp"  [label="[108] mov(mem)3"];
"[108] mov" -> "[112] mov"  [label="[108] mov(mem)3"];
"[351] mov" -> "[362] sub"  [label="[351] mov(ecx)3"];
"[351] mov" -> "[356] mov"  [label="[351] mov(ecx)3"];
"[267] mov" -> "[0xb7e40014]"  [color=green, label=EndofSliceValue, penwidth=5, shape=parallelogram, style=bold];
"[236] cmp" -> "[237] jz"  [color=red, label="(ZF)EndofSliceValue", penwidth=5, shape=octagon, style=bold];
"[87] mov" -> "[0xbffff49c]"  [color=green, label=EndofSliceValue, penwidth=5, shape=parallelogram, style=bold];
"[87] mov" -> "[90] mov"  [label="[87] mov(mem)3"];
"[159] lea" -> "[160] add"  [label="[159] lea(eax)3"];
"[259] mov" -> "[0xb7e40013]"  [color=green, label=EndofSliceValue, penwidth=5, shape=parallelogram, style=bold];
"[132] mov" -> "[137] mov"  [label="[132] mov(ecx)3"];
"[132] mov" -> "[143] sub"  [label="[132] mov(ecx)3"];
"[339] mov" -> "[340] mul"  [label="[339] mov(ebp)3"];
"[220] mov" -> "[221] or"  [label="[220] mov(mem)3"];
"[386] movzx" -> "[390] mov"  [label="[386] movzx(al)0"];
"[224] cmp" -> "[225] jnz"  [color=red, label="(ZF)EndofSliceValue", penwidth=5, shape=octagon, style=bold];
"[440] cmp" -> "[441] jz"  [color=red, label="(ZF)EndofSliceValue", penwidth=5, shape=octagon, style=bold];
"[153] mov" -> "[233] cmp"  [label="[153] mov(mem)3"];
"[153] mov" -> "[271] movzx"  [label="[153] mov(mem)3"];
"[452] mov" -> "[0xb7e4000c]"  [color=green, label=EndofSliceValue, penwidth=5, shape=parallelogram, style=bold];
"[313] mov" -> "[316] mov"  [label="[313] mov(eax)3"];
"[332] movzx" -> "[336] mov"  [label="[332] movzx(al)0"];
"[203] movzx" -> "[207] mov"  [label="[203] movzx(al)0"];
"[194] shr" -> "[212] xor"  [label="[194] shr(edx)3"];
"[194] shr" -> "[198] test"  [label="[194] shr(edx)3"];
"[194] shr" -> "[195] lea"  [label="[194] shr(edx)3"];
"[194] shr" -> "[204] mov"  [label="[194] shr(edx)3"];
ESP -> ESP  [color=green, label=EndofSliceValue, penwidth=5, shape=parallelogram, style=bold];
"[329] mov" -> "[332] movzx"  [label="[329] mov(edi)3"];
"[0xbfffef68]" -> "[56] mov"  [label="[0xbfffef68](mem)3"];
"[0xbfffef68]" -> "[30] mov"  [label="[0xbfffef68](mem)3"];
"[40] xor" -> "[43] or"  [label="[40] xor(edx)3"];
"[76] cmp" -> "[77] js"  [color=red, label="(SF)EndofSliceValue", penwidth=5, shape=octagon, style=bold];
"[178] add" -> "[178] add"  [label="[178] add(eax)3"];
"[178] add" -> "[179] sub"  [label="[178] add(eax)3"];
"[218] or" -> "[221] or"  [label="[218] or(eax)3"];
"[333] mov" -> "[344] sub"  [label="[333] mov(ecx)3"];
"[333] mov" -> "[338] mov"  [label="[333] mov(ecx)3"];
"[378] lea" -> "[379] add"  [label="[378] lea(eax)3"];
"[263] movzx" -> "[267] mov"  [label="[263] movzx(cl)0"];
"[189] mov" -> "[255] movzx"  [label="[189] mov(mem)3"];
"[189] mov" -> "[239] cmp"  [label="[189] mov(mem)3"];
ESI -> ESI  [color=green, label=EndofSliceValue, penwidth=5, shape=parallelogram, style=bold];
"[85] mov" -> "[93] mov"  [label="[85] mov(mem)3"];
"[85] mov" -> "[0xbffff4a0]"  [color=green, label=EndofSliceValue, penwidth=5, shape=parallelogram, style=bold];
"[354] mov" -> "[472] movzx"  [label="[354] mov(mem)3"];
"[354] mov" -> "[0xbffff46e]"  [color=green, label=EndofSliceValue, penwidth=5, shape=parallelogram, style=bold];
"[354] mov" -> "[434] cmp"  [label="[354] mov(mem)3"];
"[195] lea" -> "[196] add"  [label="[195] lea(eax)3"];
"[419] or" -> "[422] or"  [label="[419] or(eax)3"];
"[480] movzx" -> "[484] mov"  [label="[480] movzx(cl)0"];
"[480] movzx" -> ECX  [color=green, label=EndofSliceValue, penwidth=5, shape=parallelogram, style=bold];
"[185] movzx" -> "[189] mov"  [label="[185] movzx(al)0"];
"[71] mov" -> "[74] mov"  [label="[71] mov(eax)3"];
"[431] cmp" -> "[432] jz"  [color=red, label="(ZF)EndofSliceValue", penwidth=5, shape=octagon, style=bold];
"[124] add" -> "[124] add"  [label="[124] add(eax)3"];
"[124] add" -> "[125] sub"  [label="[124] add(eax)3"];
EBX -> EBX  [color=green, label=EndofSliceValue, penwidth=5, shape=parallelogram, style=bold];
"[167] movzx" -> "[171] mov"  [label="[167] movzx(al)0"];
"[401] mov" -> "[404] movzx"  [label="[401] mov(edi)3"];
"[401] mov" -> EDI  [color=green, label=EndofSliceValue, penwidth=5, shape=parallelogram, style=bold];
}
