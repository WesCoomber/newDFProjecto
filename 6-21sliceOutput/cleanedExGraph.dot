digraph "" {
EAX [fillcolor=greenyellow, label=EAX, penwidth=4, shape=parallelogram, style=filled];
ECX [fillcolor=greenyellow, label=ECX, penwidth=4, shape=parallelogram, style=filled];
EDI [fillcolor=greenyellow, label=EDI, penwidth=4, shape=parallelogram, style=filled];
EDX [fillcolor=greenyellow, label=EDX, penwidth=4, shape=parallelogram, style=filled];
EBX [fillcolor=greenyellow, label=EBX, penwidth=4, shape=parallelogram, style=filled];
ESP [fillcolor=greenyellow, label=ESP, penwidth=4, shape=parallelogram, style=filled];
EBP [fillcolor=greenyellow, label=EBP, penwidth=4, shape=parallelogram, style=filled];
ESI [fillcolor=greenyellow, label=ESI, penwidth=4, shape=parallelogram, style=filled];
"[27] MRange,fstat64" [label="[27] MRange,fstat64(['[0xbfffef68]', '[0xbfffef69]', '[0xbfffef6a]', '[0xbfffef6b]', '[0xbfffef6c]', '[0xbfffef6d]', '[0xbfffef6e]', '[0xbfffef6f]'])"];
"[33] mov" [label="[33] mov(['edi', '[0xbfffef68]'])"];
"[35] mov" [label="[35] mov(['ecx', '[0xbfffef6c]'])"];
"[36] mov" [label="[36] mov(['edx', '0'])"];
"[37] xor" [label="[37] xor(['edx', 'ecx'])"];
"[38] mov" [label="[38] mov(['eax', '0'])"];
"[39] xor" [label="[39] xor(['eax', 'edi'])"];
"[40] or" [label="[40] or(['edx', 'eax'])"];
"[41] jz" [fillcolor=crimson, label="[41] jz(['jump_diverge'])", penwidth=4, shape=octagon, style=filled];
"[42] mov" [label="[42] mov(['edx', '0'])"];
"[43] xor" [label="[43] xor(['edx', 'ecx'])"];
"[44] mov" [label="[44] mov(['eax', '0'])"];
"[45] xor" [label="[45] xor(['eax', 'edi'])"];
"[46] or" [label="[46] or(['edx', 'eax'])"];
"[47] jz" [fillcolor=crimson, label="[47] jz(['jump_diverge'])", penwidth=4, shape=octagon, style=filled];
"[48] mov" [label="[48] mov(['edx', '0'])"];
"[49] xor" [label="[49] xor(['edx', 'ecx'])"];
"[50] mov" [label="[50] mov(['eax', '0'])"];
"[51] xor" [label="[51] xor(['eax', 'edi'])"];
"[52] or" [label="[52] or(['edx', 'eax'])"];
"[53] jz" [fillcolor=crimson, label="[53] jz(['jump_diverge'])", penwidth=4, shape=octagon, style=filled];
"[55] mov" [label="[55] mov(['[0xbfffee74]', 'edi'])"];
"[60] mov" [label="[60] mov(['eax', '[0xbfffef68]'])"];
"[62] mov" [label="[62] mov(['edx', '[0xbfffef6c]'])"];
"[64] mov" [label="[64] mov(['[0xb7fdde98]', 'eax'])"];
"[66] mov" [label="[66] mov(['[0xb7fdde9c]', 'edx'])"];
"[67] call-getpid_recheck" [label="[67] call-getpid_recheck(['eax'])"];
"[68] mov" [label="[68] mov(['ecx', 'eax'])"];
"[70] mov" [label="[70] mov(['[0xb7e41728]', 'ecx'])"];
"[71] mov" [label="[71] mov(['eax', 'ecx'])"];
"[73] mov" [label="[73] mov(['[0xbffff4c8]', 'eax'])"];
"[75] cmp" [label="[75] cmp(['[0xbffff4c8]', '0x0'])"];
"[76] js" [fillcolor=crimson, label="[76] js(['jump_diverge'])", penwidth=4, shape=octagon, style=filled];
"[78] mov" [label="[78] mov(['eax', '[0xbffff4c8]'])"];
"[80] mov" [label="[80] mov(['[0xbffff4b4]', 'eax'])"];
"[82] mov" [label="[82] mov(['[0xbffff4a0]', 'eax'])"];
"[84] mov" [label="[84] mov(['[0xbffff49c]', 'ecx'])"];
"[95] mov" [label="[95] mov(['eax', '[0xbffff4b4]'])"];
"[96] mov" [label="[96] mov(['ecx', 'eax'])"];
"[98] shr" [label="[98] shr(['ecx', '0x1f'])"];
"[100] test" [label="[100] test(['ecx', 'ecx'])"];
"[101] cmovnz" [label="[101] cmovnz(['eax', 'edx'])"];
"[99] neg" [label="[99] neg(['edx'])"];
"[103] mov" [label="[103] mov(['[0xbfffefd4]', 'ecx'])"];
"[105] mov" [label="[105] mov(['[0xbfffefe4]', 'eax'])"];
"[116] shr" [label="[116] shr(['edx', '0x3'])"];
"[127] test" [label="[127] test(['edx', 'edx'])"];
"[129] jz" [fillcolor=crimson, label="[129] jz(['jump_diverge'])", penwidth=4, shape=octagon, style=filled];
"[133] shr" [label="[133] shr(['edx', '0x3'])"];
"[144] test" [label="[144] test(['edx', 'edx'])"];
"[146] jz" [fillcolor=crimson, label="[146] jz(['jump_diverge'])", penwidth=4, shape=octagon, style=filled];
"[150] shr" [label="[150] shr(['edx', '0x3'])"];
"[161] test" [label="[161] test(['edx', 'edx'])"];
"[163] jz" [fillcolor=crimson, label="[163] jz(['jump_diverge'])", penwidth=4, shape=octagon, style=filled];
"[167] shr" [label="[167] shr(['edx', '0x3'])"];
"[178] test" [label="[178] test(['edx', 'edx'])"];
"[180] jz" [fillcolor=crimson, label="[180] jz(['jump_diverge'])", penwidth=4, shape=octagon, style=filled];
"[184] shr" [label="[184] shr(['edx', '0x3'])"];
"[195] test" [label="[195] test(['edx', 'edx'])"];
"[197] jnz" [fillcolor=crimson, label="[197] jnz(['jump_diverge'])", penwidth=4, shape=octagon, style=filled];
"[199] cmp" [label="[199] cmp(['[0xbfffefe4]', '0x0'])"];
"[200] jz" [fillcolor=crimson, label="[200] jz(['jump_diverge'])", penwidth=4, shape=octagon, style=filled];
"[203] cmp" [label="[203] cmp(['[0xbfffefe4]', '0x0'])"];
"[204] jz" [fillcolor=crimson, label="[204] jz(['jump_diverge'])", penwidth=4, shape=octagon, style=filled];
"[213] cmp" [label="[213] cmp(['[0xbfffefd4]', '0x0'])"];
"[214] jnz" [fillcolor=crimson, label="[214] jnz(['jump_diverge'])", penwidth=4, shape=octagon, style=filled];
"[216] cmp" [label="[216] cmp(['[0xbfffefe4]', '0x0'])"];
"[217] jz" [fillcolor=crimson, label="[217] jz(['jump_diverge'])", penwidth=4, shape=octagon, style=filled];
"[220] mov" [label="[220] mov(['eax', '[0xbffff4c8]'])"];
"[222] mov" [label="[222] mov(['[0xbffff4cc]', 'eax'])"];
"[224] mov" [label="[224] mov(['eax', '[0xbffff4cc]'])"];
"[226] mov" [label="[226] mov(['[0xbffff4b4]', 'eax'])"];
"[228] mov" [label="[228] mov(['eax', '[0xbffff4b4]'])"];
"[229] mov" [label="[229] mov(['ecx', 'eax'])"];
"[231] shr" [label="[231] shr(['ecx', '0x1f'])"];
"[233] test" [label="[233] test(['ecx', 'ecx'])"];
"[234] cmovnz" [label="[234] cmovnz(['eax', 'edx'])"];
"[232] neg" [label="[232] neg(['edx'])"];
"[236] mov" [label="[236] mov(['[0xbfffefd4]', 'ecx'])"];
"[238] mov" [label="[238] mov(['[0xbfffefe4]', 'eax'])"];
"[241] mov" [label="[241] mov(['eax', '[0xbfffefe4]'])"];
"[243] mov" [label="[243] mov(['[0xbfffef70]', 'eax'])"];
"[249] shr" [label="[249] shr(['edx', '0x3'])"];
"[260] test" [label="[260] test(['edx', 'edx'])"];
"[262] jz" [fillcolor=crimson, label="[262] jz(['jump_diverge'])", penwidth=4, shape=octagon, style=filled];
"[266] shr" [label="[266] shr(['edx', '0x3'])"];
"[277] test" [label="[277] test(['edx', 'edx'])"];
"[279] jz" [fillcolor=crimson, label="[279] jz(['jump_diverge'])", penwidth=4, shape=octagon, style=filled];
"[283] shr" [label="[283] shr(['edx', '0x3'])"];
"[294] test" [label="[294] test(['edx', 'edx'])"];
"[296] jz" [fillcolor=crimson, label="[296] jz(['jump_diverge'])", penwidth=4, shape=octagon, style=filled];
"[300] shr" [label="[300] shr(['edx', '0x3'])"];
"[311] test" [label="[311] test(['edx', 'edx'])"];
"[313] jz" [fillcolor=crimson, label="[313] jz(['jump_diverge'])", penwidth=4, shape=octagon, style=filled];
"[315] mov" [label="[315] mov(['ebp', '3435973837'])"];
"[317] shr" [label="[317] shr(['edx', '0x3'])"];
"[323] push" [label="[323] push(['0x9'])"];
"[325] add" [label="[325] add(['esp', '4'])"];
"[328] test" [label="[328] test(['edx', 'edx'])"];
"[329] mov" [label="[329] mov(['ecx', 'edx'])"];
"[330] jnz" [fillcolor=crimson, label="[330] jnz(['jump_diverge'])", penwidth=4, shape=octagon, style=filled];
"[332] cmp" [label="[332] cmp(['[0xbfffefe4]', '0x0'])"];
"[333] jz" [fillcolor=crimson, label="[333] jz(['jump_diverge'])", penwidth=4, shape=octagon, style=filled];
"[334] xor" [label="[334] xor(['edx', 'edx'])"];
"[336] cmp" [label="[336] cmp(['[0xbfffefe4]', '0x0'])"];
"[337] jz" [fillcolor=crimson, label="[337] jz(['jump_diverge'])", penwidth=4, shape=octagon, style=filled];
"[342] mov" [label="[342] mov(['[0xbfffefd8]', '0'])"];
"[346] cmp" [label="[346] cmp(['[0xbfffefd4]', '0x0'])"];
"[347] jnz" [fillcolor=crimson, label="[347] jnz(['jump_diverge'])", penwidth=4, shape=octagon, style=filled];
"[349] cmp" [label="[349] cmp(['[0xbfffefe4]', '0x0'])"];
"[350] jz" [fillcolor=crimson, label="[350] jz(['jump_diverge'])", penwidth=4, shape=octagon, style=filled];
"[28] MRange,fstat64" [label="[28] MRange,fstat64(['[0xbfffef50]', '[0xbfffef51]', '[0xbfffef52]', '[0xbfffef53]'])"];
"[29] MRange,fstat64" [label="[29] MRange,fstat64(['[0xbfffef60]', '[0xbfffef61]', '[0xbfffef62]', '[0xbfffef63]'])"];
"[30] MRange,fstat64" [label="[30] MRange,fstat64(['[0xbfffef58]', '[0xbfffef59]', '[0xbfffef5a]', '[0xbfffef5b]'])"];
"[89] MRange,fstat64" [label="[89] MRange,fstat64(['[0xbfffeec8]', '[0xbfffeec9]', '[0xbfffeeca]', '[0xbfffeecb]', '[0xbfffeecc]', '[0xbfffeecd]', '[0xbfffeece]', '[0xbfffeecf]'])"];
"[90] MRange,fstat64" [label="[90] MRange,fstat64(['[0xbfffeeb0]', '[0xbfffeeb1]', '[0xbfffeeb2]', '[0xbfffeeb3]'])"];
"[91] MRange,fstat64" [label="[91] MRange,fstat64(['[0xbfffeec0]', '[0xbfffeec1]', '[0xbfffeec2]', '[0xbfffeec3]'])"];
"[92] MRange,fstat64" [label="[92] MRange,fstat64(['[0xbfffeeb8]', '[0xbfffeeb9]', '[0xbfffeeba]', '[0xbfffeebb]'])"];
"[327] mov" [label="[327] mov(['edi', '0xb7f8be40'])"];
"[352] call-write_recheck" [label="[352] call-write_recheck(['eax'])"];
"[0xbfffef68]" [fillcolor=greenyellow, label="[0xbfffef68]", penwidth=4, shape=parallelogram, style=filled];
"[0xbfffef69]" [fillcolor=greenyellow, label="[0xbfffef69]", penwidth=4, shape=parallelogram, style=filled];
"[0xbfffef6a]" [fillcolor=greenyellow, label="[0xbfffef6a]", penwidth=4, shape=parallelogram, style=filled];
"[0xbfffef6b]" [fillcolor=greenyellow, label="[0xbfffef6b]", penwidth=4, shape=parallelogram, style=filled];
"[0xbfffef6c]" [fillcolor=greenyellow, label="[0xbfffef6c]", penwidth=4, shape=parallelogram, style=filled];
"[0xbfffef6d]" [fillcolor=greenyellow, label="[0xbfffef6d]", penwidth=4, shape=parallelogram, style=filled];
"[0xbfffef6e]" [fillcolor=greenyellow, label="[0xbfffef6e]", penwidth=4, shape=parallelogram, style=filled];
"[0xbfffef6f]" [fillcolor=greenyellow, label="[0xbfffef6f]", penwidth=4, shape=parallelogram, style=filled];
"[0xbfffef50]" [fillcolor=greenyellow, label="[0xbfffef50]", penwidth=4, shape=parallelogram, style=filled];
"[0xbfffef51]" [fillcolor=greenyellow, label="[0xbfffef51]", penwidth=4, shape=parallelogram, style=filled];
"[0xbfffef52]" [fillcolor=greenyellow, label="[0xbfffef52]", penwidth=4, shape=parallelogram, style=filled];
"[0xbfffef53]" [fillcolor=greenyellow, label="[0xbfffef53]", penwidth=4, shape=parallelogram, style=filled];
"[0xbfffef60]" [fillcolor=greenyellow, label="[0xbfffef60]", penwidth=4, shape=parallelogram, style=filled];
"[0xbfffef61]" [fillcolor=greenyellow, label="[0xbfffef61]", penwidth=4, shape=parallelogram, style=filled];
"[0xbfffef62]" [fillcolor=greenyellow, label="[0xbfffef62]", penwidth=4, shape=parallelogram, style=filled];
"[0xbfffef63]" [fillcolor=greenyellow, label="[0xbfffef63]", penwidth=4, shape=parallelogram, style=filled];
"[0xbfffef58]" [fillcolor=greenyellow, label="[0xbfffef58]", penwidth=4, shape=parallelogram, style=filled];
"[0xbfffef59]" [fillcolor=greenyellow, label="[0xbfffef59]", penwidth=4, shape=parallelogram, style=filled];
"[0xbfffef5a]" [fillcolor=greenyellow, label="[0xbfffef5a]", penwidth=4, shape=parallelogram, style=filled];
"[0xbfffef5b]" [fillcolor=greenyellow, label="[0xbfffef5b]", penwidth=4, shape=parallelogram, style=filled];
"[0xbfffee74]" [fillcolor=greenyellow, label="[0xbfffee74]", penwidth=4, shape=parallelogram, style=filled];
"[0xb7fdde98]" [fillcolor=greenyellow, label="[0xb7fdde98]", penwidth=4, shape=parallelogram, style=filled];
"[0xb7fdde9c]" [fillcolor=greenyellow, label="[0xb7fdde9c]", penwidth=4, shape=parallelogram, style=filled];
"[0xb7e41728]" [fillcolor=greenyellow, label="[0xb7e41728]", penwidth=4, shape=parallelogram, style=filled];
"[0xbffff4c8]" [fillcolor=greenyellow, label="[0xbffff4c8]", penwidth=4, shape=parallelogram, style=filled];
"[0xbffff4b4]" [fillcolor=greenyellow, label="[0xbffff4b4]", penwidth=4, shape=parallelogram, style=filled];
"[0xbffff4a0]" [fillcolor=greenyellow, label="[0xbffff4a0]", penwidth=4, shape=parallelogram, style=filled];
"[0xbffff49c]" [fillcolor=greenyellow, label="[0xbffff49c]", penwidth=4, shape=parallelogram, style=filled];
"[0xbfffeec8]" [fillcolor=greenyellow, label="[0xbfffeec8]", penwidth=4, shape=parallelogram, style=filled];
"[0xbfffeec9]" [fillcolor=greenyellow, label="[0xbfffeec9]", penwidth=4, shape=parallelogram, style=filled];
"[0xbfffeeca]" [fillcolor=greenyellow, label="[0xbfffeeca]", penwidth=4, shape=parallelogram, style=filled];
"[0xbfffeecb]" [fillcolor=greenyellow, label="[0xbfffeecb]", penwidth=4, shape=parallelogram, style=filled];
"[0xbfffeecc]" [fillcolor=greenyellow, label="[0xbfffeecc]", penwidth=4, shape=parallelogram, style=filled];
"[0xbfffeecd]" [fillcolor=greenyellow, label="[0xbfffeecd]", penwidth=4, shape=parallelogram, style=filled];
"[0xbfffeece]" [fillcolor=greenyellow, label="[0xbfffeece]", penwidth=4, shape=parallelogram, style=filled];
"[0xbfffeecf]" [fillcolor=greenyellow, label="[0xbfffeecf]", penwidth=4, shape=parallelogram, style=filled];
"[0xbfffeeb0]" [fillcolor=greenyellow, label="[0xbfffeeb0]", penwidth=4, shape=parallelogram, style=filled];
"[0xbfffeeb1]" [fillcolor=greenyellow, label="[0xbfffeeb1]", penwidth=4, shape=parallelogram, style=filled];
"[0xbfffeeb2]" [fillcolor=greenyellow, label="[0xbfffeeb2]", penwidth=4, shape=parallelogram, style=filled];
"[0xbfffeeb3]" [fillcolor=greenyellow, label="[0xbfffeeb3]", penwidth=4, shape=parallelogram, style=filled];
"[0xbfffeec0]" [fillcolor=greenyellow, label="[0xbfffeec0]", penwidth=4, shape=parallelogram, style=filled];
"[0xbfffeec1]" [fillcolor=greenyellow, label="[0xbfffeec1]", penwidth=4, shape=parallelogram, style=filled];
"[0xbfffeec2]" [fillcolor=greenyellow, label="[0xbfffeec2]", penwidth=4, shape=parallelogram, style=filled];
"[0xbfffeec3]" [fillcolor=greenyellow, label="[0xbfffeec3]", penwidth=4, shape=parallelogram, style=filled];
"[0xbfffeeb8]" [fillcolor=greenyellow, label="[0xbfffeeb8]", penwidth=4, shape=parallelogram, style=filled];
"[0xbfffeeb9]" [fillcolor=greenyellow, label="[0xbfffeeb9]", penwidth=4, shape=parallelogram, style=filled];
"[0xbfffeeba]" [fillcolor=greenyellow, label="[0xbfffeeba]", penwidth=4, shape=parallelogram, style=filled];
"[0xbfffeebb]" [fillcolor=greenyellow, label="[0xbfffeebb]", penwidth=4, shape=parallelogram, style=filled];
"[0xbfffefd4]" [fillcolor=greenyellow, label="[0xbfffefd4]", penwidth=4, shape=parallelogram, style=filled];
"[0xbfffefe4]" [fillcolor=greenyellow, label="[0xbfffefe4]", penwidth=4, shape=parallelogram, style=filled];
"[0xbfffef70]" [fillcolor=greenyellow, label="[0xbfffef70]", penwidth=4, shape=parallelogram, style=filled];
"[0xbfffefd8]" [fillcolor=greenyellow, label="[0xbfffefd8]", penwidth=4, shape=parallelogram, style=filled];
"[0xbffff4cc]" [fillcolor=greenyellow, label="[0xbffff4cc]", penwidth=4, shape=parallelogram, style=filled];
OF [fillcolor=greenyellow, label=OF, penwidth=4, shape=parallelogram, style=filled];
SF [fillcolor=greenyellow, label=SF, penwidth=4, shape=parallelogram, style=filled];
ZF [fillcolor=greenyellow, label=ZF, penwidth=4, shape=parallelogram, style=filled];
AF [fillcolor=greenyellow, label=AF, penwidth=4, shape=parallelogram, style=filled];
CF [fillcolor=greenyellow, label=CF, penwidth=4, shape=parallelogram, style=filled];
PF [fillcolor=greenyellow, label=PF, penwidth=4, shape=parallelogram, style=filled];
EBX -> EBX  [color=green, label=EndofSliceValue, penwidth=5, shape=parallelogram, style=bold];
ESI -> ESI  [color=green, label=EndofSliceValue, penwidth=5, shape=parallelogram, style=bold];
"[27] MRange,fstat64" -> "[33] mov"  [label="[27] MRange,fstat64(mem)3"];
"[27] MRange,fstat64" -> "[35] mov"  [label="[27] MRange,fstat64(mem)3"];
"[27] MRange,fstat64" -> "[60] mov"  [label="[27] MRange,fstat64(mem)3"];
"[27] MRange,fstat64" -> "[62] mov"  [label="[27] MRange,fstat64(mem)3"];
"[27] MRange,fstat64" -> "[0xbfffef68]"  [color=green, label=EndofSliceValue, penwidth=5, shape=parallelogram, style=bold];
"[27] MRange,fstat64" -> "[0xbfffef69]"  [color=green, label=EndofSliceValue, penwidth=5, shape=parallelogram, style=bold];
"[27] MRange,fstat64" -> "[0xbfffef6a]"  [color=green, label=EndofSliceValue, penwidth=5, shape=parallelogram, style=bold];
"[27] MRange,fstat64" -> "[0xbfffef6b]"  [color=green, label=EndofSliceValue, penwidth=5, shape=parallelogram, style=bold];
"[27] MRange,fstat64" -> "[0xbfffef6c]"  [color=green, label=EndofSliceValue, penwidth=5, shape=parallelogram, style=bold];
"[27] MRange,fstat64" -> "[0xbfffef6d]"  [color=green, label=EndofSliceValue, penwidth=5, shape=parallelogram, style=bold];
"[27] MRange,fstat64" -> "[0xbfffef6e]"  [color=green, label=EndofSliceValue, penwidth=5, shape=parallelogram, style=bold];
"[27] MRange,fstat64" -> "[0xbfffef6f]"  [color=green, label=EndofSliceValue, penwidth=5, shape=parallelogram, style=bold];
"[33] mov" -> "[39] xor"  [label="[33] mov(edi)3"];
"[33] mov" -> "[45] xor"  [label="[33] mov(edi)3"];
"[33] mov" -> "[51] xor"  [label="[33] mov(edi)3"];
"[33] mov" -> "[55] mov"  [label="[33] mov(edi)3"];
"[35] mov" -> "[37] xor"  [label="[35] mov(ecx)3"];
"[35] mov" -> "[43] xor"  [label="[35] mov(ecx)3"];
"[35] mov" -> "[49] xor"  [label="[35] mov(ecx)3"];
"[36] mov" -> "[37] xor"  [label="[36] mov(edx)3"];
"[37] xor" -> "[40] or"  [label="[37] xor(edx)3"];
"[38] mov" -> "[39] xor"  [label="[38] mov(eax)3"];
"[39] xor" -> "[40] or"  [label="[39] xor(eax)3"];
"[40] or" -> "[41] jz"  [color=red, label="(ZF)EndofSliceValue", penwidth=5, shape=octagon, style=bold];
"[42] mov" -> "[43] xor"  [label="[42] mov(edx)3"];
"[43] xor" -> "[46] or"  [label="[43] xor(edx)3"];
"[44] mov" -> "[45] xor"  [label="[44] mov(eax)3"];
"[45] xor" -> "[46] or"  [label="[45] xor(eax)3"];
"[46] or" -> "[47] jz"  [color=red, label="(ZF)EndofSliceValue", penwidth=5, shape=octagon, style=bold];
"[48] mov" -> "[49] xor"  [label="[48] mov(edx)3"];
"[49] xor" -> "[52] or"  [label="[49] xor(edx)3"];
"[50] mov" -> "[51] xor"  [label="[50] mov(eax)3"];
"[51] xor" -> "[52] or"  [label="[51] xor(eax)3"];
"[52] or" -> "[53] jz"  [color=red, label="(ZF)EndofSliceValue", penwidth=5, shape=octagon, style=bold];
"[55] mov" -> "[0xbfffee74]"  [color=green, label=EndofSliceValue, penwidth=5, shape=parallelogram, style=bold];
"[60] mov" -> "[64] mov"  [label="[60] mov(eax)3"];
"[62] mov" -> "[66] mov"  [label="[62] mov(edx)3"];
"[64] mov" -> "[0xb7fdde98]"  [color=green, label=EndofSliceValue, penwidth=5, shape=parallelogram, style=bold];
"[66] mov" -> "[0xb7fdde9c]"  [color=green, label=EndofSliceValue, penwidth=5, shape=parallelogram, style=bold];
"[67] call-getpid_recheck" -> "[68] mov"  [label="[67] call-getpid_recheck(eax)3"];
"[68] mov" -> "[70] mov"  [label="[68] mov(ecx)3"];
"[68] mov" -> "[71] mov"  [label="[68] mov(ecx)3"];
"[68] mov" -> "[84] mov"  [label="[68] mov(ecx)3"];
"[70] mov" -> "[0xb7e41728]"  [color=green, label=EndofSliceValue, penwidth=5, shape=parallelogram, style=bold];
"[71] mov" -> "[73] mov"  [label="[71] mov(eax)3"];
"[73] mov" -> "[75] cmp"  [label="[73] mov(mem)3"];
"[73] mov" -> "[78] mov"  [label="[73] mov(mem)3"];
"[73] mov" -> "[220] mov"  [label="[73] mov(mem)3"];
"[73] mov" -> "[0xbffff4c8]"  [color=green, label=EndofSliceValue, penwidth=5, shape=parallelogram, style=bold];
"[75] cmp" -> "[76] js"  [color=red, label="(SF)EndofSliceValue", penwidth=5, shape=octagon, style=bold];
"[78] mov" -> "[80] mov"  [label="[78] mov(eax)3"];
"[78] mov" -> "[82] mov"  [label="[78] mov(eax)3"];
"[80] mov" -> "[95] mov"  [label="[80] mov(mem)3"];
"[82] mov" -> "[0xbffff4a0]"  [color=green, label=EndofSliceValue, penwidth=5, shape=parallelogram, style=bold];
"[84] mov" -> "[0xbffff49c]"  [color=green, label=EndofSliceValue, penwidth=5, shape=parallelogram, style=bold];
"[95] mov" -> "[96] mov"  [label="[95] mov(eax)3"];
"[96] mov" -> "[98] shr"  [label="[96] mov(ecx)3"];
"[98] shr" -> "[100] test"  [label="[98] shr(ecx)3"];
"[98] shr" -> "[103] mov"  [label="[98] shr(ecx)3"];
"[100] test" -> "[101] cmovnz"  [label="(ZF)"];
"[101] cmovnz" -> "[105] mov"  [label="[101] cmovnz(eax)3"];
"[99] neg" -> "[101] cmovnz"  [label="[99] neg(edx)3"];
"[99] neg" -> "[116] shr"  [label="[99] neg(edx)3"];
"[103] mov" -> "[213] cmp"  [label="[103] mov(mem)3"];
"[105] mov" -> "[199] cmp"  [label="[105] mov(mem)3"];
"[105] mov" -> "[203] cmp"  [label="[105] mov(mem)3"];
"[105] mov" -> "[216] cmp"  [label="[105] mov(mem)3"];
"[116] shr" -> "[127] test"  [label="[116] shr(edx)3"];
"[116] shr" -> "[133] shr"  [label="[116] shr(edx)3"];
"[127] test" -> "[129] jz"  [color=red, label="(ZF)EndofSliceValue", penwidth=5, shape=octagon, style=bold];
"[133] shr" -> "[144] test"  [label="[133] shr(edx)3"];
"[133] shr" -> "[150] shr"  [label="[133] shr(edx)3"];
"[144] test" -> "[146] jz"  [color=red, label="(ZF)EndofSliceValue", penwidth=5, shape=octagon, style=bold];
"[150] shr" -> "[161] test"  [label="[150] shr(edx)3"];
"[150] shr" -> "[167] shr"  [label="[150] shr(edx)3"];
"[161] test" -> "[163] jz"  [color=red, label="(ZF)EndofSliceValue", penwidth=5, shape=octagon, style=bold];
"[167] shr" -> "[178] test"  [label="[167] shr(edx)3"];
"[167] shr" -> "[184] shr"  [label="[167] shr(edx)3"];
"[178] test" -> "[180] jz"  [color=red, label="(ZF)EndofSliceValue", penwidth=5, shape=octagon, style=bold];
"[184] shr" -> "[195] test"  [label="[184] shr(edx)3"];
"[195] test" -> "[197] jnz"  [color=red, label="(ZF)EndofSliceValue", penwidth=5, shape=octagon, style=bold];
"[199] cmp" -> "[200] jz"  [color=red, label="(ZF)EndofSliceValue", penwidth=5, shape=octagon, style=bold];
"[203] cmp" -> "[204] jz"  [color=red, label="(ZF)EndofSliceValue", penwidth=5, shape=octagon, style=bold];
"[213] cmp" -> "[214] jnz"  [color=red, label="(ZF)EndofSliceValue", penwidth=5, shape=octagon, style=bold];
"[216] cmp" -> "[217] jz"  [color=red, label="(ZF)EndofSliceValue", penwidth=5, shape=octagon, style=bold];
"[220] mov" -> "[222] mov"  [label="[220] mov(eax)3"];
"[222] mov" -> "[224] mov"  [label="[222] mov(mem)3"];
"[222] mov" -> "[0xbffff4cc]"  [color=green, label=EndofSliceValue, penwidth=5, shape=parallelogram, style=bold];
"[224] mov" -> "[226] mov"  [label="[224] mov(eax)3"];
"[226] mov" -> "[228] mov"  [label="[226] mov(mem)3"];
"[226] mov" -> "[0xbffff4b4]"  [color=green, label=EndofSliceValue, penwidth=5, shape=parallelogram, style=bold];
"[228] mov" -> "[229] mov"  [label="[228] mov(eax)3"];
"[229] mov" -> "[231] shr"  [label="[229] mov(ecx)3"];
"[231] shr" -> "[233] test"  [label="[231] shr(ecx)3"];
"[231] shr" -> "[236] mov"  [label="[231] shr(ecx)3"];
"[233] test" -> "[234] cmovnz"  [label="(ZF)"];
"[234] cmovnz" -> "[238] mov"  [label="[234] cmovnz(eax)3"];
"[232] neg" -> "[234] cmovnz"  [label="[232] neg(edx)3"];
"[232] neg" -> "[249] shr"  [label="[232] neg(edx)3"];
"[236] mov" -> "[346] cmp"  [label="[236] mov(mem)3"];
"[236] mov" -> "[0xbfffefd4]"  [color=green, label=EndofSliceValue, penwidth=5, shape=parallelogram, style=bold];
"[238] mov" -> "[241] mov"  [label="[238] mov(mem)3"];
"[238] mov" -> "[332] cmp"  [label="[238] mov(mem)3"];
"[238] mov" -> "[336] cmp"  [label="[238] mov(mem)3"];
"[238] mov" -> "[349] cmp"  [label="[238] mov(mem)3"];
"[238] mov" -> "[0xbfffefe4]"  [color=green, label=EndofSliceValue, penwidth=5, shape=parallelogram, style=bold];
"[241] mov" -> "[243] mov"  [label="[241] mov(eax)3"];
"[243] mov" -> "[0xbfffef70]"  [color=green, label=EndofSliceValue, penwidth=5, shape=parallelogram, style=bold];
"[249] shr" -> "[260] test"  [label="[249] shr(edx)3"];
"[249] shr" -> "[266] shr"  [label="[249] shr(edx)3"];
"[260] test" -> "[262] jz"  [color=red, label="(ZF)EndofSliceValue", penwidth=5, shape=octagon, style=bold];
"[266] shr" -> "[277] test"  [label="[266] shr(edx)3"];
"[266] shr" -> "[283] shr"  [label="[266] shr(edx)3"];
"[277] test" -> "[279] jz"  [color=red, label="(ZF)EndofSliceValue", penwidth=5, shape=octagon, style=bold];
"[283] shr" -> "[294] test"  [label="[283] shr(edx)3"];
"[283] shr" -> "[300] shr"  [label="[283] shr(edx)3"];
"[294] test" -> "[296] jz"  [color=red, label="(ZF)EndofSliceValue", penwidth=5, shape=octagon, style=bold];
"[300] shr" -> "[311] test"  [label="[300] shr(edx)3"];
"[300] shr" -> "[317] shr"  [label="[300] shr(edx)3"];
"[311] test" -> "[313] jz"  [color=red, label="(ZF)EndofSliceValue", penwidth=5, shape=octagon, style=bold];
"[315] mov" -> EBP  [color=green, label=EndofSliceValue, penwidth=5, shape=parallelogram, style=bold];
"[317] shr" -> "[328] test"  [label="[317] shr(edx)3"];
"[317] shr" -> "[329] mov"  [label="[317] shr(edx)3"];
"[317] shr" -> "[334] xor"  [label="[317] shr(edx)3"];
"[323] push" -> "[325] add"  [label="[323] push(esp)3"];
"[325] add" -> ESP  [color=green, label=EndofSliceValue, penwidth=5, shape=parallelogram, style=bold];
"[328] test" -> "[330] jnz"  [color=red, label="(ZF)EndofSliceValue", penwidth=5, shape=octagon, style=bold];
"[329] mov" -> ECX  [color=green, label=EndofSliceValue, penwidth=5, shape=parallelogram, style=bold];
"[332] cmp" -> "[333] jz"  [color=red, label="(ZF)EndofSliceValue", penwidth=5, shape=octagon, style=bold];
"[334] xor" -> "[334] xor"  [label="[334] xor(edx)3"];
"[334] xor" -> EDX  [color=green, label=EndofSliceValue, penwidth=5, shape=parallelogram, style=bold];
"[336] cmp" -> "[337] jz"  [color=red, label="(ZF)EndofSliceValue", penwidth=5, shape=octagon, style=bold];
"[342] mov" -> "[0xbfffefd8]"  [color=green, label=EndofSliceValue, penwidth=5, shape=parallelogram, style=bold];
"[346] cmp" -> "[347] jnz"  [color=red, label="(ZF)EndofSliceValue", penwidth=5, shape=octagon, style=bold];
"[349] cmp" -> "[350] jz"  [color=red, label="(ZF)EndofSliceValue", penwidth=5, shape=octagon, style=bold];
"[349] cmp" -> OF  [color=green, label=EndofSliceValue, penwidth=5, shape=parallelogram, style=bold];
"[349] cmp" -> SF  [color=green, label=EndofSliceValue, penwidth=5, shape=parallelogram, style=bold];
"[349] cmp" -> ZF  [color=green, label=EndofSliceValue, penwidth=5, shape=parallelogram, style=bold];
"[349] cmp" -> AF  [color=green, label=EndofSliceValue, penwidth=5, shape=parallelogram, style=bold];
"[349] cmp" -> CF  [color=green, label=EndofSliceValue, penwidth=5, shape=parallelogram, style=bold];
"[349] cmp" -> PF  [color=green, label=EndofSliceValue, penwidth=5, shape=parallelogram, style=bold];
"[28] MRange,fstat64" -> "[0xbfffef50]"  [color=green, label=EndofSliceValue, penwidth=5, shape=parallelogram, style=bold];
"[28] MRange,fstat64" -> "[0xbfffef51]"  [color=green, label=EndofSliceValue, penwidth=5, shape=parallelogram, style=bold];
"[28] MRange,fstat64" -> "[0xbfffef52]"  [color=green, label=EndofSliceValue, penwidth=5, shape=parallelogram, style=bold];
"[28] MRange,fstat64" -> "[0xbfffef53]"  [color=green, label=EndofSliceValue, penwidth=5, shape=parallelogram, style=bold];
"[29] MRange,fstat64" -> "[0xbfffef60]"  [color=green, label=EndofSliceValue, penwidth=5, shape=parallelogram, style=bold];
"[29] MRange,fstat64" -> "[0xbfffef61]"  [color=green, label=EndofSliceValue, penwidth=5, shape=parallelogram, style=bold];
"[29] MRange,fstat64" -> "[0xbfffef62]"  [color=green, label=EndofSliceValue, penwidth=5, shape=parallelogram, style=bold];
"[29] MRange,fstat64" -> "[0xbfffef63]"  [color=green, label=EndofSliceValue, penwidth=5, shape=parallelogram, style=bold];
"[30] MRange,fstat64" -> "[0xbfffef58]"  [color=green, label=EndofSliceValue, penwidth=5, shape=parallelogram, style=bold];
"[30] MRange,fstat64" -> "[0xbfffef59]"  [color=green, label=EndofSliceValue, penwidth=5, shape=parallelogram, style=bold];
"[30] MRange,fstat64" -> "[0xbfffef5a]"  [color=green, label=EndofSliceValue, penwidth=5, shape=parallelogram, style=bold];
"[30] MRange,fstat64" -> "[0xbfffef5b]"  [color=green, label=EndofSliceValue, penwidth=5, shape=parallelogram, style=bold];
"[89] MRange,fstat64" -> "[0xbfffeec8]"  [color=green, label=EndofSliceValue, penwidth=5, shape=parallelogram, style=bold];
"[89] MRange,fstat64" -> "[0xbfffeec9]"  [color=green, label=EndofSliceValue, penwidth=5, shape=parallelogram, style=bold];
"[89] MRange,fstat64" -> "[0xbfffeeca]"  [color=green, label=EndofSliceValue, penwidth=5, shape=parallelogram, style=bold];
"[89] MRange,fstat64" -> "[0xbfffeecb]"  [color=green, label=EndofSliceValue, penwidth=5, shape=parallelogram, style=bold];
"[89] MRange,fstat64" -> "[0xbfffeecc]"  [color=green, label=EndofSliceValue, penwidth=5, shape=parallelogram, style=bold];
"[89] MRange,fstat64" -> "[0xbfffeecd]"  [color=green, label=EndofSliceValue, penwidth=5, shape=parallelogram, style=bold];
"[89] MRange,fstat64" -> "[0xbfffeece]"  [color=green, label=EndofSliceValue, penwidth=5, shape=parallelogram, style=bold];
"[89] MRange,fstat64" -> "[0xbfffeecf]"  [color=green, label=EndofSliceValue, penwidth=5, shape=parallelogram, style=bold];
"[90] MRange,fstat64" -> "[0xbfffeeb0]"  [color=green, label=EndofSliceValue, penwidth=5, shape=parallelogram, style=bold];
"[90] MRange,fstat64" -> "[0xbfffeeb1]"  [color=green, label=EndofSliceValue, penwidth=5, shape=parallelogram, style=bold];
"[90] MRange,fstat64" -> "[0xbfffeeb2]"  [color=green, label=EndofSliceValue, penwidth=5, shape=parallelogram, style=bold];
"[90] MRange,fstat64" -> "[0xbfffeeb3]"  [color=green, label=EndofSliceValue, penwidth=5, shape=parallelogram, style=bold];
"[91] MRange,fstat64" -> "[0xbfffeec0]"  [color=green, label=EndofSliceValue, penwidth=5, shape=parallelogram, style=bold];
"[91] MRange,fstat64" -> "[0xbfffeec1]"  [color=green, label=EndofSliceValue, penwidth=5, shape=parallelogram, style=bold];
"[91] MRange,fstat64" -> "[0xbfffeec2]"  [color=green, label=EndofSliceValue, penwidth=5, shape=parallelogram, style=bold];
"[91] MRange,fstat64" -> "[0xbfffeec3]"  [color=green, label=EndofSliceValue, penwidth=5, shape=parallelogram, style=bold];
"[92] MRange,fstat64" -> "[0xbfffeeb8]"  [color=green, label=EndofSliceValue, penwidth=5, shape=parallelogram, style=bold];
"[92] MRange,fstat64" -> "[0xbfffeeb9]"  [color=green, label=EndofSliceValue, penwidth=5, shape=parallelogram, style=bold];
"[92] MRange,fstat64" -> "[0xbfffeeba]"  [color=green, label=EndofSliceValue, penwidth=5, shape=parallelogram, style=bold];
"[92] MRange,fstat64" -> "[0xbfffeebb]"  [color=green, label=EndofSliceValue, penwidth=5, shape=parallelogram, style=bold];
"[327] mov" -> EDI  [color=green, label=EndofSliceValue, penwidth=5, shape=parallelogram, style=bold];
"[352] call-write_recheck" -> EAX  [color=green, label=EndofSliceValue, penwidth=5, shape=parallelogram, style=bold];
}
