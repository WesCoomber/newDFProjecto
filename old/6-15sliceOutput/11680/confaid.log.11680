instrument_addorsub: arith ins is ADD (0xb7fe32f0)
instrument_addorsub: op1 is reg (7) and op2 is immediate
instrument_addorsub: arith ins is SUB (0xb7fe32f6)
instrument_addorsub: op1 is reg (6) and op2 is immediate
LEA: base reg is 7(ebx) index reg invalid, dst 8(edx)
instrument_addorsub: arith ins is SUB (0xb7fe3304)
instrument_addorsub: op1 is register and op2 is mem
instrument_test: op1 and op2 of are registers 10(eax), 10(eax)
17 EFLAGS eflags, 1, 0
instrument_test: op1 is reg and op2 is imm
instrument_addorsub: arith ins is SUB (0xb7fe333f)
instrument_addorsub: op1 and op2 of Arith are registers: 9 (ecx), 10 (eax)
instrument_test: op1 is reg and op2 is imm
instrument_addorsub: arith ins is SUB (0xb7fe334f)
instrument_addorsub: op1 and op2 of Arith are registers: 9 (ecx), 10 (eax)
instrument_addorsub: arith ins is ADD (0xb7fe3358)
instrument_addorsub: op1 is reg (8) and op2 is immediate
instrument_test: op1 and op2 of are registers 10(eax), 10(eax)
17 EFLAGS eflags, 1, 0
instrument_addorsub: arith ins is ADD (0xb7fe332f)
instrument_addorsub: op1 is reg (8) and op2 is immediate
instrument_test: op1 and op2 of are registers 10(eax), 10(eax)
17 EFLAGS eflags, 1, 0
instrument_test: op1 is reg and op2 is imm
instrument_addorsub: arith ins is SUB (0xb7fe333f)
instrument_addorsub: op1 and op2 of Arith are registers: 9 (ecx), 10 (eax)
instrument_test: op1 is reg and op2 is imm
instrument_test: op1 is reg and op2 is imm
instrument_addorsub: arith ins is SUB (0xb7fe350d)
instrument_addorsub: op1 and op2 of Arith are registers: 9 (ecx), 10 (eax)
instrument_test: op1 is reg and op2 is imm
instrument_addorsub: arith ins is SUB (0xb7fe3635)
instrument_addorsub: op1 and op2 of Arith are registers: 9 (ecx), 10 (eax)
instrument_test: op1 is reg and op2 is imm
instrument_addorsub: arith ins is ADD (0xb7fe332f)
instrument_addorsub: op1 is reg (8) and op2 is immediate
instrument_test: op1 and op2 of are registers 10(eax), 10(eax)
17 EFLAGS eflags, 1, 0
instrument_test: op1 is reg and op2 is imm
instrument_addorsub: arith ins is SUB (0xb7fe333f)
instrument_addorsub: op1 and op2 of Arith are registers: 9 (ecx), 10 (eax)
instrument_test: op1 is reg and op2 is imm
instrument_addorsub: arith ins is SUB (0xb7fe334f)
instrument_addorsub: op1 and op2 of Arith are registers: 9 (ecx), 10 (eax)
instrument_addorsub: arith ins is ADD (0xb7fe3358)
instrument_addorsub: op1 is reg (8) and op2 is immediate
instrument_test: op1 and op2 of are registers 10(eax), 10(eax)
17 EFLAGS eflags, 1, 0
instrument_test: op1 and op2 of are registers 4(esi), 4(esi)
17 EFLAGS eflags, 1, 0
instrument_test: op1 and op2 of are registers 10(eax), 10(eax)
17 EFLAGS eflags, 1, 0
instrument_test: op1 and op2 of are registers 4(esi), 4(esi)
17 EFLAGS eflags, 1, 0
instrument_test: op1 and op2 of are registers 10(eax), 10(eax)
17 EFLAGS eflags, 1, 0
instrument_addorsub: arith ins is ADD (0xb7fe3379)
instrument_addorsub: op1 is mem and op2 is register
instrument_test: op1 and op2 of are registers 10(eax), 10(eax)
17 EFLAGS eflags, 1, 0
instrument_addorsub: arith ins is ADD (0xb7fe3389)
instrument_addorsub: op1 is mem and op2 is register
instrument_test: op1 and op2 of are registers 10(eax), 10(eax)
17 EFLAGS eflags, 1, 0
instrument_addorsub: arith ins is ADD (0xb7fe3399)
instrument_addorsub: op1 is mem and op2 is register
instrument_test: op1 and op2 of are registers 10(eax), 10(eax)
17 EFLAGS eflags, 1, 0
instrument_addorsub: arith ins is ADD (0xb7fe33a9)
instrument_addorsub: op1 is mem and op2 is register
instrument_test: op1 and op2 of are registers 10(eax), 10(eax)
17 EFLAGS eflags, 1, 0
instrument_addorsub: arith ins is ADD (0xb7fe33b9)
instrument_addorsub: op1 is mem and op2 is register
instrument_test: op1 and op2 of are registers 10(eax), 10(eax)
17 EFLAGS eflags, 1, 0
instrument_addorsub: arith ins is ADD (0xb7fe33c9)
instrument_addorsub: op1 is mem and op2 is register
instrument_test: op1 and op2 of are registers 10(eax), 10(eax)
17 EFLAGS eflags, 1, 0
instrument_addorsub: arith ins is ADD (0xb7fe33d9)
instrument_addorsub: op1 is mem and op2 is register
instrument_test: op1 and op2 of are registers 10(eax), 10(eax)
17 EFLAGS eflags, 1, 0
instrument_addorsub: arith ins is ADD (0xb7fe33e9)
instrument_addorsub: op1 is mem and op2 is register
instrument_test: op1 and op2 of are registers 10(eax), 10(eax)
17 EFLAGS eflags, 1, 0
instrument_test: op1 is mem and op2 is imm
instrument_test: op1 and op2 of are registers 8(edx), 8(edx)
17 EFLAGS eflags, 1, 0
instrument_test: op1 is mem and op2 is imm
instrument_test: op1 and op2 of are registers 9(ecx), 9(ecx)
17 EFLAGS eflags, 1, 0
instrument_test: op1 is mem and op2 is imm
instrument_test: op1 and op2 of are registers 9(ecx), 9(ecx)
17 EFLAGS eflags, 1, 0
instrument_test: op1 is mem and op2 is imm
instrument_test: op1 and op2 of are registers 9(ecx), 9(ecx)
17 EFLAGS eflags, 1, 0
instrument_test: op1 and op2 of are registers 9(ecx), 9(ecx)
17 EFLAGS eflags, 1, 0
instrument_test: op1 and op2 of are registers 3(edi), 3(edi)
17 EFLAGS eflags, 1, 0
instrument_test: op1 and op2 of are registers 4(esi), 4(esi)
17 EFLAGS eflags, 1, 0
instrument_test: op1 and op2 of are registers 8(edx), 8(edx)
17 EFLAGS eflags, 1, 0
instrument_test: op1 and op2 of are registers 9(ecx), 9(ecx)
17 EFLAGS eflags, 1, 0
instrument_test: op1 and op2 of are registers 4(esi), 9(ecx)
17 EFLAGS eflags, 1, 0
instrument_test: op1 and op2 of are registers 10(eax), 10(eax)
17 EFLAGS eflags, 1, 0
instrument_test: op1 is mem and op2 is register
instrument_taint_regmem2flag: flags 63, reg 4 size 4, memsize 4
instrument_addorsub: arith ins is ADD (0xb7fe357e)
instrument_addorsub: op1 is mem and op2 is register
instrument_test: op1 and op2 of are registers 8(edx), 3(edi)
17 EFLAGS eflags, 1, 0
instrument_addorsub: arith ins is ADD (0xb7fe3597)
instrument_addorsub: op1 is register and op2 is mem
instrument_test: op1 is mem and op2 is imm
instrument_addorsub: arith ins is ADD (0xb7fe35b6)
instrument_addorsub: op1 is reg (8) and op2 is immediate
instrument_addorsub: arith ins is ADD (0xb7fe35b9)
instrument_addorsub: op1 is mem and op2 is register
instrument_test: op1 and op2 of are registers 3(edi), 8(edx)
17 EFLAGS eflags, 1, 0
instrument_test: op1 and op2 of are registers 10(eax), 10(eax)
17 EFLAGS eflags, 1, 0
instrument_test: op1 is mem and op2 is register
instrument_taint_regmem2flag: flags 63, reg 3 size 4, memsize 4
LEA: base reg is 7(ebx) index reg invalid, dst 10(eax)
instrument_addorsub: arith ins is ADD (0xb7fe35aa)
instrument_addorsub: op1 and op2 of Arith are registers: 10 (eax), 9 (ecx)
instrument_test: op1 is mem and op2 is imm
instrument_addorsub: arith ins is ADD (0xb7fe35b6)
instrument_addorsub: op1 is reg (8) and op2 is immediate
instrument_addorsub: arith ins is ADD (0xb7fe35b9)
instrument_addorsub: op1 is mem and op2 is register
instrument_test: op1 and op2 of are registers 3(edi), 8(edx)
17 EFLAGS eflags, 1, 0
instrument_test: op1 and op2 of are registers 10(eax), 10(eax)
17 EFLAGS eflags, 1, 0
instrument_test: op1 is mem and op2 is register
instrument_taint_regmem2flag: flags 63, reg 3 size 4, memsize 4
LEA: base reg is 7(ebx) index reg invalid, dst 10(eax)
instrument_addorsub: arith ins is ADD (0xb7fe35ee)
instrument_addorsub: op1 is register and op2 is mem
[movx] 0xb7fe35f5 movzx ecx, cl
instrument movx address 0xb7fe35f5 is src reg: 22 into dst reg: 9
instrument_addorsub: arith ins is ADD (0xb7fe35fe)
instrument_addorsub: op1 is register and op2 is mem
instrument_addorsub: arith ins is ADD (0xb7fe3607)
instrument_addorsub: op1 is register and op2 is mem
[movx] 0xb7fe360a movzx edx, byte ptr [esi+0xc]
instrument_addorsub: arith ins is AND (0xb7fe360e)
instrument_addorsub: op1 is reg (8) and op2 is immediate
instrument_test: op1 is reg and op2 is imm
instrument_addorsub: arith ins is SUB (0xb7fe361a)
instrument_addorsub: op1 is reg (9) and op2 is immediate
instrument_test: op1 is reg and op2 is imm
instrument_addorsub: arith ins is ADD (0xb7fe3660)
instrument_addorsub: op1 is reg (3) and op2 is immediate
instrument_test: op1 is mem and op2 is register
instrument_taint_regmem2flag: flags 63, reg 3 size 4, memsize 4
instrument_addorsub: arith ins is ADD (0xb7fe35ee)
instrument_addorsub: op1 is register and op2 is mem
[movx] 0xb7fe35f5 movzx ecx, cl
instrument movx address 0xb7fe35f5 is src reg: 22 into dst reg: 9
instrument_addorsub: arith ins is ADD (0xb7fe35fe)
instrument_addorsub: op1 is register and op2 is mem
instrument_addorsub: arith ins is ADD (0xb7fe3607)
instrument_addorsub: op1 is register and op2 is mem
[movx] 0xb7fe360a movzx edx, byte ptr [esi+0xc]
instrument_addorsub: arith ins is AND (0xb7fe360e)
instrument_addorsub: op1 is reg (8) and op2 is immediate
instrument_test: op1 is reg and op2 is imm
instrument_addorsub: arith ins is SUB (0xb7fe361a)
instrument_addorsub: op1 is reg (9) and op2 is immediate
instrument_test: op1 is reg and op2 is imm
LEA: base reg is 7(ebx) index reg invalid, dst 10(eax)
instrument_addorsub: arith ins is OR (0xb7fe3483)
instrument_addorsub: op1 is mem and op2 is immediate
instrument_test: op1 and op2 of are registers 8(edx), 8(edx)
17 EFLAGS eflags, 1, 0
instrument_addorsub: arith ins is SUB (0xb7fe948e)
instrument_addorsub: op1 is reg (6) and op2 is immediate
instrument_addorsub: arith ins is ADD (0xb7fe9499)
instrument_addorsub: op1 is reg (7) and op2 is immediate
LEA: base reg is 9(ecx) index reg invalid, dst 5(ebp)
instrument_test: op1 and op2 of are registers 5(ebp), 9(ecx)
17 EFLAGS eflags, 1, 0
LEA: base reg is 8(edx) index reg invalid, dst 5(ebp)
instrument_addorsub: arith ins is SUB (0xb7fe94dc)
instrument_addorsub: op1 and op2 of Arith are registers: 8 (edx), 4 (esi)
instrument_addorsub: arith ins is ADD (0xb7fe94e4)
instrument_addorsub: op1 is reg (6) and op2 is immediate
LEA: base reg is 7(ebx) index reg invalid, dst 10(eax)
LEA: base reg is 7(ebx) index reg invalid, dst 10(eax)
LEA: base reg is 7(ebx) index reg invalid, dst 10(eax)
LEA: base reg is 7(ebx) index reg invalid, dst 10(eax)
LEA: base reg is 7(ebx) index reg invalid, dst 10(eax)
instrument_addorsub: arith ins is SUB (0xb7ff2a54)
instrument_addorsub: op1 is reg (6) and op2 is immediate
instrument_addorsub: arith ins is ADD (0xb7ff2a60)
instrument_addorsub: op1 is reg (7) and op2 is immediate
instrument_addorsub: arith ins is ADD (0xb7ff2a6e)
instrument_addorsub: op1 is reg (10) and op2 is immediate
instrument_test: op1 and op2 of are registers 4(esi), 4(esi)
17 EFLAGS eflags, 1, 0
LEA: base reg is 4(esi) index reg invalid, dst 4(esi)
instrument_addorsub: arith ins is ADD (0xb7ff2a90)
instrument_addorsub: op1 is reg (8) and op2 is immediate
instrument_test: op1 and op2 of are registers 9(ecx), 9(ecx)
17 EFLAGS eflags, 1, 0
LEA: base reg is 8(edx) index reg invalid, dst 10(eax)
LEA: base reg is 7(ebx) index reg invalid, dst 9(ecx)
instrument_test: op1 and op2 of are registers 8(edx), 8(edx)
17 EFLAGS eflags, 1, 0
instrument_addorsub: arith ins is ADD (0xb7ff2a90)
instrument_addorsub: op1 is reg (8) and op2 is immediate
instrument_test: op1 and op2 of are registers 9(ecx), 9(ecx)
17 EFLAGS eflags, 1, 0
LEA: base reg is 8(edx) index reg invalid, dst 10(eax)
LEA: base reg is 7(ebx) index reg invalid, dst 9(ecx)
instrument_test: op1 and op2 of are registers 8(edx), 8(edx)
17 EFLAGS eflags, 1, 0
instrument_addorsub: arith ins is XOR (0xb7ff2ac7)
instrument_addorsub: op1 and op2 of Arith are registers: 5 (ebp), 5 (ebp)
handling reg reset
[movx] 0xb7ff2b07 movzx edi, word ptr [ebx-0x2a0]
instrument_addorsub: arith ins is XOR (0xb7ff2b1d)
instrument_addorsub: op1 and op2 of Arith are registers: 3 (edi), 3 (edi)
handling reg reset
instrument_addorsub: arith ins is XOR (0xb7ff2b23)
instrument_addorsub: op1 and op2 of Arith are registers: 4 (esi), 4 (esi)
handling reg reset
LEA: base reg is 4(esi) index reg invalid, dst 4(esi)
instrument_addorsub: arith ins is SUB (0xb7ff2b28)
instrument_addorsub: op1 is reg (8) and op2 is immediate
instrument_test: op1 is reg and op2 is imm
instrument_addorsub: arith ins is ADD (0xb7ff2b37)
instrument_addorsub: op1 and op2 of Arith are registers: 8 (edx), 7 (ebx)
instrument_addorsub: arith ins is ADD (0xb7ff2b48)
instrument_addorsub: op1 is reg (10) and op2 is immediate
instrument_test: op1 and op2 of are registers 8(edx), 8(edx)
17 EFLAGS eflags, 1, 0
instrument_test: op1 and op2 of are registers 9(ecx), 9(ecx)
17 EFLAGS eflags, 1, 0
[movx] 0xb7ff2ba1 movzx eax, word ptr [esp+0x22]
instrument_test: op1 and op2 of are registers 5(ebp), 5(ebp)
17 EFLAGS eflags, 1, 0
instrument_addorsub: arith ins is SUB (0xb7ff2b28)
instrument_addorsub: op1 is reg (8) and op2 is immediate
instrument_test: op1 is reg and op2 is imm
instrument_addorsub: arith ins is ADD (0xb7ff2b37)
instrument_addorsub: op1 and op2 of Arith are registers: 8 (edx), 7 (ebx)
0xb7ff2b47: not instrument noop nop 
instrument_addorsub: arith ins is ADD (0xb7ff2b48)
instrument_addorsub: op1 is reg (10) and op2 is immediate
instrument_test: op1 and op2 of are registers 8(edx), 8(edx)
17 EFLAGS eflags, 1, 0
instrument_test: op1 and op2 of are registers 9(ecx), 9(ecx)
17 EFLAGS eflags, 1, 0
[movx] 0xb7ff2ba1 movzx eax, word ptr [esp+0x22]
instrument_test: op1 and op2 of are registers 5(ebp), 5(ebp)
17 EFLAGS eflags, 1, 0
instrument_addorsub: arith ins is XOR (0xb7ff2c8b)
instrument_addorsub: op1 and op2 of Arith are registers: 9 (ecx), 9 (ecx)
handling reg reset
instrument_addorsub: arith ins is ADD (0xb7ff2b48)
instrument_addorsub: op1 is reg (10) and op2 is immediate
instrument_test: op1 and op2 of are registers 8(edx), 8(edx)
17 EFLAGS eflags, 1, 0
instrument_test: op1 and op2 of are registers 9(ecx), 9(ecx)
17 EFLAGS eflags, 1, 0
[movx] 0xb7ff2ba1 movzx eax, word ptr [esp+0x22]
instrument_test: op1 and op2 of are registers 5(ebp), 5(ebp)
17 EFLAGS eflags, 1, 0
instrument_addorsub: arith ins is ADD (0xb7ff412a)
instrument_addorsub: op1 is reg (7) and op2 is immediate
op1 and op2 of xchg are registers
0xb7ff4137: not instrument an interrupt
op1 and op2 of xchg are registers
instrument_addorsub: arith ins is XOR (0xb7ff4143)
instrument_addorsub: op1 and op2 of Arith are registers: 10 (eax), 10 (eax)
handling reg reset
instrument_test: op1 and op2 of are registers 8(edx), 9(ecx)
17 EFLAGS eflags, 1, 0
instrument_test: op1 and op2 of are registers 10(eax), 10(eax)
17 EFLAGS eflags, 1, 0
instrument_test: op1 is mem and op2 is imm
instrument_addorsub: arith ins is AND (0xb7ff62a9)
instrument_addorsub: op1 and op2 of Arith are registers: 8 (edx), 10 (eax)
instrument_test: op1 is mem and op2 is register
instrument_taint_regmem2flag: flags 63, reg 26 size 1, memsize 1
instrument_test: op1 is mem and op2 is register
instrument_taint_regmem2flag: flags 63, reg 26 size 1, memsize 1
instrument_addorsub: arith ins is XOR (0xb7ff62cf)
instrument_addorsub: op1 and op2 of Arith are registers: 8 (edx), 8 (edx)
handling reg reset
instrument_addorsub: arith ins is ADD (0xb7ff62d3)
instrument_addorsub: op1 is reg (10) and op2 is immediate
instrument_addorsub: arith ins is SUB (0xb7ff62d6)
instrument_addorsub: op1 and op2 of Arith are registers: 8 (edx), 9 (ecx)
instrument_addorsub: arith ins is ADD (0xb7ff62d8)
instrument_addorsub: op1 is reg (9) and op2 is immediate
instrument_addorsub: arith ins is XOR (0xb7ff62e1)
instrument_addorsub: op1 and op2 of Arith are registers: 8 (edx), 9 (ecx)
instrument_addorsub: arith ins is AND (0xb7ff62e3)
instrument_addorsub: op1 is reg (8) and op2 is immediate
instrument_addorsub: arith ins is SUB (0xb7ff6339)
instrument_addorsub: op1 is reg (10) and op2 is immediate
instrument_addorsub: arith ins is SUB (0xb7ff633c)
instrument_addorsub: op1 is reg (9) and op2 is immediate
instrument_test: op1 is reg and op2 is imm
instrument_test: op1 and op2 of are registers 23(ch), 23(ch)
17 EFLAGS eflags, 1, 0
instrument_test: op1 is reg and op2 is imm
instrument_addorsub: arith ins is SUB (0xb7ff6356)
instrument_addorsub: op1 is register and op2 is mem
instrument_addorsub: arith ins is ADD (0xb7ff4178)
instrument_addorsub: op1 is reg (7) and op2 is immediate
instrument_addorsub: arith ins is SUB (0xb7ff417e)
instrument_addorsub: op1 is reg (6) and op2 is immediate
instrument_test: op1 and op2 of are registers 4(esi), 4(esi)
17 EFLAGS eflags, 1, 0
instrument_test: op1 and op2 of are registers 10(eax), 10(eax)
17 EFLAGS eflags, 1, 0
instrument_test: op1 is reg and op2 is imm
instrument_addorsub: arith ins is ADD (0xb7ff41b0)
instrument_addorsub: op1 is reg (6) and op2 is immediate
LEA: base reg is 7(ebx) index reg invalid, dst 8(edx)
instrument_test: op1 and op2 of are registers 10(eax), 8(edx)
17 EFLAGS eflags, 1, 0
instrument_test: op1 and op2 of are registers 10(eax), 10(eax)
17 EFLAGS eflags, 1, 0
LEA: base reg is 6(esp) index reg invalid, dst 10(eax)
instrument_addorsub: arith ins is ADD (0xb7fe022b)
instrument_addorsub: op1 is reg (7) and op2 is immediate
instrument_addorsub: arith ins is SUB (0xb7fe0231)
instrument_addorsub: op1 is reg (6) and op2 is immediate
LEA: base reg is 7(ebx) index reg invalid, dst 10(eax)
LEA: base reg is 7(ebx) index reg invalid, dst 10(eax)
LEA: base reg is 7(ebx) index reg invalid, dst 10(eax)
LEA: base reg is 7(ebx) index reg invalid, dst 10(eax)
LEA: base reg is 7(ebx) index reg invalid, dst 10(eax)
instrument_test: op1 is mem and op2 is imm
instrument_addorsub: arith ins is SBB (0xb7fe0291)
instrument_addorsub: op1 and op2 of Arith are registers: 10 (eax), 10 (eax)
instrument_addorsub: arith ins is AND (0xb7fe0295)
instrument_addorsub: op1 is reg (10) and op2 is immediate
LEA: base reg is 5(ebp) index reg invalid, dst 10(eax)
LEA: base reg is 7(ebx) index reg invalid, dst 10(eax)
instrument_test: op1 and op2 of are registers 8(edx), 8(edx)
17 EFLAGS eflags, 1, 0
instrument_test: op1 is mem and op2 is imm
instrument_addorsub: arith ins is ADD (0xb7ff38bd)
instrument_addorsub: op1 is reg (9) and op2 is immediate
instrument_test: op1 and op2 of are registers 8(edx), 8(edx)
17 EFLAGS eflags, 1, 0
instrument_test: op1 is mem and op2 is imm
instrument_test: op1 is mem and op2 is imm
instrument_addorsub: arith ins is ADD (0xb7ff38d7)
instrument_addorsub: op1 is reg (9) and op2 is immediate
instrument_addorsub: arith ins is ADD (0xb7ff38da)
instrument_addorsub: op1 is reg (8) and op2 is immediate
instrument_addorsub: arith ins is ADD (0xb7ff38bd)
instrument_addorsub: op1 is reg (9) and op2 is immediate
instrument_test: op1 and op2 of are registers 8(edx), 8(edx)
17 EFLAGS eflags, 1, 0
instrument_addorsub: arith ins is XOR (0xb7ff38c6)
instrument_addorsub: op1 and op2 of Arith are registers: 8 (edx), 8 (edx)
handling reg reset
instrument_test: op1 is mem and op2 is imm
instrument_addorsub: arith ins is ADD (0xb7ff38bd)
instrument_addorsub: op1 is reg (9) and op2 is immediate
instrument_test: op1 and op2 of are registers 8(edx), 8(edx)
17 EFLAGS eflags, 1, 0
instrument_addorsub: arith ins is XOR (0xb7ff38c6)
instrument_addorsub: op1 and op2 of Arith are registers: 8 (edx), 8 (edx)
handling reg reset
instrument_test: op1 and op2 of are registers 10(eax), 10(eax)
17 EFLAGS eflags, 1, 0
[movx] 0xb7fe02c2 movzx eax, byte ptr [eax]
instrument_test: op1 and op2 of are registers 19(al), 19(al)
17 EFLAGS eflags, 1, 0
instrument_test: op1 is reg and op2 is imm
instrument_addorsub: arith ins is XOR (0xb7fe02cd)
instrument_addorsub: op1 and op2 of Arith are registers: 8 (edx), 8 (edx)
handling reg reset
0xb7fe02cf: not instrument noop nop 
instrument_addorsub: arith ins is ADD (0xb7fe02dc)
instrument_addorsub: op1 is reg (8) and op2 is immediate
[movx] 0xb7fe02df movzx ecx, byte ptr [esi+edx*1]
instrument_test: op1 is reg and op2 is imm
instrument_test: op1 is reg and op2 is imm
instrument_addorsub: arith ins is SUB (0xb7fe02ed)
instrument_addorsub: op1 is reg (8) and op2 is immediate
instrument_test: op1 is reg and op2 is imm
instrument_test: op1 and op2 of are registers 22(cl), 22(cl)
17 EFLAGS eflags, 1, 0
instrument_addorsub: arith ins is ADD (0xb7fe02dc)
instrument_addorsub: op1 is reg (8) and op2 is immediate
[movx] 0xb7fe02df movzx ecx, byte ptr [esi+edx*1]
instrument_test: op1 is reg and op2 is imm
instrument_test: op1 is reg and op2 is imm
instrument_addorsub: arith ins is SUB (0xb7fe02ed)
instrument_addorsub: op1 is reg (8) and op2 is immediate
instrument_test: op1 is reg and op2 is imm
instrument_addorsub: arith ins is ADD (0xb7fe02fc)
instrument_addorsub: op1 and op2 of Arith are registers: 10 (eax), 7 (ebx)
LEA: base reg is 7(ebx) index reg invalid, dst 10(eax)
instrument_test: op1 is reg and op2 is imm
[movx] 0xb7ff65c2 movzx ecx, byte ptr [eax]
instrument_test: op1 is mem and op2 is register
instrument_taint_regmem2flag: flags 63, reg 22 size 1, memsize 1
instrument_addorsub: arith ins is XOR (0xb7ff65c9)
instrument_addorsub: op1 and op2 of Arith are registers: 10 (eax), 10 (eax)
handling reg reset
instrument_test: op1 is reg and op2 is imm
instrument_addorsub: arith ins is ADD (0xb7ff65e7)
instrument_addorsub: op1 is reg (7) and op2 is immediate
instrument_addorsub: arith ins is ADD (0xb7ff65ed)
instrument_addorsub: op1 is register and op2 is mem
instrument_addorsub: arith ins is ADD (0xb7ff65f0)
instrument_addorsub: op1 and op2 of Arith are registers: 8 (edx), 9 (ecx)
instrument_addorsub: arith ins is ADD (0xb7ff65f2)
instrument_addorsub: op1 and op2 of Arith are registers: 4 (esi), 9 (ecx)
instrument_test: op1 and op2 of are registers 10(eax), 9(ecx)
17 EFLAGS eflags, 1, 0
instrument_test: op1 and op2 of are registers 10(eax), 9(ecx)
17 EFLAGS eflags, 1, 0
instrument_test: op1 and op2 of are registers 10(eax), 9(ecx)
17 EFLAGS eflags, 1, 0
instrument_addorsub: arith ins is XOR (0xb7ff6663)
instrument_addorsub: op1 and op2 of Arith are registers: 10 (eax), 10 (eax)
handling reg reset
instrument_test: op1 and op2 of are registers 10(eax), 10(eax)
17 EFLAGS eflags, 1, 0
instrument_addorsub: arith ins is ADD (0xb7fe15ca)
instrument_addorsub: op1 is reg (4) and op2 is immediate
instrument_addorsub: arith ins is XOR (0xb7ff38c6)
instrument_addorsub: op1 and op2 of Arith are registers: 8 (edx), 8 (edx)
handling reg reset
instrument_test: op1 and op2 of are registers 10(eax), 10(eax)
17 EFLAGS eflags, 1, 0
instrument_test: op1 and op2 of are registers 10(eax), 10(eax)
17 EFLAGS eflags, 1, 0
instrument_test: op1 and op2 of are registers 10(eax), 10(eax)
17 EFLAGS eflags, 1, 0
LEA: base reg is 7(ebx) index reg invalid, dst 10(eax)
instrument_test: op1 is mem and op2 is register
instrument_taint_regmem2flag: flags 63, reg 10 size 4, memsize 4
LEA: base reg is 7(ebx) index reg invalid, dst 10(eax)
LEA: base reg is 7(ebx) index reg invalid, dst 10(eax)
LEA: base reg is 7(ebx) index reg invalid, dst 10(eax)
LEA: base reg is 7(ebx) index reg invalid, dst 10(eax)
instrument_test: op1 is reg and op2 is imm
instrument_cmps: size 1
LEA: base reg is 7(ebx) index reg invalid, dst 8(edx)
instrument_addorsub: arith ins is XOR (0xb7fe05bc)
instrument_addorsub: op1 and op2 of Arith are registers: 9 (ecx), 9 (ecx)
handling reg reset
instrument_addorsub: arith ins is ADD (0xb7fe95e9)
instrument_addorsub: op1 is reg (7) and op2 is immediate
instrument_addorsub: arith ins is SUB (0xb7fe95ef)
instrument_addorsub: op1 is reg (6) and op2 is immediate
instrument_addorsub: arith ins is SUB (0xb7ff6356)
instrument_addorsub: op1 is register and op2 is mem
instrument_test: op1 and op2 of are registers 5(ebp), 5(ebp)
17 EFLAGS eflags, 1, 0
LEA: base reg is 10(eax) index reg invalid, dst 9(ecx)
LEA: index reg is 5(ebp) base reg invalid, dst 9(ecx)
instrument_addorsub: arith ins is AND (0xb7fe9814)
instrument_addorsub: op1 is reg (4) and op2 is immediate
instrument_test: op1 is reg and op2 is imm
instrument_addorsub: arith ins is SBB (0xb7fe981d)
instrument_addorsub: op1 and op2 of Arith are registers: 9 (ecx), 9 (ecx)
instrument_addorsub: arith ins is AND (0xb7fe9821)
instrument_addorsub: op1 is reg (9) and op2 is immediate
instrument_test: op1 and op2 of are registers 4(esi), 4(esi)
17 EFLAGS eflags, 1, 0
instrument_addorsub: arith ins is SUB (0xb7ff3ab3)
instrument_addorsub: op1 is reg (6) and op2 is immediate
instrument_addorsub: arith ins is ADD (0xb7ff3ac3)
instrument_addorsub: op1 is reg (7) and op2 is immediate
instrument_addorsub: arith ins is OR (0xb7ff3acd)
instrument_addorsub: op1 and op2 of Arith are registers: 10 (eax), 9 (ecx)
imul instruction: imul edi, ecx
num operands is 3
instrument_test: op1 is reg and op2 is imm
instrument_addorsub: arith ins is SUB (0xb7ff3a81)
instrument_addorsub: op1 is reg (6) and op2 is immediate
instrument_addorsub: arith ins is ADD (0xb7ff3a89)
instrument_addorsub: op1 is reg (7) and op2 is immediate
instrument_addorsub: arith ins is ADD (0xb7ff3978)
instrument_addorsub: op1 is reg (7) and op2 is immediate
instrument_addorsub: arith ins is SUB (0xb7ff397e)
instrument_addorsub: op1 is reg (6) and op2 is immediate
instrument_test: op1 and op2 of are registers 10(eax), 10(eax)
17 EFLAGS eflags, 1, 0
instrument_addorsub: arith ins is AND (0xb7ff39a5)
instrument_addorsub: op1 and op2 of Arith are registers: 10 (eax), 8 (edx)
instrument_test: op1 and op2 of are registers 8(edx), 9(ecx)
17 EFLAGS eflags, 1, 0
instrument_test: op1 and op2 of are registers 4(esi), 9(ecx)
17 EFLAGS eflags, 1, 0
LEA: base reg is 7(ebx) index reg invalid, dst 3(edi)
instrument_addorsub: arith ins is AND (0xb7ff3a52)
instrument_addorsub: op1 and op2 of Arith are registers: 9 (ecx), 10 (eax)
instrument_addorsub: arith ins is AND (0xb7ff39a5)
instrument_addorsub: op1 and op2 of Arith are registers: 10 (eax), 8 (edx)
instrument_test: op1 and op2 of are registers 8(edx), 9(ecx)
17 EFLAGS eflags, 1, 0
instrument_test: op1 and op2 of are registers 4(esi), 9(ecx)
17 EFLAGS eflags, 1, 0
instrument_addorsub: arith ins is AND (0xb7ff39cc)
instrument_addorsub: op1 and op2 of Arith are registers: 3 (edi), 10 (eax)
instrument_addorsub: arith ins is ADD (0xb7ff3a2e)
instrument_addorsub: op1 is reg (6) and op2 is immediate
instrument_addorsub: arith ins is ADD (0xb7ff3aa3)
instrument_addorsub: op1 is reg (6) and op2 is immediate
instrument_addorsub: arith ins is ADD (0xb7ff3ae1)
instrument_addorsub: op1 is reg (6) and op2 is immediate
instrument_test: op1 and op2 of are registers 10(eax), 10(eax)
17 EFLAGS eflags, 1, 0
LEA: base reg is 9(ecx) index reg invalid, dst 10(eax)
LEA: base reg is 9(ecx) index reg invalid, dst 10(eax)
instrument_addorsub: arith ins is XOR (0xb7ff6a0e)
instrument_addorsub: op1 and op2 of Arith are registers: 9 (ecx), 4 (esi)
instrument_addorsub: arith ins is AND (0xb7ff6a10)
instrument_addorsub: op1 is reg (9) and op2 is immediate
instrument_test: op1 is reg and op2 is imm
instrument_test: op1 is reg and op2 is imm
[movx] 0xb7fe9696 movzx ecx, byte ptr [esp+0x18]
[movx] 0xb7fe969e movzx eax, byte ptr [esi+0x194]
instrument_addorsub: arith ins is AND (0xb7fe96a5)
instrument_addorsub: op1 is reg (9) and op2 is immediate
instrument_addorsub: arith ins is AND (0xb7fe96a8)
instrument_addorsub: op1 is reg (10) and op2 is immediate
instrument_addorsub: arith ins is OR (0xb7fe96ab)
instrument_addorsub: op1 and op2 of Arith are registers: 10 (eax), 9 (ecx)
instrument_test: op1 is mem and op2 is imm
instrument_addorsub: arith ins is XOR (0xb7fe96cd)
instrument_addorsub: op1 and op2 of Arith are registers: 10 (eax), 10 (eax)
handling reg reset
instrument_test: op1 and op2 of are registers 5(ebp), 5(ebp)
17 EFLAGS eflags, 1, 0
0xb7fe96d3: not instrument noop nop 
LEA: base reg is 4(esi) index reg invalid, dst 4(esi)
instrument_addorsub: arith ins is ADD (0xb7fe96df)
instrument_addorsub: op1 is reg (10) and op2 is immediate
instrument_test: op1 and op2 of are registers 10(eax), 5(ebp)
17 EFLAGS eflags, 1, 0
instrument_addorsub: arith ins is XOR (0xb7fe96cd)
instrument_addorsub: op1 and op2 of Arith are registers: 10 (eax), 10 (eax)
handling reg reset
instrument_test: op1 and op2 of are registers 5(ebp), 5(ebp)
17 EFLAGS eflags, 1, 0
0xb7fe96d3: not instrument noop nop 
LEA: base reg is 4(esi) index reg invalid, dst 4(esi)
instrument_addorsub: arith ins is ADD (0xb7fe96df)
instrument_addorsub: op1 is reg (10) and op2 is immediate
instrument_test: op1 and op2 of are registers 10(eax), 5(ebp)
17 EFLAGS eflags, 1, 0
LEA: base reg is 4(esi) index reg invalid, dst 10(eax)
instrument_addorsub: arith ins is XOR (0xb7fe96ec)
instrument_addorsub: op1 and op2 of Arith are registers: 8 (edx), 8 (edx)
handling reg reset
imul instruction: imul eax, dword ptr [esp+0x48], 0x4c
num operands is 4
instrument_test: op1 and op2 of are registers 10(eax), 10(eax)
17 EFLAGS eflags, 1, 0
instrument_addorsub: arith ins is ADD (0xb7fe96df)
instrument_addorsub: op1 is reg (10) and op2 is immediate
instrument_test: op1 and op2 of are registers 10(eax), 5(ebp)
17 EFLAGS eflags, 1, 0
LEA: base reg is 4(esi) index reg invalid, dst 10(eax)
instrument_addorsub: arith ins is XOR (0xb7fe96ec)
instrument_addorsub: op1 and op2 of Arith are registers: 8 (edx), 8 (edx)
handling reg reset
imul instruction: imul eax, dword ptr [esp+0x48], 0x4c
num operands is 4
instrument_test: op1 and op2 of are registers 10(eax), 10(eax)
17 EFLAGS eflags, 1, 0
instrument_addorsub: arith ins is ADD (0xb7fe970e)
instrument_addorsub: op1 is reg (10) and op2 is immediate
instrument_test: op1 and op2 of are registers 3(edi), 3(edi)
17 EFLAGS eflags, 1, 0
instrument_test: op1 and op2 of are registers 3(edi), 3(edi)
17 EFLAGS eflags, 1, 0
instrument_addorsub: arith ins is ADD (0xb7fe9871)
instrument_addorsub: op1 is reg (3) and op2 is immediate
instrument_test: op1 and op2 of are registers 8(edx), 8(edx)
17 EFLAGS eflags, 1, 0
instrument_addorsub: arith ins is XOR (0xb7fe9742)
instrument_addorsub: op1 and op2 of Arith are registers: 10 (eax), 10 (eax)
handling reg reset
LEA: base reg is 4(esi) index reg invalid, dst 10(eax)
[movx] 0xb7fe975b movzx edi, byte ptr [eax]
instrument_test: op1 and op2 of are registers 22(cl), 22(cl)
17 EFLAGS eflags, 1, 0
instrument_addorsub: arith ins is ADD (0xb7fe97ff)
instrument_addorsub: op1 is reg (6) and op2 is immediate
instrument_addorsub: arith ins is SUB (0xb7fe05dc)
instrument_addorsub: op1 is reg (6) and op2 is immediate
instrument_test: op1 and op2 of are registers 10(eax), 10(eax)
17 EFLAGS eflags, 1, 0
instrument_addorsub: arith ins is XOR (0xb7fe05ed)
instrument_addorsub: op1 and op2 of Arith are registers: 8 (edx), 8 (edx)
handling reg reset
[movx] 0xb7fe05fb movzx ecx, word ptr [ebp+0xc]
instrument_addorsub: arith ins is ADD (0xb7fe954b)
instrument_addorsub: op1 is reg (7) and op2 is immediate
instrument_addorsub: arith ins is SUB (0xb7fe9551)
instrument_addorsub: op1 is reg (6) and op2 is immediate
LEA: base reg is 7(ebx) index reg invalid, dst 5(ebp)
instrument_addorsub: arith ins is ADD (0xb7fdfcc4)
instrument_addorsub: op1 is mem and op2 is immediate
imul instruction: imul edx, edi, 0x4c
num operands is 4
instrument_test: op1 and op2 of are registers 4(esi), 4(esi)
17 EFLAGS eflags, 1, 0
imul instruction: imul edx, edi, 0x4c
num operands is 4
instrument_addorsub: arith ins is ADD (0xb7fe959e)
instrument_addorsub: op1 is mem and op2 is immediate
instrument_addorsub: arith ins is ADD (0xb7fe95ac)
instrument_addorsub: op1 is reg (4) and op2 is immediate
instrument_addorsub: arith ins is ADC (0xb7fe95b5)
instrument_addorsub: op1 is reg (3) and op2 is immediate
instrument_addorsub: arith ins is SUB (0xb7fdfcd4)
instrument_addorsub: op1 is mem and op2 is immediate
instrument_addorsub: arith ins is ADD (0xb7fe95cd)
instrument_addorsub: op1 is reg (6) and op2 is immediate
instrument_test: op1 is mem and op2 is register
instrument_taint_regmem2flag: flags 63, reg 3 size 4, memsize 4
instrument_addorsub: arith ins is ADD (0xb7fe062b)
instrument_addorsub: op1 is mem and op2 is immediate
instrument_addorsub: arith ins is ADD (0xb7fe0635)
instrument_addorsub: op1 is register and op2 is mem
instrument_test: op1 is mem and op2 is register
instrument_taint_regmem2flag: flags 63, reg 9 size 4, memsize 4
LEA: base reg is 7(ebx) index reg invalid, dst 3(edi)
LEA: base reg is 7(ebx) index reg invalid, dst 3(edi)
instrument_test: op1 is reg and op2 is imm
instrument_test: op1 is reg and op2 is imm
instrument_addorsub: arith ins is SUB (0xb7fe11da)
instrument_addorsub: op1 is register and op2 is mem
instrument_addorsub: arith ins is ADD (0xb7fe06a1)
instrument_addorsub: op1 is reg (10) and op2 is immediate
instrument_test: op1 and op2 of are registers 10(eax), 9(ecx)
17 EFLAGS eflags, 1, 0
instrument_test: op1 is reg and op2 is imm
instrument_test: op1 is reg and op2 is imm
instrument_test: op1 is reg and op2 is imm
instrument_test: op1 is reg and op2 is imm
instrument_addorsub: arith ins is ADD (0xb7fe1265)
instrument_addorsub: op1 is register and op2 is mem
instrument_test: op1 and op2 of are registers 3(edi), 3(edi)
17 EFLAGS eflags, 1, 0
instrument_addorsub: arith ins is XOR (0xb7fe1285)
instrument_addorsub: op1 and op2 of Arith are registers: 3 (edi), 3 (edi)
handling reg reset
instrument_addorsub: arith ins is AND (0xb7fe120f)
instrument_addorsub: op1 and op2 of Arith are registers: 3 (edi), 4 (esi)
instrument_addorsub: arith ins is ADD (0xb7fe1219)
instrument_addorsub: op1 is register and op2 is mem
instrument_test: op1 is mem and op2 is register
instrument_taint_regmem2flag: flags 63, reg 3 size 4, memsize 4
instrument_addorsub: arith ins is ADD (0xb7fe122a)
instrument_addorsub: op1 is register and op2 is mem
instrument_addorsub: arith ins is ADD (0xb7fe122d)
instrument_addorsub: op1 is register and op2 is mem
instrument_test: op1 is mem and op2 is register
instrument_taint_regmem2flag: flags 63, reg 4 size 4, memsize 4
instrument_test: op1 is mem and op2 is imm
instrument_test: op1 is mem and op2 is register
instrument_taint_regmem2flag: flags 63, reg 4 size 4, memsize 4
instrument_addorsub: arith ins is ADD (0xb7fe122a)
instrument_addorsub: op1 is register and op2 is mem
instrument_addorsub: arith ins is ADD (0xb7fe122d)
instrument_addorsub: op1 is register and op2 is mem
instrument_test: op1 is mem and op2 is register
instrument_taint_regmem2flag: flags 63, reg 4 size 4, memsize 4
instrument_test: op1 is mem and op2 is imm
instrument_test: op1 is mem and op2 is register
instrument_taint_regmem2flag: flags 63, reg 4 size 4, memsize 4
instrument_addorsub: arith ins is ADD (0xb7fe12c1)
instrument_addorsub: op1 is register and op2 is mem
instrument_test: op1 is reg and op2 is imm
instrument_test: op1 is reg and op2 is imm
instrument_test: op1 is reg and op2 is imm
instrument_test: op1 and op2 of are registers 9(ecx), 9(ecx)
17 EFLAGS eflags, 1, 0
instrument_addorsub: arith ins is ADD (0xb7fe0748)
instrument_addorsub: op1 is register and op2 is mem
instrument_test: op1 and op2 of are registers 8(edx), 8(edx)
17 EFLAGS eflags, 1, 0
instrument_test: op1 and op2 of are registers 10(eax), 10(eax)
17 EFLAGS eflags, 1, 0
instrument_test: op1 and op2 of are registers 8(edx), 8(edx)
17 EFLAGS eflags, 1, 0
instrument_test: op1 and op2 of are registers 10(eax), 10(eax)
17 EFLAGS eflags, 1, 0
instrument_test: op1 and op2 of are registers 10(eax), 10(eax)
17 EFLAGS eflags, 1, 0
instrument_test: op1 and op2 of are registers 10(eax), 10(eax)
17 EFLAGS eflags, 1, 0
instrument_test: op1 and op2 of are registers 10(eax), 10(eax)
17 EFLAGS eflags, 1, 0
instrument_test: op1 and op2 of are registers 10(eax), 10(eax)
17 EFLAGS eflags, 1, 0
instrument_test: op1 and op2 of are registers 10(eax), 10(eax)
17 EFLAGS eflags, 1, 0
instrument_test: op1 and op2 of are registers 10(eax), 10(eax)
17 EFLAGS eflags, 1, 0
instrument_addorsub: arith ins is ADD (0xb7fe0799)
instrument_addorsub: op1 is register and op2 is mem
instrument_test: op1 is mem and op2 is register
instrument_taint_regmem2flag: flags 63, reg 19 size 1, memsize 1
instrument_test: op1 and op2 of are registers 19(al), 19(al)
17 EFLAGS eflags, 1, 0
instrument_addorsub: arith ins is XOR (0xb7ff6284)
instrument_addorsub: op1 and op2 of Arith are registers: 10 (eax), 10 (eax)
handling reg reset
instrument_test: op1 and op2 of are registers 10(eax), 10(eax)
17 EFLAGS eflags, 1, 0
instrument_test: op1 is mem and op2 is imm
instrument_test: op1 is mem and op2 is imm
instrument_test: op1 and op2 of are registers 10(eax), 10(eax)
17 EFLAGS eflags, 1, 0
LEA: base reg is 7(ebx) index reg invalid, dst 10(eax)
instrument_test: op1 is mem and op2 is imm
LEA: base reg is 7(ebx) index reg invalid, dst 10(eax)
LEA: base reg is 7(ebx) index reg invalid, dst 10(eax)
LEA: base reg is 7(ebx) index reg invalid, dst 10(eax)
instrument_test: op1 is mem and op2 is imm
instrument_test: op1 and op2 of are registers 8(edx), 8(edx)
17 EFLAGS eflags, 1, 0
LEA: base reg is 10(eax) index reg invalid, dst 9(ecx)
instrument_test: op1 and op2 of are registers 10(eax), 10(eax)
17 EFLAGS eflags, 1, 0
instrument_test: op1 is reg and op2 is imm
instrument_addorsub: arith ins is SUB (0xb7fe07fb)
instrument_addorsub: op1 and op2 of Arith are registers: 4 (esi), 10 (eax)
instrument_test: op1 is reg and op2 is imm
instrument_addorsub: arith ins is SUB (0xb7fe080b)
instrument_addorsub: op1 and op2 of Arith are registers: 4 (esi), 10 (eax)
instrument_addorsub: arith ins is ADD (0xb7fe0810)
instrument_addorsub: op1 is reg (8) and op2 is immediate
instrument_test: op1 and op2 of are registers 10(eax), 10(eax)
17 EFLAGS eflags, 1, 0
instrument_addorsub: arith ins is ADD (0xb7fe07eb)
instrument_addorsub: op1 is reg (8) and op2 is immediate
instrument_test: op1 and op2 of are registers 10(eax), 10(eax)
17 EFLAGS eflags, 1, 0
instrument_test: op1 is reg and op2 is imm
instrument_addorsub: arith ins is SUB (0xb7fe07fb)
instrument_addorsub: op1 and op2 of Arith are registers: 4 (esi), 10 (eax)
instrument_test: op1 is reg and op2 is imm
instrument_test: op1 is reg and op2 is imm
instrument_addorsub: arith ins is SUB (0xb7fe1962)
instrument_addorsub: op1 and op2 of Arith are registers: 4 (esi), 10 (eax)
instrument_test: op1 is reg and op2 is imm
instrument_addorsub: arith ins is SUB (0xb7fe1e2d)
instrument_addorsub: op1 and op2 of Arith are registers: 4 (esi), 10 (eax)
instrument_test: op1 is reg and op2 is imm
instrument_addorsub: arith ins is ADD (0xb7fe07eb)
instrument_addorsub: op1 is reg (8) and op2 is immediate
instrument_test: op1 and op2 of are registers 10(eax), 10(eax)
17 EFLAGS eflags, 1, 0
instrument_test: op1 is reg and op2 is imm
instrument_addorsub: arith ins is SUB (0xb7fe07fb)
instrument_addorsub: op1 and op2 of Arith are registers: 4 (esi), 10 (eax)
instrument_test: op1 is reg and op2 is imm
instrument_addorsub: arith ins is SUB (0xb7fe080b)
instrument_addorsub: op1 and op2 of Arith are registers: 4 (esi), 10 (eax)
instrument_addorsub: arith ins is ADD (0xb7fe0810)
instrument_addorsub: op1 is reg (8) and op2 is immediate
instrument_test: op1 and op2 of are registers 10(eax), 10(eax)
17 EFLAGS eflags, 1, 0
instrument_test: op1 and op2 of are registers 10(eax), 10(eax)
17 EFLAGS eflags, 1, 0
instrument_test: op1 and op2 of are registers 8(edx), 8(edx)
17 EFLAGS eflags, 1, 0
instrument_test: op1 and op2 of are registers 10(eax), 10(eax)
17 EFLAGS eflags, 1, 0
instrument_test: op1 and op2 of are registers 8(edx), 8(edx)
17 EFLAGS eflags, 1, 0
instrument_addorsub: arith ins is ADD (0xb7fe082c)
instrument_addorsub: op1 is mem and op2 is register
instrument_test: op1 and op2 of are registers 8(edx), 8(edx)
17 EFLAGS eflags, 1, 0
instrument_test: op1 and op2 of are registers 10(eax), 10(eax)
17 EFLAGS eflags, 1, 0
instrument_test: op1 is reg and op2 is imm
instrument_test: op1 and op2 of are registers 4(esi), 4(esi)
17 EFLAGS eflags, 1, 0
instrument_test: op1 is reg and op2 is imm
instrument_test: op1 and op2 of are registers 4(esi), 4(esi)
17 EFLAGS eflags, 1, 0
instrument_test: op1 is mem and op2 is imm
instrument_test: op1 and op2 of are registers 9(ecx), 9(ecx)
17 EFLAGS eflags, 1, 0
instrument_test: op1 and op2 of are registers 9(ecx), 9(ecx)
17 EFLAGS eflags, 1, 0
instrument_test: op1 is mem and op2 is imm
instrument_test: op1 and op2 of are registers 10(eax), 10(eax)
17 EFLAGS eflags, 1, 0
instrument_test: op1 and op2 of are registers 10(eax), 10(eax)
17 EFLAGS eflags, 1, 0
instrument_addorsub: arith ins is AND (0xb7fe092e)
instrument_addorsub: op1 is reg (8) and op2 is immediate
instrument_test: op1 and op2 of are registers 8(edx), 8(edx)
17 EFLAGS eflags, 1, 0
instrument_test: op1 and op2 of are registers 8(edx), 8(edx)
17 EFLAGS eflags, 1, 0
instrument_test: op1 is mem and op2 is imm
instrument_test: op1 and op2 of are registers 9(ecx), 9(ecx)
17 EFLAGS eflags, 1, 0
LEA: base reg is 7(ebx) index reg invalid, dst 8(edx)
LEA: base reg is 4(esi) index reg invalid, dst 10(eax)
instrument_addorsub: arith ins is XOR (0xb7fe96ec)
instrument_addorsub: op1 and op2 of Arith are registers: 8 (edx), 8 (edx)
handling reg reset
imul instruction: imul eax, dword ptr [esp+0x48], 0x4c
num operands is 4
instrument_test: op1 and op2 of are registers 10(eax), 10(eax)
17 EFLAGS eflags, 1, 0
instrument_addorsub: arith ins is ADD (0xb7fe970e)
instrument_addorsub: op1 is reg (10) and op2 is immediate
instrument_test: op1 and op2 of are registers 3(edi), 3(edi)
17 EFLAGS eflags, 1, 0
instrument_test: op1 and op2 of are registers 3(edi), 10(eax)
17 EFLAGS eflags, 1, 0
instrument_test: op1 is mem and op2 is imm
instrument_addorsub: arith ins is XOR (0xb7fe9857)
instrument_addorsub: op1 and op2 of Arith are registers: 10 (eax), 10 (eax)
handling reg reset
LEA: base reg is 4(esi) index reg invalid, dst 10(eax)
[movx] 0xb7fe975b movzx edi, byte ptr [eax]
instrument_test: op1 and op2 of are registers 22(cl), 22(cl)
17 EFLAGS eflags, 1, 0
instrument_addorsub: arith ins is SUB (0xb7fe0996)
instrument_addorsub: op1 is reg (6) and op2 is immediate
instrument_test: op1 and op2 of are registers 10(eax), 10(eax)
17 EFLAGS eflags, 1, 0
[movx] 0xb7fe09b0 movzx edx, word ptr [edi+0x2c]
instrument_addorsub: arith ins is ADD (0xb7fe09b7)
instrument_addorsub: op1 is register and op2 is mem
instrument_test: op1 and op2 of are registers 8(edx), 8(edx)
17 EFLAGS eflags, 1, 0
LEA: base reg is 8(edx) index reg invalid, dst 3(edi)
instrument_test: op1 is reg and op2 is imm
instrument_addorsub: arith ins is ADD (0xb7fe09fa)
instrument_addorsub: op1 is reg (9) and op2 is immediate
instrument_addorsub: arith ins is ADD (0xb7fe09fd)
instrument_addorsub: op1 is reg (10) and op2 is immediate
instrument_test: op1 and op2 of are registers 9(ecx), 3(edi)
17 EFLAGS eflags, 1, 0
instrument_addorsub: arith ins is SUB (0xb7fe0a20)
instrument_addorsub: op1 is register and op2 is mem
instrument_addorsub: arith ins is ADD (0xb7fe0a22)
instrument_addorsub: op1 is mem and op2 is register
instrument_addorsub: arith ins is ADD (0xb7fe0a28)
instrument_addorsub: op1 is mem and op2 is register
instrument_addorsub: arith ins is ADD (0xb7fe0a2e)
instrument_addorsub: op1 and op2 of Arith are registers: 8 (edx), 10 (eax)
instrument_test: op1 and op2 of are registers 8(edx), 8(edx)
17 EFLAGS eflags, 1, 0
instrument_test: op1 is reg and op2 is imm
instrument_test: op1 is reg and op2 is imm
LEA: base reg is 4(esi) index reg invalid, dst 4(esi)
instrument_addorsub: arith ins is ADD (0xb7fe09e6)
instrument_addorsub: op1 is reg (9) and op2 is immediate
instrument_addorsub: arith ins is ADD (0xb7fe09e9)
instrument_addorsub: op1 is reg (10) and op2 is immediate
instrument_test: op1 and op2 of are registers 9(ecx), 3(edi)
17 EFLAGS eflags, 1, 0
instrument_test: op1 and op2 of are registers 8(edx), 8(edx)
17 EFLAGS eflags, 1, 0
instrument_addorsub: arith ins is ADD (0xb7fe12d6)
instrument_addorsub: op1 is register and op2 is mem
instrument_test: op1 is mem and op2 is register
instrument_taint_regmem2flag: flags 63, reg 8 size 4, memsize 4
instrument_test: op1 is mem and op2 is imm
instrument_test: op1 is mem and op2 is register
instrument_taint_regmem2flag: flags 63, reg 8 size 4, memsize 4
instrument_addorsub: arith ins is ADD (0xb7fe09e6)
instrument_addorsub: op1 is reg (9) and op2 is immediate
instrument_addorsub: arith ins is ADD (0xb7fe09e9)
instrument_addorsub: op1 is reg (10) and op2 is immediate
instrument_test: op1 and op2 of are registers 9(ecx), 3(edi)
17 EFLAGS eflags, 1, 0
instrument_test: op1 is reg and op2 is imm
instrument_addorsub: arith ins is ADD (0xb7fe09fa)
instrument_addorsub: op1 is reg (9) and op2 is immediate
instrument_addorsub: arith ins is ADD (0xb7fe09fd)
instrument_addorsub: op1 is reg (10) and op2 is immediate
instrument_test: op1 and op2 of are registers 9(ecx), 3(edi)
17 EFLAGS eflags, 1, 0
instrument_addorsub: arith ins is SUB (0xb7fe0a20)
instrument_addorsub: op1 is register and op2 is mem
instrument_addorsub: arith ins is ADD (0xb7fe0a22)
instrument_addorsub: op1 is mem and op2 is register
instrument_addorsub: arith ins is ADD (0xb7fe0a28)
instrument_addorsub: op1 is mem and op2 is register
instrument_addorsub: arith ins is ADD (0xb7fe0a2e)
instrument_addorsub: op1 and op2 of Arith are registers: 8 (edx), 10 (eax)
instrument_test: op1 and op2 of are registers 8(edx), 8(edx)
17 EFLAGS eflags, 1, 0
LEA: base reg is 4(esi) index reg invalid, dst 10(eax)
instrument_test: op1 and op2 of are registers 10(eax), 10(eax)
17 EFLAGS eflags, 1, 0
instrument_test: op1 is reg and op2 is imm
instrument_addorsub: arith ins is SUB (0xb7fe0a69)
instrument_addorsub: op1 and op2 of Arith are registers: 3 (edi), 10 (eax)
instrument_test: op1 is reg and op2 is imm
instrument_addorsub: arith ins is SUB (0xb7fe0a79)
instrument_addorsub: op1 and op2 of Arith are registers: 3 (edi), 10 (eax)
instrument_addorsub: arith ins is ADD (0xb7fe0a81)
instrument_addorsub: op1 is reg (8) and op2 is immediate
instrument_test: op1 and op2 of are registers 10(eax), 10(eax)
17 EFLAGS eflags, 1, 0
instrument_addorsub: arith ins is ADD (0xb7fe0a56)
instrument_addorsub: op1 is reg (8) and op2 is immediate
instrument_test: op1 and op2 of are registers 10(eax), 10(eax)
17 EFLAGS eflags, 1, 0
instrument_test: op1 is reg and op2 is imm
instrument_addorsub: arith ins is SUB (0xb7fe0a69)
instrument_addorsub: op1 and op2 of Arith are registers: 3 (edi), 10 (eax)
instrument_test: op1 is reg and op2 is imm
instrument_addorsub: arith ins is SUB (0xb7fe0a79)
instrument_addorsub: op1 and op2 of Arith are registers: 3 (edi), 10 (eax)
instrument_addorsub: arith ins is ADD (0xb7fe0a81)
instrument_addorsub: op1 is reg (8) and op2 is immediate
instrument_test: op1 and op2 of are registers 10(eax), 10(eax)
17 EFLAGS eflags, 1, 0
instrument_test: op1 and op2 of are registers 9(ecx), 9(ecx)
17 EFLAGS eflags, 1, 0
instrument_test: op1 and op2 of are registers 10(eax), 10(eax)
17 EFLAGS eflags, 1, 0
instrument_test: op1 and op2 of are registers 9(ecx), 9(ecx)
17 EFLAGS eflags, 1, 0
instrument_test: op1 and op2 of are registers 10(eax), 10(eax)
17 EFLAGS eflags, 1, 0
LEA: base reg is 7(ebx) index reg invalid, dst 10(eax)
instrument_addorsub: arith ins is ADD (0xb7fe0ab2)
instrument_addorsub: op1 and op2 of Arith are registers: 3 (edi), 9 (ecx)
instrument_test: op1 and op2 of are registers 3(edi), 3(edi)
17 EFLAGS eflags, 1, 0
instrument_test: op1 and op2 of are registers 3(edi), 3(edi)
17 EFLAGS eflags, 1, 0
instrument_addorsub: arith ins is ADD (0xb7fe0aee)
instrument_addorsub: op1 is mem and op2 is immediate
instrument_addorsub: arith ins is ADD (0xb7fe0b00)
instrument_addorsub: op1 and op2 of Arith are registers: 10 (eax), 9 (ecx)
instrument_test: op1 and op2 of are registers 3(edi), 3(edi)
17 EFLAGS eflags, 1, 0
instrument_addorsub: arith ins is ADD (0xb7fe0b12)
instrument_addorsub: op1 is mem and op2 is immediate
instrument_addorsub: arith ins is ADD (0xb7fe0b24)
instrument_addorsub: op1 and op2 of Arith are registers: 10 (eax), 9 (ecx)
instrument_test: op1 and op2 of are registers 3(edi), 3(edi)
17 EFLAGS eflags, 1, 0
instrument_test: op1 and op2 of are registers 3(edi), 3(edi)
17 EFLAGS eflags, 1, 0
instrument_addorsub: arith ins is ADD (0xb7fe0b5a)
instrument_addorsub: op1 is mem and op2 is immediate
instrument_addorsub: arith ins is ADD (0xb7fe0b6c)
instrument_addorsub: op1 and op2 of Arith are registers: 10 (eax), 9 (ecx)
instrument_test: op1 and op2 of are registers 3(edi), 3(edi)
17 EFLAGS eflags, 1, 0
instrument_addorsub: arith ins is ADD (0xb7fe0b7e)
instrument_addorsub: op1 is mem and op2 is immediate
instrument_addorsub: arith ins is ADD (0xb7fe0b90)
instrument_addorsub: op1 and op2 of Arith are registers: 10 (eax), 9 (ecx)
instrument_test: op1 and op2 of are registers 3(edi), 3(edi)
17 EFLAGS eflags, 1, 0
instrument_test: op1 and op2 of are registers 3(edi), 3(edi)
17 EFLAGS eflags, 1, 0
instrument_addorsub: arith ins is ADD (0xb7fe0b7e)
instrument_addorsub: op1 is mem and op2 is immediate
instrument_addorsub: arith ins is ADD (0xb7fe0b90)
instrument_addorsub: op1 and op2 of Arith are registers: 10 (eax), 9 (ecx)
instrument_test: op1 and op2 of are registers 3(edi), 3(edi)
17 EFLAGS eflags, 1, 0
instrument_addorsub: arith ins is ADD (0xb7fe0ba5)
instrument_addorsub: op1 is mem and op2 is immediate
instrument_addorsub: arith ins is ADD (0xb7fe0bb7)
instrument_addorsub: op1 and op2 of Arith are registers: 10 (eax), 9 (ecx)
instrument_test: op1 and op2 of are registers 3(edi), 3(edi)
17 EFLAGS eflags, 1, 0
instrument_test: op1 and op2 of are registers 3(edi), 3(edi)
17 EFLAGS eflags, 1, 0
instrument_addorsub: arith ins is ADD (0xb7fe0ba5)
instrument_addorsub: op1 is mem and op2 is immediate
instrument_addorsub: arith ins is ADD (0xb7fe0bb7)
instrument_addorsub: op1 and op2 of Arith are registers: 10 (eax), 9 (ecx)
instrument_test: op1 and op2 of are registers 3(edi), 3(edi)
17 EFLAGS eflags, 1, 0
instrument_addorsub: arith ins is ADD (0xb7fe0bcf)
instrument_addorsub: op1 is register and op2 is mem
instrument_test: op1 is mem and op2 is imm
instrument_test: op1 and op2 of are registers 10(eax), 10(eax)
17 EFLAGS eflags, 1, 0
instrument_test: op1 is reg and op2 is imm
instrument_test: op1 and op2 of are registers 10(eax), 10(eax)
17 EFLAGS eflags, 1, 0
instrument_test: op1 and op2 of are registers 10(eax), 10(eax)
17 EFLAGS eflags, 1, 0
instrument_test: op1 is mem and op2 is imm
instrument_test: op1 and op2 of are registers 3(edi), 3(edi)
17 EFLAGS eflags, 1, 0
instrument_test: op1 and op2 of are registers 3(edi), 3(edi)
17 EFLAGS eflags, 1, 0
instrument_test: op1 is mem and op2 is imm
instrument_test: op1 and op2 of are registers 10(eax), 10(eax)
17 EFLAGS eflags, 1, 0
instrument_test: op1 and op2 of are registers 10(eax), 10(eax)
17 EFLAGS eflags, 1, 0
instrument_test: op1 is reg and op2 is imm
instrument_test: op1 is reg and op2 is imm
instrument_test: op1 and op2 of are registers 10(eax), 10(eax)
17 EFLAGS eflags, 1, 0
instrument_addorsub: arith ins is AND (0xb7fe0c6a)
instrument_addorsub: op1 is reg (8) and op2 is immediate
instrument_test: op1 and op2 of are registers 9(ecx), 9(ecx)
17 EFLAGS eflags, 1, 0
instrument_test: op1 and op2 of are registers 9(ecx), 9(ecx)
17 EFLAGS eflags, 1, 0
instrument_test: op1 and op2 of are registers 8(edx), 8(edx)
17 EFLAGS eflags, 1, 0
instrument_addorsub: arith ins is ADD (0xb7fe94f8)
instrument_addorsub: op1 is reg (8) and op2 is immediate
LEA: base reg is 4(esi) index reg invalid, dst 8(edx)
instrument_addorsub: arith ins is OR (0xb7fe0c94)
instrument_addorsub: op1 is mem and op2 is immediate
instrument_test: op1 and op2 of are registers 10(eax), 10(eax)
17 EFLAGS eflags, 1, 0
instrument_addorsub: arith ins is ADD (0xb7fe0cb1)
instrument_addorsub: op1 is register and op2 is mem
instrument_addorsub: arith ins is ADD (0xb7ff62d3)
instrument_addorsub: op1 is reg (10) and op2 is immediate
instrument_addorsub: arith ins is SUB (0xb7ff62d6)
instrument_addorsub: op1 and op2 of Arith are registers: 8 (edx), 9 (ecx)
instrument_addorsub: arith ins is ADD (0xb7ff62d8)
instrument_addorsub: op1 is reg (9) and op2 is immediate
instrument_addorsub: arith ins is XOR (0xb7ff62e1)
instrument_addorsub: op1 and op2 of Arith are registers: 8 (edx), 9 (ecx)
instrument_addorsub: arith ins is AND (0xb7ff62e3)
instrument_addorsub: op1 is reg (8) and op2 is immediate
instrument_addorsub: arith ins is ADD (0xb7ff62ed)
instrument_addorsub: op1 is reg (10) and op2 is immediate
instrument_addorsub: arith ins is SUB (0xb7ff62f0)
instrument_addorsub: op1 and op2 of Arith are registers: 8 (edx), 9 (ecx)
instrument_addorsub: arith ins is ADD (0xb7ff62f2)
instrument_addorsub: op1 is reg (9) and op2 is immediate
instrument_addorsub: arith ins is XOR (0xb7ff62fb)
instrument_addorsub: op1 and op2 of Arith are registers: 8 (edx), 9 (ecx)
instrument_addorsub: arith ins is AND (0xb7ff62fd)
instrument_addorsub: op1 is reg (8) and op2 is immediate
instrument_addorsub: arith ins is ADD (0xb7ff6307)
instrument_addorsub: op1 is reg (10) and op2 is immediate
instrument_addorsub: arith ins is SUB (0xb7ff630a)
instrument_addorsub: op1 and op2 of Arith are registers: 8 (edx), 9 (ecx)
instrument_addorsub: arith ins is ADD (0xb7ff630c)
instrument_addorsub: op1 is reg (9) and op2 is immediate
instrument_addorsub: arith ins is XOR (0xb7ff6315)
instrument_addorsub: op1 and op2 of Arith are registers: 8 (edx), 9 (ecx)
instrument_addorsub: arith ins is AND (0xb7ff6317)
instrument_addorsub: op1 is reg (8) and op2 is immediate
instrument_addorsub: arith ins is ADD (0xb7ff6321)
instrument_addorsub: op1 is reg (10) and op2 is immediate
instrument_addorsub: arith ins is SUB (0xb7ff6324)
instrument_addorsub: op1 and op2 of Arith are registers: 8 (edx), 9 (ecx)
instrument_addorsub: arith ins is ADD (0xb7ff6326)
instrument_addorsub: op1 is reg (9) and op2 is immediate
instrument_addorsub: arith ins is XOR (0xb7ff632f)
instrument_addorsub: op1 and op2 of Arith are registers: 8 (edx), 9 (ecx)
instrument_addorsub: arith ins is AND (0xb7ff6331)
instrument_addorsub: op1 is reg (8) and op2 is immediate
instrument_addorsub: arith ins is SUB (0xb7ff6339)
instrument_addorsub: op1 is reg (10) and op2 is immediate
instrument_addorsub: arith ins is SUB (0xb7ff633c)
instrument_addorsub: op1 is reg (9) and op2 is immediate
instrument_test: op1 is reg and op2 is imm
instrument_test: op1 and op2 of are registers 10(eax), 10(eax)
17 EFLAGS eflags, 1, 0
instrument_addorsub: arith ins is AND (0xb7ff6a43)
instrument_addorsub: op1 is reg (10) and op2 is immediate
instrument_addorsub: arith ins is XOR (0xb7fe0cf0)
instrument_addorsub: op1 and op2 of Arith are registers: 8 (edx), 8 (edx)
handling reg reset
instrument_test: op1 and op2 of are registers 9(ecx), 9(ecx)
17 EFLAGS eflags, 1, 0
imul instruction: imul edx, edi, 0x4c
num operands is 4
instrument_addorsub: arith ins is ADD (0xb7fe959e)
instrument_addorsub: op1 is mem and op2 is immediate
instrument_addorsub: arith ins is ADD (0xb7fe95ac)
instrument_addorsub: op1 is reg (4) and op2 is immediate
instrument_addorsub: arith ins is ADC (0xb7fe95b5)
instrument_addorsub: op1 is reg (3) and op2 is immediate
instrument_test: op1 and op2 of are registers 8(edx), 8(edx)
17 EFLAGS eflags, 1, 0
instrument_test: op1 is mem and op2 is register
instrument_taint_regmem2flag: flags 63, reg 10 size 4, memsize 4
LEA: base reg is 7(ebx) index reg invalid, dst 10(eax)
LEA: base reg is 4(esi) index reg invalid, dst 10(eax)
LEA: base reg is 7(ebx) index reg invalid, dst 10(eax)
instrument_test: op1 is mem and op2 is register
instrument_taint_regmem2flag: flags 63, reg 10 size 4, memsize 4
instrument_addorsub: arith ins is ADD (0xb7ff36e9)
instrument_addorsub: op1 is reg (7) and op2 is immediate
instrument_addorsub: arith ins is SUB (0xb7ff36ef)
instrument_addorsub: op1 is reg (6) and op2 is immediate
instrument_test: op1 and op2 of are registers 10(eax), 10(eax)
17 EFLAGS eflags, 1, 0
[movx] 0xb7ff370d movzx eax, word ptr [eax+0x158]
instrument_test: op1 and op2 of are registers 10(eax), 10(eax)
17 EFLAGS eflags, 1, 0
instrument_addorsub: arith ins is ADD (0xb7ff371c)
instrument_addorsub: op1 is reg (10) and op2 is immediate
LEA: base reg is 7(ebx) index reg invalid, dst 5(ebp)
instrument_test: op1 is mem and op2 is imm
instrument_addorsub: arith ins is ADD (0xb7ff375f)
instrument_addorsub: op1 is register and op2 is mem
instrument_test: op1 is reg and op2 is imm
instrument_addorsub: arith ins is ADD (0xb7ff3738)
instrument_addorsub: op1 is mem and op2 is immediate
instrument_addorsub: arith ins is ADD (0xb7ff3741)
instrument_addorsub: op1 is mem and op2 is immediate
instrument_test: op1 is mem and op2 is register
instrument_taint_regmem2flag: flags 63, reg 10 size 4, memsize 4
instrument_test: op1 is mem and op2 is imm
instrument_addorsub: arith ins is ADD (0xb7ff375f)
instrument_addorsub: op1 is register and op2 is mem
instrument_test: op1 is reg and op2 is imm
instrument_test: op1 and op2 of are registers 10(eax), 9(ecx)
17 EFLAGS eflags, 1, 0
instrument_test: op1 and op2 of are registers 10(eax), 9(ecx)
17 EFLAGS eflags, 1, 0
instrument_test: op1 and op2 of are registers 10(eax), 9(ecx)
17 EFLAGS eflags, 1, 0
instrument_test: op1 and op2 of are registers 10(eax), 9(ecx)
17 EFLAGS eflags, 1, 0
instrument_test: op1 and op2 of are registers 10(eax), 9(ecx)
17 EFLAGS eflags, 1, 0
instrument_addorsub: arith ins is XOR (0xb7ff6663)
instrument_addorsub: op1 and op2 of Arith are registers: 10 (eax), 10 (eax)
handling reg reset
instrument_test: op1 and op2 of are registers 10(eax), 10(eax)
17 EFLAGS eflags, 1, 0
instrument_addorsub: arith ins is ADD (0xb7ff37ad)
instrument_addorsub: op1 is reg (6) and op2 is immediate
instrument_test: op1 and op2 of are registers 10(eax), 10(eax)
17 EFLAGS eflags, 1, 0
instrument_test: op1 and op2 of are registers 8(edx), 8(edx)
17 EFLAGS eflags, 1, 0
instrument_test: op1 is reg and op2 is imm
instrument_addorsub: arith ins is ADD (0xb7fe64dd)
instrument_addorsub: op1 is reg (7) and op2 is immediate
instrument_addorsub: arith ins is SUB (0xb7fe64e3)
instrument_addorsub: op1 is reg (6) and op2 is immediate
LEA: base reg is 7(ebx) index reg invalid, dst 10(eax)
LEA: base reg is 7(ebx) index reg invalid, dst 9(ecx)
instrument_addorsub: arith ins is ADD (0xb7ff2f7b)
instrument_addorsub: op1 is reg (7) and op2 is immediate
instrument_addorsub: arith ins is SUB (0xb7ff2f81)
instrument_addorsub: op1 is reg (6) and op2 is immediate
instrument_addorsub: arith ins is AND (0xb7ff2fb2)
instrument_addorsub: op1 and op2 of Arith are registers: 8 (edx), 9 (ecx)
instrument_addorsub: arith ins is AND (0xb7ff2fbd)
instrument_addorsub: op1 and op2 of Arith are registers: 3 (edi), 4 (esi)
instrument_test: op1 and op2 of are registers 10(eax), 10(eax)
17 EFLAGS eflags, 1, 0
[movx] 0xb7ff2fc7 movzx eax, al
instrument movx address 0xb7ff2fc7 is src reg: 19 into dst reg: 10
instrument_addorsub: arith ins is OR (0xb7ff2fd5)
instrument_addorsub: op1 and op2 of Arith are registers: 3 (edi), 10 (eax)
instrument_addorsub: arith ins is XOR (0xb7ff2fd9)
instrument_addorsub: op1 and op2 of Arith are registers: 3 (edi), 3 (edi)
handling reg reset
instrument_addorsub: arith ins is XOR (0xb7ff2fdb)
instrument_addorsub: op1 and op2 of Arith are registers: 4 (esi), 4 (esi)
handling reg reset
LEA: base reg is 4(esi) index reg invalid, dst 4(esi)
instrument_test: op1 is reg and op2 is imm
instrument_addorsub: arith ins is AND (0xb7ff2ff8)
instrument_addorsub: op1 is reg (10) and op2 is immediate
instrument_test: op1 is reg and op2 is imm
instrument_addorsub: arith ins is SBB (0xb7ff3003)
instrument_addorsub: op1 is mem and op2 is immediate
instrument_addorsub: arith ins is ADD (0xb7ff3007)
instrument_addorsub: op1 is reg (4) and op2 is immediate
instrument_test: op1 is reg and op2 is imm
instrument_addorsub: arith ins is XOR (0xb7ff3017)
instrument_addorsub: op1 and op2 of Arith are registers: 10 (eax), 10 (eax)
handling reg reset
instrument_addorsub: arith ins is AND (0xb7ff3028)
instrument_addorsub: op1 and op2 of Arith are registers: 10 (eax), 8 (edx)
instrument_addorsub: arith ins is AND (0xb7ff3030)
instrument_addorsub: op1 and op2 of Arith are registers: 10 (eax), 9 (ecx)
instrument_addorsub: arith ins is OR (0xb7ff3034)
instrument_addorsub: op1 is register and op2 is mem
instrument_addorsub: arith ins is AND (0xb7ff3028)
instrument_addorsub: op1 and op2 of Arith are registers: 10 (eax), 8 (edx)
instrument_addorsub: arith ins is AND (0xb7ff3030)
instrument_addorsub: op1 and op2 of Arith are registers: 10 (eax), 9 (ecx)
instrument_addorsub: arith ins is OR (0xb7ff3034)
instrument_addorsub: op1 is register and op2 is mem
instrument_test: op1 and op2 of are registers 10(eax), 10(eax)
17 EFLAGS eflags, 1, 0
[movx] 0xb7ff3050 movzx eax, word ptr [eax+0x158]
instrument_test: op1 and op2 of are registers 10(eax), 10(eax)
17 EFLAGS eflags, 1, 0
instrument_test: op1 is reg and op2 is imm
instrument_addorsub: arith ins is AND (0xb7ff2ff8)
instrument_addorsub: op1 is reg (10) and op2 is immediate
instrument_test: op1 is reg and op2 is imm
instrument_addorsub: arith ins is SBB (0xb7ff3003)
instrument_addorsub: op1 is mem and op2 is immediate
instrument_addorsub: arith ins is ADD (0xb7ff3007)
instrument_addorsub: op1 is reg (4) and op2 is immediate
instrument_test: op1 is reg and op2 is imm
instrument_addorsub: arith ins is XOR (0xb7ff3017)
instrument_addorsub: op1 and op2 of Arith are registers: 10 (eax), 10 (eax)
handling reg reset
instrument_addorsub: arith ins is AND (0xb7ff3028)
instrument_addorsub: op1 and op2 of Arith are registers: 10 (eax), 8 (edx)
instrument_addorsub: arith ins is AND (0xb7ff3030)
instrument_addorsub: op1 and op2 of Arith are registers: 10 (eax), 9 (ecx)
instrument_addorsub: arith ins is OR (0xb7ff3034)
instrument_addorsub: op1 is register and op2 is mem
instrument_test: op1 and op2 of are registers 10(eax), 10(eax)
17 EFLAGS eflags, 1, 0
instrument_addorsub: arith ins is ADD (0xb7ff305f)
instrument_addorsub: op1 is reg (10) and op2 is immediate
LEA: base reg is 7(ebx) index reg invalid, dst 10(eax)
instrument_test: op1 is mem and op2 is imm
instrument_addorsub: arith ins is ADD (0xb7ff30a7)
instrument_addorsub: op1 is register and op2 is mem
instrument_test: op1 is reg and op2 is imm
LEA: base reg is 3(edi) index reg invalid, dst 10(eax)
instrument_addorsub: arith ins is ADD (0xb7ff3080)
instrument_addorsub: op1 is mem and op2 is immediate
instrument_addorsub: arith ins is ADD (0xb7ff3087)
instrument_addorsub: op1 is mem and op2 is immediate
instrument_test: op1 is mem and op2 is register
instrument_taint_regmem2flag: flags 63, reg 10 size 4, memsize 4
instrument_test: op1 is mem and op2 is imm
instrument_addorsub: arith ins is ADD (0xb7ff30a7)
instrument_addorsub: op1 is register and op2 is mem
instrument_test: op1 is reg and op2 is imm
LEA: base reg is 3(edi) index reg invalid, dst 10(eax)
instrument_test: op1 is mem and op2 is imm
instrument_test: op1 is reg and op2 is imm
instrument_addorsub: arith ins is ADD (0xb7ff30c3)
instrument_addorsub: op1 is reg (9) and op2 is immediate
instrument_addorsub: arith ins is ADD (0xb7ff30c6)
instrument_addorsub: op1 is reg (10) and op2 is immediate
instrument_addorsub: arith ins is AND (0xb7ff30c9)
instrument_addorsub: op1 is reg (9) and op2 is immediate
instrument_addorsub: arith ins is AND (0xb7ff30cc)
instrument_addorsub: op1 is reg (10) and op2 is immediate
instrument_addorsub: arith ins is ADD (0xb7ff30d3)
instrument_addorsub: op1 and op2 of Arith are registers: 4 (esi), 10 (eax)
LEA: base reg is 4(esi) index reg invalid, dst 10(eax)
instrument_addorsub: arith ins is SUB (0xb7ff30da)
instrument_addorsub: op1 and op2 of Arith are registers: 9 (ecx), 8 (edx)
instrument_test: op1 and op2 of are registers 3(edi), 9(ecx)
17 EFLAGS eflags, 1, 0
instrument_test: op1 is mem and op2 is imm
instrument_test: op1 is reg and op2 is imm
instrument_test: op1 and op2 of are registers 10(eax), 9(ecx)
17 EFLAGS eflags, 1, 0
instrument_addorsub: arith ins is XOR (0xb7ff6663)
instrument_addorsub: op1 and op2 of Arith are registers: 10 (eax), 10 (eax)
handling reg reset
instrument_test: op1 and op2 of are registers 10(eax), 10(eax)
17 EFLAGS eflags, 1, 0
instrument_test: op1 is reg and op2 is imm
LEA: base reg is 4(esi) index reg invalid, dst 9(ecx)
LEA: index reg is 3(edi) base reg invalid, dst 8(edx)
instrument_addorsub: arith ins is AND (0xb7ff358e)
instrument_addorsub: op1 is reg (8) and op2 is immediate
instrument_addorsub: arith ins is SUB (0xb7ff3591)
instrument_addorsub: op1 and op2 of Arith are registers: 6 (esp), 8 (edx)
LEA: base reg is 6(esp) index reg invalid, dst 8(edx)
instrument_addorsub: arith ins is AND (0xb7ff359a)
instrument_addorsub: op1 is mem and op2 is immediate
instrument_addorsub: arith ins is OR (0xb7ff35bb)
instrument_addorsub: op1 and op2 of Arith are registers: 8 (edx), 4 (esi)
instrument_addorsub: arith ins is OR (0xb7ff35cf)
instrument_addorsub: op1 and op2 of Arith are registers: 8 (edx), 4 (esi)
instrument_test: op1 and op2 of are registers 9(ecx), 10(eax)
17 EFLAGS eflags, 1, 0
LEA: base reg is 4(esi) index reg invalid, dst 4(esi)
LEA: base reg is 9(ecx) index reg invalid, dst 4(esi)
instrument_test: op1 is mem and op2 is register
instrument_taint_regmem2flag: flags 63, reg 26 size 1, memsize 1
instrument_addorsub: arith ins is XOR (0xb7ff62c1)
instrument_addorsub: op1 is reg (8) and op2 is immediate
instrument_test: op1 is mem and op2 is register
instrument_taint_regmem2flag: flags 63, reg 26 size 1, memsize 1
instrument_addorsub: arith ins is XOR (0xb7ff62cf)
instrument_addorsub: op1 and op2 of Arith are registers: 8 (edx), 8 (edx)
handling reg reset
instrument_addorsub: arith ins is ADD (0xb7ff62d3)
instrument_addorsub: op1 is reg (10) and op2 is immediate
instrument_addorsub: arith ins is SUB (0xb7ff62d6)
instrument_addorsub: op1 and op2 of Arith are registers: 8 (edx), 9 (ecx)
instrument_addorsub: arith ins is ADD (0xb7ff62d8)
instrument_addorsub: op1 is reg (9) and op2 is immediate
instrument_addorsub: arith ins is XOR (0xb7ff62e1)
instrument_addorsub: op1 and op2 of Arith are registers: 8 (edx), 9 (ecx)
instrument_addorsub: arith ins is AND (0xb7ff62e3)
instrument_addorsub: op1 is reg (8) and op2 is immediate
instrument_addorsub: arith ins is ADD (0xb7ff62ed)
instrument_addorsub: op1 is reg (10) and op2 is immediate
instrument_addorsub: arith ins is SUB (0xb7ff62f0)
instrument_addorsub: op1 and op2 of Arith are registers: 8 (edx), 9 (ecx)
instrument_addorsub: arith ins is ADD (0xb7ff62f2)
instrument_addorsub: op1 is reg (9) and op2 is immediate
[movx] 0xb7ff35fe movzx ecx, byte ptr [ecx]
instrument_test: op1 is mem and op2 is register
instrument_taint_regmem2flag: flags 59, reg 8 size 4, memsize 4
instrument_addorsub: arith ins is ADD (0xb7ff3612)
instrument_addorsub: op1 is reg (3) and op2 is immediate
instrument_test: op1 is mem and op2 is register
instrument_taint_regmem2flag: flags 63, reg 9 size 4, memsize 4
instrument_addorsub: arith ins is ADD (0xb7ff362a)
instrument_addorsub: op1 is reg (8) and op2 is immediate
instrument_addorsub: arith ins is OR (0xb7ff3630)
instrument_addorsub: op1 is register and op2 is mem
instrument_addorsub: arith ins is SUB (0xb7ff36d0)
instrument_addorsub: op1 is mem and op2 is immediate
instrument_test: op1 is mem and op2 is register
instrument_taint_regmem2flag: flags 63, reg 9 size 4, memsize 4
instrument_addorsub: arith ins is ADD (0xb7ff362a)
instrument_addorsub: op1 is reg (8) and op2 is immediate
instrument_addorsub: arith ins is OR (0xb7ff3630)
instrument_addorsub: op1 is register and op2 is mem
instrument_addorsub: arith ins is XOR (0xb7ff3158)
instrument_addorsub: op1 and op2 of Arith are registers: 4 (esi), 4 (esi)
handling reg reset
LEA: base reg is 7(ebx) index reg invalid, dst 10(eax)
0xb7ff316e: not instrument noop data16 nop 
instrument_test: op1 is reg and op2 is imm
instrument_addorsub: arith ins is AND (0xb7ff3180)
instrument_addorsub: op1 is reg (10) and op2 is immediate
instrument_test: op1 and op2 of are registers 10(eax), 10(eax)
17 EFLAGS eflags, 1, 0
instrument_addorsub: arith ins is AND (0xb7ff3180)
instrument_addorsub: op1 is reg (10) and op2 is immediate
instrument_test: op1 and op2 of are registers 10(eax), 10(eax)
17 EFLAGS eflags, 1, 0
instrument_addorsub: arith ins is ADD (0xb7ff31dc)
instrument_addorsub: op1 is reg (9) and op2 is immediate
instrument_addorsub: arith ins is OR (0xb7ff31df)
instrument_addorsub: op1 and op2 of Arith are registers: 10 (eax), 4 (esi)
instrument_addorsub: arith ins is ADD (0xb7ff31eb)
instrument_addorsub: op1 is reg (8) and op2 is immediate
instrument_test: op1 is mem and op2 is imm
instrument_addorsub: arith ins is ADD (0xb7ff3201)
instrument_addorsub: op1 is register and op2 is mem
instrument_addorsub: arith ins is ADD (0xb7ff3211)
instrument_addorsub: op1 is reg (8) and op2 is immediate
instrument_addorsub: arith ins is ADD (0xb7ff3217)
instrument_addorsub: op1 is register and op2 is mem
instrument_test: op1 and op2 of are registers 3(edi), 8(edx)
17 EFLAGS eflags, 1, 0
LEA: base reg is 7(ebx) index reg invalid, dst 9(ecx)
instrument_test: op1 is reg and op2 is imm
instrument_addorsub: arith ins is AND (0xb7ff3180)
instrument_addorsub: op1 is reg (10) and op2 is immediate
instrument_test: op1 and op2 of are registers 10(eax), 10(eax)
17 EFLAGS eflags, 1, 0
instrument_addorsub: arith ins is XOR (0xb7ff31b0)
instrument_addorsub: op1 and op2 of Arith are registers: 10 (eax), 10 (eax)
handling reg reset
instrument_addorsub: arith ins is XOR (0xb7ff31b2)
instrument_addorsub: op1 and op2 of Arith are registers: 8 (edx), 8 (edx)
handling reg reset
instrument_test: op1 is reg and op2 is imm
instrument_addorsub: arith ins is XOR (0xb7ff31c6)
instrument_addorsub: op1 and op2 of Arith are registers: 8 (edx), 4 (esi)
instrument_addorsub: arith ins is ADD (0xb7ff31d0)
instrument_addorsub: op1 is mem and op2 is immediate
instrument_addorsub: arith ins is XOR (0xb7ff31d6)
instrument_addorsub: op1 and op2 of Arith are registers: 8 (edx), 3 (edi)
instrument_addorsub: arith ins is ADD (0xb7ff31dc)
instrument_addorsub: op1 is reg (9) and op2 is immediate
instrument_addorsub: arith ins is OR (0xb7ff31df)
instrument_addorsub: op1 and op2 of Arith are registers: 10 (eax), 4 (esi)
instrument_addorsub: arith ins is ADD (0xb7ff31eb)
instrument_addorsub: op1 is reg (8) and op2 is immediate
instrument_test: op1 is mem and op2 is imm
instrument_addorsub: arith ins is ADD (0xb7ff3201)
instrument_addorsub: op1 is register and op2 is mem
instrument_addorsub: arith ins is ADD (0xb7ff3211)
instrument_addorsub: op1 is reg (8) and op2 is immediate
instrument_addorsub: arith ins is ADD (0xb7ff3217)
instrument_addorsub: op1 is register and op2 is mem
instrument_test: op1 and op2 of are registers 3(edi), 8(edx)
17 EFLAGS eflags, 1, 0
LEA: base reg is 7(ebx) index reg invalid, dst 9(ecx)
instrument_test: op1 is reg and op2 is imm
instrument_test: op1 is reg and op2 is imm
LEA: base reg is 10(eax) index reg invalid, dst 8(edx)
instrument_test: op1 and op2 of are registers 3(edi), 8(edx)
17 EFLAGS eflags, 1, 0
instrument_test: op1 is reg and op2 is imm
instrument_test: op1 is reg and op2 is imm
LEA: base reg is 10(eax) index reg invalid, dst 9(ecx)
instrument_addorsub: arith ins is ADD (0xb7ff32cc)
instrument_addorsub: op1 and op2 of Arith are registers: 10 (eax), 4 (esi)
instrument_test: op1 and op2 of are registers 10(eax), 10(eax)
17 EFLAGS eflags, 1, 0
instrument_addorsub: arith ins is ADD (0xb7ff32e9)
instrument_addorsub: op1 and op2 of Arith are registers: 10 (eax), 4 (esi)
instrument_test: op1 is reg and op2 is imm
instrument_addorsub: arith ins is SUB (0xb7ff3301)
instrument_addorsub: op1 is reg (4) and op2 is immediate
LEA: base reg is 4(esi) index reg invalid, dst 4(esi)
instrument_addorsub: arith ins is SUB (0xb7ff3323)
instrument_addorsub: op1 is reg (8) and op2 is immediate
op1 and op2 of xchg are registers
instrument_addorsub: arith ins is ADD (0xb7ff3348)
instrument_addorsub: op1 is reg (10) and op2 is immediate
instrument_test: op1 and op2 of are registers 10(eax), 8(edx)
17 EFLAGS eflags, 1, 0
instrument_addorsub: arith ins is SUB (0xb7ff3368)
instrument_addorsub: op1 is reg (3) and op2 is immediate
instrument_addorsub: arith ins is ADD (0xb7ff3389)
instrument_addorsub: op1 is reg (10) and op2 is immediate
instrument_addorsub: arith ins is SUB (0xb7ff338c)
instrument_addorsub: op1 is reg (4) and op2 is immediate
instrument_addorsub: arith ins is ADD (0xb7ff33b6)
instrument_addorsub: op1 is reg (10) and op2 is immediate
instrument_test: op1 and op2 of are registers 8(edx), 8(edx)
17 EFLAGS eflags, 1, 0
instrument_test: op1 and op2 of are registers 8(edx), 8(edx)
17 EFLAGS eflags, 1, 0
LEA: base reg is 4(esi) index reg invalid, dst 4(esi)
instrument_addorsub: arith ins is ADD (0xb7ff33e7)
instrument_addorsub: op1 is reg (10) and op2 is immediate
instrument_test: op1 and op2 of are registers 10(eax), 9(ecx)
17 EFLAGS eflags, 1, 0
instrument_addorsub: arith ins is SUB (0xb7ff3323)
instrument_addorsub: op1 is reg (8) and op2 is immediate
instrument_addorsub: arith ins is SUB (0xb7ff3350)
instrument_addorsub: op1 is reg (3) and op2 is immediate
instrument_addorsub: arith ins is SUB (0xb7ff3353)
instrument_addorsub: op1 is reg (4) and op2 is immediate
instrument_test: op1 and op2 of are registers 10(eax), 8(edx)
17 EFLAGS eflags, 1, 0
instrument_addorsub: arith ins is SUB (0xb7ff3368)
instrument_addorsub: op1 is reg (3) and op2 is immediate
instrument_addorsub: arith ins is ADD (0xb7ff33e7)
instrument_addorsub: op1 is reg (10) and op2 is immediate
instrument_test: op1 and op2 of are registers 10(eax), 9(ecx)
17 EFLAGS eflags, 1, 0
0xb7ff33f3: not instrument noop nop 
LEA: base reg is 4(esi) index reg invalid, dst 4(esi)
instrument_addorsub: arith ins is SUB (0xb7ff33fb)
instrument_addorsub: op1 is reg (9) and op2 is immediate
instrument_test: op1 and op2 of are registers 3(edi), 3(edi)
17 EFLAGS eflags, 1, 0
LEA: base reg is 4(esi) index reg invalid, dst 4(esi)
instrument_addorsub: arith ins is SUB (0xb7ff3418)
instrument_addorsub: op1 is reg (10) and op2 is immediate
instrument_test: op1 is mem and op2 is register
instrument_taint_regmem2flag: flags 59, reg 10 size 4, memsize 4
instrument_addorsub: arith ins is SUB (0xb7ff3424)
instrument_addorsub: op1 is reg (10) and op2 is immediate
instrument_addorsub: arith ins is ADD (0xb7ff3427)
instrument_addorsub: op1 is reg (3) and op2 is immediate
instrument_addorsub: arith ins is ADD (0xb7ff342a)
instrument_addorsub: op1 is mem and op2 is register
instrument_addorsub: arith ins is ADD (0xb7ff342d)
instrument_addorsub: op1 is reg (8) and op2 is immediate
instrument_test: op1 is mem and op2 is register
instrument_taint_regmem2flag: flags 59, reg 10 size 4, memsize 4
instrument_addorsub: arith ins is ADD (0xb7ff3435)
instrument_addorsub: op1 is reg (8) and op2 is immediate
instrument_test: op1 and op2 of are registers 10(eax), 10(eax)
17 EFLAGS eflags, 1, 0
instrument_test: op1 and op2 of are registers 9(ecx), 9(ecx)
17 EFLAGS eflags, 1, 0
instrument_addorsub: arith ins is SUB (0xb7ff3418)
instrument_addorsub: op1 is reg (10) and op2 is immediate
instrument_test: op1 is mem and op2 is register
instrument_taint_regmem2flag: flags 59, reg 10 size 4, memsize 4
instrument_addorsub: arith ins is SUB (0xb7ff3424)
instrument_addorsub: op1 is reg (10) and op2 is immediate
instrument_addorsub: arith ins is ADD (0xb7ff3427)
instrument_addorsub: op1 is reg (3) and op2 is immediate
instrument_addorsub: arith ins is ADD (0xb7ff342a)
instrument_addorsub: op1 is mem and op2 is register
instrument_addorsub: arith ins is ADD (0xb7ff342d)
instrument_addorsub: op1 is reg (8) and op2 is immediate
instrument_test: op1 is mem and op2 is register
instrument_taint_regmem2flag: flags 59, reg 10 size 4, memsize 4
instrument_addorsub: arith ins is ADD (0xb7ff3435)
instrument_addorsub: op1 is reg (8) and op2 is immediate
instrument_test: op1 and op2 of are registers 10(eax), 10(eax)
17 EFLAGS eflags, 1, 0
instrument_addorsub: arith ins is ADD (0xb7ff3435)
instrument_addorsub: op1 is reg (8) and op2 is immediate
instrument_test: op1 and op2 of are registers 10(eax), 10(eax)
17 EFLAGS eflags, 1, 0
instrument_test: op1 and op2 of are registers 9(ecx), 9(ecx)
17 EFLAGS eflags, 1, 0
[movx] 0xb7ff3443 movzx ecx, byte ptr [ebp-0x54]
LEA: base reg is 10(eax) index reg invalid, dst 8(edx)
instrument_addorsub: arith ins is ADD (0xb7ff3457)
instrument_addorsub: op1 is reg (10) and op2 is immediate
instrument_test: op1 is mem and op2 is register
instrument_taint_regmem2flag: flags 63, reg 8 size 4, memsize 4
instrument_addorsub: arith ins is SUB (0xb7ff33fb)
instrument_addorsub: op1 is reg (9) and op2 is immediate
instrument_test: op1 and op2 of are registers 3(edi), 3(edi)
17 EFLAGS eflags, 1, 0
LEA: base reg is 4(esi) index reg invalid, dst 4(esi)
instrument_addorsub: arith ins is SUB (0xb7ff3418)
instrument_addorsub: op1 is reg (10) and op2 is immediate
instrument_test: op1 is mem and op2 is register
instrument_taint_regmem2flag: flags 59, reg 10 size 4, memsize 4
instrument_addorsub: arith ins is SUB (0xb7ff3424)
instrument_addorsub: op1 is reg (10) and op2 is immediate
instrument_addorsub: arith ins is ADD (0xb7ff3427)
instrument_addorsub: op1 is reg (3) and op2 is immediate
instrument_addorsub: arith ins is ADD (0xb7ff342a)
instrument_addorsub: op1 is mem and op2 is register
instrument_addorsub: arith ins is ADD (0xb7ff342d)
instrument_addorsub: op1 is reg (8) and op2 is immediate
instrument_test: op1 is mem and op2 is register
instrument_taint_regmem2flag: flags 59, reg 10 size 4, memsize 4
instrument_test: op1 and op2 of are registers 9(ecx), 9(ecx)
17 EFLAGS eflags, 1, 0
[movx] 0xb7ff3443 movzx ecx, byte ptr [ebp-0x54]
LEA: base reg is 10(eax) index reg invalid, dst 8(edx)
instrument_addorsub: arith ins is ADD (0xb7ff3457)
instrument_addorsub: op1 is reg (10) and op2 is immediate
instrument_test: op1 is mem and op2 is register
instrument_taint_regmem2flag: flags 63, reg 8 size 4, memsize 4
instrument_addorsub: arith ins is SUB (0xb7ff3480)
instrument_addorsub: op1 is reg (8) and op2 is immediate
instrument_test: op1 is reg and op2 is imm
instrument_addorsub: arith ins is ADD (0xb7ff348a)
instrument_addorsub: op1 is reg (9) and op2 is immediate
instrument_addorsub: arith ins is SUB (0xb7ff348d)
instrument_addorsub: op1 is register and op2 is mem
instrument_test: op1 is mem and op2 is register
instrument_taint_regmem2flag: flags 63, reg 8 size 4, memsize 4
instrument_addorsub: arith ins is SUB (0xb7ff349f)
instrument_addorsub: op1 and op2 of Arith are registers: 9 (ecx), 8 (edx)
[movx] 0xb7ff34a5 movzx ecx, byte ptr [ebp-0x54]
instrument_addorsub: arith ins is ADD (0xb7ff34b3)
instrument_addorsub: op1 is reg (3) and op2 is immediate
0xb7ff34b6: not instrument noop data16 nop 
instrument_addorsub: arith ins is ADD (0xb7ff34bb)
instrument_addorsub: op1 is reg (10) and op2 is immediate
instrument_addorsub: arith ins is ADD (0xb7ff34be)
instrument_addorsub: op1 and op2 of Arith are registers: 9 (ecx), 3 (edi)
instrument_addorsub: arith ins is SUB (0xb7ff34c3)
instrument_addorsub: op1 is reg (8) and op2 is immediate
instrument_addorsub: arith ins is ADD (0xb7ff346a)
instrument_addorsub: op1 is reg (9) and op2 is immediate
instrument_addorsub: arith ins is SUB (0xb7ff346d)
instrument_addorsub: op1 is register and op2 is mem
instrument_addorsub: arith ins is ADD (0xb7ff3474)
instrument_addorsub: op1 is register and op2 is mem
instrument_test: op1 is mem and op2 is register
instrument_taint_regmem2flag: flags 63, reg 8 size 4, memsize 4
instrument_addorsub: arith ins is SUB (0xb7ff3480)
instrument_addorsub: op1 is reg (8) and op2 is immediate
instrument_test: op1 is reg and op2 is imm
instrument_addorsub: arith ins is ADD (0xb7ff348a)
instrument_addorsub: op1 is reg (9) and op2 is immediate
instrument_addorsub: arith ins is SUB (0xb7ff348d)
instrument_addorsub: op1 is register and op2 is mem
instrument_test: op1 is mem and op2 is register
instrument_taint_regmem2flag: flags 63, reg 8 size 4, memsize 4
instrument_addorsub: arith ins is SUB (0xb7ff349f)
instrument_addorsub: op1 and op2 of Arith are registers: 9 (ecx), 8 (edx)
[movx] 0xb7ff34a5 movzx ecx, byte ptr [ebp-0x54]
instrument_addorsub: arith ins is ADD (0xb7ff34b3)
instrument_addorsub: op1 is reg (3) and op2 is immediate
0xb7ff34b6: not instrument noop data16 nop 
instrument_addorsub: arith ins is ADD (0xb7ff34bb)
instrument_addorsub: op1 is reg (10) and op2 is immediate
instrument_addorsub: arith ins is ADD (0xb7ff34be)
instrument_addorsub: op1 and op2 of Arith are registers: 9 (ecx), 3 (edi)
instrument_addorsub: arith ins is SUB (0xb7ff34c3)
instrument_addorsub: op1 is reg (8) and op2 is immediate
LEA: base reg is 5(ebp) index reg invalid, dst 6(esp)
instrument_addorsub: arith ins is ADD (0xb7ff34bb)
instrument_addorsub: op1 is reg (10) and op2 is immediate
instrument_addorsub: arith ins is ADD (0xb7ff34be)
instrument_addorsub: op1 and op2 of Arith are registers: 9 (ecx), 3 (edi)
instrument_addorsub: arith ins is SUB (0xb7ff34c3)
instrument_addorsub: op1 is reg (8) and op2 is immediate
LEA: base reg is 5(ebp) index reg invalid, dst 6(esp)
instrument_addorsub: arith ins is SUB (0xb7fe6506)
instrument_addorsub: op1 is reg (6) and op2 is immediate
instrument_test: op1 and op2 of are registers 10(eax), 10(eax)
17 EFLAGS eflags, 1, 0
LEA: index reg is 3(edi) base reg invalid, dst 10(eax)
mul instruction: mul edx
imul instruction: imul edx, edx, 0x3c0
num operands is 4
instrument_addorsub: arith ins is AND (0xb7ff39cc)
instrument_addorsub: op1 and op2 of Arith are registers: 3 (edi), 10 (eax)
instrument_test: op1 is reg and op2 is imm
0xb7ff5d61: not instrument an interrupt
instrument_test: op1 is reg and op2 is imm
instrument_test: op1 is reg and op2 is imm
instrument_test: op1 is mem and op2 is register
instrument_taint_regmem2flag: flags 63, reg 10 size 4, memsize 4
instrument mov is mem read: reg: 8 (edx), size of mem read is 4
instrument_addorsub: arith ins is ADD (0xb7ff3a18)
instrument_addorsub: op1 and op2 of Arith are registers: 10 (eax), 3 (edi)
instrument_addorsub: arith ins is ADD (0xb7ff3a20)
instrument_addorsub: op1 and op2 of Arith are registers: 4 (esi), 8 (edx)
instrument_addorsub: arith ins is ADD (0xb7ff3a2e)
instrument_addorsub: op1 is reg (6) and op2 is immediate
instrument_test: op1 and op2 of are registers 10(eax), 10(eax)
17 EFLAGS eflags, 1, 0
LEA: base reg is 7(ebx) index reg invalid, dst 8(edx)
LEA: base reg is 7(ebx) index reg invalid, dst 8(edx)
instrument_addorsub: arith ins is XOR (0xb7fe6570)
instrument_addorsub: op1 and op2 of Arith are registers: 8 (edx), 8 (edx)
handling reg reset
instrument_test: op1 and op2 of are registers 3(edi), 3(edi)
17 EFLAGS eflags, 1, 0
LEA: base reg is 4(esi) index reg invalid, dst 4(esi)
instrument_addorsub: arith ins is ADD (0xb7fe65a0)
instrument_addorsub: op1 is reg (8) and op2 is immediate
instrument_test: op1 and op2 of are registers 8(edx), 3(edi)
17 EFLAGS eflags, 1, 0
instrument_addorsub: arith ins is ADD (0xb7fe65a0)
instrument_addorsub: op1 is reg (8) and op2 is immediate
instrument_test: op1 and op2 of are registers 8(edx), 3(edi)
17 EFLAGS eflags, 1, 0
instrument_test: op1 and op2 of are registers 3(edi), 3(edi)
17 EFLAGS eflags, 1, 0
[movx] 0xb7fe65c8 movzx eax, byte ptr [edi+0x194]
instrument_addorsub: arith ins is AND (0xb7fe65cf)
instrument_addorsub: op1 is reg (10) and op2 is immediate
instrument_test: op1 is reg and op2 is imm
instrument_test: op1 and op2 of are registers 10(eax), 10(eax)
17 EFLAGS eflags, 1, 0
LEA: base reg is 3(edi) index reg invalid, dst 10(eax)
instrument_addorsub: arith ins is ADD (0xb7fe65f4)
instrument_addorsub: op1 is register and op2 is mem
LEA: base reg is 7(ebx) index reg invalid, dst 9(ecx)
instrument_test: op1 and op2 of are registers 10(eax), 10(eax)
17 EFLAGS eflags, 1, 0
LEA: base reg is 3(edi) index reg invalid, dst 10(eax)
instrument_addorsub: arith ins is ADD (0xb7fe672d)
instrument_addorsub: op1 is register and op2 is mem
LEA: base reg is 7(ebx) index reg invalid, dst 9(ecx)
instrument_test: op1 and op2 of are registers 4(esi), 4(esi)
17 EFLAGS eflags, 1, 0
instrument_test: op1 is mem and op2 is imm
instrument_addorsub: arith ins is XOR (0xb7ff60be)
instrument_addorsub: op1 and op2 of Arith are registers: 9 (ecx), 9 (ecx)
handling reg reset
instrument_addorsub: arith ins is OR (0xb7ff60c9)
instrument_addorsub: op1 and op2 of Arith are registers: 8 (edx), 9 (ecx)
instrument_addorsub: arith ins is AND (0xb7ff60cb)
instrument_addorsub: op1 is reg (3) and op2 is immediate
instrument_addorsub: arith ins is XOR (0xb7ff60d4)
instrument_addorsub: op1 is register and op2 is mem
instrument_addorsub: arith ins is XOR (0xb7ff60dc)
instrument_addorsub: op1 and op2 of Arith are registers: 22 (cl), 25 (dl)
instrument_test: op1 and op2 of are registers 25(dl), 22(cl)
17 EFLAGS eflags, 1, 0
instrument_test: op1 is reg and op2 is imm
instrument_test: op1 and op2 of are registers 25(dl), 22(cl)
17 EFLAGS eflags, 1, 0
instrument_test: op1 is reg and op2 is imm
instrument_addorsub: arith ins is ADD (0xb7ff611d)
instrument_addorsub: op1 and op2 of Arith are registers: 5 (ebp), 9 (ecx)
instrument_addorsub: arith ins is XOR (0xb7ff611f)
instrument_addorsub: op1 and op2 of Arith are registers: 5 (ebp), 9 (ecx)
instrument_addorsub: arith ins is ADD (0xb7ff6121)
instrument_addorsub: op1 and op2 of Arith are registers: 3 (edi), 9 (ecx)
LEA: base reg is 10(eax) index reg invalid, dst 10(eax)
instrument_addorsub: arith ins is OR (0xb7ff612e)
instrument_addorsub: op1 is reg (5) and op2 is immediate
instrument_addorsub: arith ins is ADD (0xb7ff6134)
instrument_addorsub: op1 is reg (5) and op2 is immediate
instrument_addorsub: arith ins is XOR (0xb7ff6142)
instrument_addorsub: op1 and op2 of Arith are registers: 7 (ebx), 8 (edx)
instrument_addorsub: arith ins is ADD (0xb7ff6146)
instrument_addorsub: op1 and op2 of Arith are registers: 4 (esi), 7 (ebx)
instrument_addorsub: arith ins is XOR (0xb7ff6155)
instrument_addorsub: op1 and op2 of Arith are registers: 4 (esi), 7 (ebx)
instrument_addorsub: arith ins is ADD (0xb7ff6157)
instrument_addorsub: op1 and op2 of Arith are registers: 5 (ebp), 9 (ecx)
instrument_addorsub: arith ins is OR (0xb7ff6159)
instrument_addorsub: op1 is reg (4) and op2 is immediate
instrument_addorsub: arith ins is ADD (0xb7ff615f)
instrument_addorsub: op1 is reg (4) and op2 is immediate
instrument_addorsub: arith ins is XOR (0xb7ff6168)
instrument_addorsub: op1 and op2 of Arith are registers: 5 (ebp), 9 (ecx)
instrument_addorsub: arith ins is ADD (0xb7ff616a)
instrument_addorsub: op1 and op2 of Arith are registers: 3 (edi), 9 (ecx)
LEA: base reg is 10(eax) index reg invalid, dst 10(eax)
instrument_addorsub: arith ins is OR (0xb7ff6177)
instrument_addorsub: op1 is reg (5) and op2 is immediate
instrument_addorsub: arith ins is ADD (0xb7ff617d)
instrument_addorsub: op1 is reg (5) and op2 is immediate
instrument_addorsub: arith ins is XOR (0xb7ff618b)
instrument_addorsub: op1 and op2 of Arith are registers: 7 (ebx), 8 (edx)
instrument_addorsub: arith ins is ADD (0xb7ff618f)
instrument_addorsub: op1 and op2 of Arith are registers: 4 (esi), 7 (ebx)
instrument_addorsub: arith ins is XOR (0xb7ff619e)
instrument_addorsub: op1 and op2 of Arith are registers: 4 (esi), 7 (ebx)
instrument_addorsub: arith ins is ADD (0xb7ff61a0)
instrument_addorsub: op1 and op2 of Arith are registers: 5 (ebp), 9 (ecx)
instrument_addorsub: arith ins is OR (0xb7ff61a2)
instrument_addorsub: op1 is reg (4) and op2 is immediate
instrument_addorsub: arith ins is ADD (0xb7ff61a8)
instrument_addorsub: op1 is reg (4) and op2 is immediate
instrument_addorsub: arith ins is XOR (0xb7ff61ad)
instrument_addorsub: op1 and op2 of Arith are registers: 5 (ebp), 9 (ecx)
instrument_addorsub: arith ins is ADD (0xb7ff61af)
instrument_addorsub: op1 and op2 of Arith are registers: 3 (edi), 9 (ecx)
LEA: base reg is 10(eax) index reg invalid, dst 10(eax)
instrument_addorsub: arith ins is OR (0xb7ff61bc)
instrument_addorsub: op1 is reg (5) and op2 is immediate
instrument_addorsub: arith ins is ADD (0xb7ff61c2)
instrument_addorsub: op1 is reg (5) and op2 is immediate
instrument_addorsub: arith ins is XOR (0xb7ff61cc)
instrument_addorsub: op1 and op2 of Arith are registers: 7 (ebx), 8 (edx)
instrument_addorsub: arith ins is ADD (0xb7ff61d0)
instrument_addorsub: op1 and op2 of Arith are registers: 4 (esi), 7 (ebx)
instrument_addorsub: arith ins is XOR (0xb7ff61db)
instrument_addorsub: op1 and op2 of Arith are registers: 4 (esi), 7 (ebx)
instrument_addorsub: arith ins is ADD (0xb7ff61dd)
instrument_addorsub: op1 and op2 of Arith are registers: 5 (ebp), 9 (ecx)
instrument_addorsub: arith ins is OR (0xb7ff61df)
instrument_addorsub: op1 is reg (4) and op2 is immediate
instrument_addorsub: arith ins is ADD (0xb7ff61e5)
instrument_addorsub: op1 is reg (4) and op2 is immediate
instrument_addorsub: arith ins is XOR (0xb7ff61ea)
instrument_addorsub: op1 and op2 of Arith are registers: 5 (ebp), 9 (ecx)
instrument_addorsub: arith ins is ADD (0xb7ff61ec)
instrument_addorsub: op1 and op2 of Arith are registers: 3 (edi), 9 (ecx)
LEA: base reg is 10(eax) index reg invalid, dst 10(eax)
instrument_addorsub: arith ins is OR (0xb7ff61f5)
instrument_addorsub: op1 is reg (5) and op2 is immediate
instrument_addorsub: arith ins is ADD (0xb7ff61fb)
instrument_addorsub: op1 is reg (5) and op2 is immediate
instrument_addorsub: arith ins is XOR (0xb7ff6205)
instrument_addorsub: op1 and op2 of Arith are registers: 7 (ebx), 8 (edx)
instrument_addorsub: arith ins is ADD (0xb7ff6209)
instrument_addorsub: op1 and op2 of Arith are registers: 4 (esi), 7 (ebx)
instrument_addorsub: arith ins is XOR (0xb7ff6214)
instrument_addorsub: op1 and op2 of Arith are registers: 4 (esi), 7 (ebx)
instrument_addorsub: arith ins is ADD (0xb7ff6216)
instrument_addorsub: op1 and op2 of Arith are registers: 5 (ebp), 9 (ecx)
instrument_addorsub: arith ins is OR (0xb7ff6218)
instrument_addorsub: op1 is reg (4) and op2 is immediate
instrument_addorsub: arith ins is ADD (0xb7ff621e)
instrument_addorsub: op1 is reg (4) and op2 is immediate
instrument_addorsub: arith ins is SUB (0xb7ff6227)
instrument_addorsub: op1 is reg (10) and op2 is immediate
instrument_test: op1 and op2 of are registers 28(bl), 28(bl)
17 EFLAGS eflags, 1, 0
instrument_test: op1 and op2 of are registers 29(bh), 29(bh)
17 EFLAGS eflags, 1, 0
instrument_addorsub: arith ins is XOR (0xb7ff611f)
instrument_addorsub: op1 and op2 of Arith are registers: 5 (ebp), 9 (ecx)
instrument_addorsub: arith ins is ADD (0xb7ff6121)
instrument_addorsub: op1 and op2 of Arith are registers: 3 (edi), 9 (ecx)
LEA: base reg is 10(eax) index reg invalid, dst 10(eax)
instrument_addorsub: arith ins is OR (0xb7ff612e)
instrument_addorsub: op1 is reg (5) and op2 is immediate
instrument_addorsub: arith ins is ADD (0xb7ff6134)
instrument_addorsub: op1 is reg (5) and op2 is immediate
instrument_addorsub: arith ins is XOR (0xb7ff6142)
instrument_addorsub: op1 and op2 of Arith are registers: 7 (ebx), 8 (edx)
instrument_addorsub: arith ins is ADD (0xb7ff6146)
instrument_addorsub: op1 and op2 of Arith are registers: 4 (esi), 7 (ebx)
instrument_addorsub: arith ins is SUB (0xb7ff6242)
instrument_addorsub: op1 is reg (10) and op2 is immediate
instrument_test: op1 and op2 of are registers 22(cl), 25(dl)
17 EFLAGS eflags, 1, 0
instrument_test: op1 is reg and op2 is imm
instrument_test: op1 and op2 of are registers 23(ch), 25(dl)
17 EFLAGS eflags, 1, 0
instrument_test: op1 is reg and op2 is imm
instrument_test: op1 and op2 of are registers 22(cl), 25(dl)
17 EFLAGS eflags, 1, 0
instrument_test: op1 is reg and op2 is imm
instrument_addorsub: arith ins is XOR (0xb7ff626a)
instrument_addorsub: op1 and op2 of Arith are registers: 10 (eax), 10 (eax)
handling reg reset
instrument_test: op1 and op2 of are registers 10(eax), 10(eax)
17 EFLAGS eflags, 1, 0
LEA: base reg is 10(eax) index reg invalid, dst 8(edx)
instrument_addorsub: arith ins is ADD (0xb7fe6648)
instrument_addorsub: op1 is reg (10) and op2 is immediate
instrument_addorsub: arith ins is AND (0xb7fe664b)
instrument_addorsub: op1 is reg (10) and op2 is immediate
instrument_addorsub: arith ins is SUB (0xb7fe664e)
instrument_addorsub: op1 and op2 of Arith are registers: 6 (esp), 10 (eax)
LEA: base reg is 6(esp) index reg invalid, dst 10(eax)
instrument_addorsub: arith ins is AND (0xb7fe6654)
instrument_addorsub: op1 is reg (10) and op2 is immediate
[movx] 0xb7fe6669 movzx eax, byte ptr [esi]
instrument_test: op1 and op2 of are registers 19(al), 19(al)
17 EFLAGS eflags, 1, 0
LEA: base reg is 4(esi) index reg invalid, dst 4(esi)
instrument_addorsub: arith ins is SUB (0xb7fe6680)
instrument_addorsub: op1 is reg (10) and op2 is immediate
instrument_test: op1 is reg and op2 is imm
instrument_addorsub: arith ins is ADC (0xb7fe6685)
instrument_addorsub: op1 is reg (8) and op2 is immediate
instrument_addorsub: arith ins is ADD (0xb7fe6688)
instrument_addorsub: op1 is reg (4) and op2 is immediate
[movx] 0xb7fe668b movzx eax, byte ptr [esi]
instrument_test: op1 and op2 of are registers 19(al), 19(al)
17 EFLAGS eflags, 1, 0
LEA: index reg is 8(edx) base reg invalid, dst 10(eax)
instrument_addorsub: arith ins is SUB (0xb7fe6680)
instrument_addorsub: op1 is reg (10) and op2 is immediate
instrument_test: op1 is reg and op2 is imm
instrument_addorsub: arith ins is ADC (0xb7fe6685)
instrument_addorsub: op1 is reg (8) and op2 is immediate
instrument_addorsub: arith ins is ADD (0xb7fe6688)
instrument_addorsub: op1 is reg (4) and op2 is immediate
[movx] 0xb7fe668b movzx eax, byte ptr [esi]
instrument_test: op1 and op2 of are registers 19(al), 19(al)
17 EFLAGS eflags, 1, 0
LEA: index reg is 8(edx) base reg invalid, dst 10(eax)
instrument_test: op1 and op2 of are registers 10(eax), 10(eax)
17 EFLAGS eflags, 1, 0
LEA: base reg is 7(ebx) index reg invalid, dst 8(edx)
LEA: base reg is 7(ebx) index reg invalid, dst 8(edx)
instrument_addorsub: arith ins is ADD (0xb7fe5afb)
instrument_addorsub: op1 is reg (7) and op2 is immediate
instrument_addorsub: arith ins is SUB (0xb7fe5b01)
instrument_addorsub: op1 is reg (6) and op2 is immediate
LEA: base reg is 5(ebp) index reg invalid, dst 10(eax)
0xb7fe5b17: not instrument noop nop 
instrument_addorsub: arith ins is SUB (0xb7ff4054)
instrument_addorsub: op1 is reg (6) and op2 is immediate
instrument_addorsub: arith ins is ADD (0xb7ff4060)
instrument_addorsub: op1 is reg (7) and op2 is immediate
[movx] 0xb7ff4066 movzx edi, byte ptr [ebp]
instrument_test: op1 and op2 of are registers 19(al), 19(al)
17 EFLAGS eflags, 1, 0
instrument_test: op1 and op2 of are registers 10(eax), 10(eax)
17 EFLAGS eflags, 1, 0
[movx] 0xb7ff407e movzx ecx, byte ptr [eax]
instrument_test: op1 and op2 of are registers 22(cl), 22(cl)
17 EFLAGS eflags, 1, 0
0xb7ff4087: not instrument noop nop 
instrument_test: op1 and op2 of are registers 25(dl), 22(cl)
17 EFLAGS eflags, 1, 0
instrument_test: op1 and op2 of are registers 25(dl), 25(dl)
17 EFLAGS eflags, 1, 0
instrument_addorsub: arith ins is ADD (0xb7ff40a2)
instrument_addorsub: op1 is reg (4) and op2 is immediate
[movx] 0xb7ff40a5 movzx ecx, byte ptr [esi]
instrument_test: op1 and op2 of are registers 22(cl), 22(cl)
17 EFLAGS eflags, 1, 0
instrument_addorsub: arith ins is ADD (0xb7ff4090)
instrument_addorsub: op1 is reg (10) and op2 is immediate
[movx] 0xb7ff4093 movzx edx, byte ptr [eax]
instrument_test: op1 and op2 of are registers 25(dl), 25(dl)
17 EFLAGS eflags, 1, 0
instrument_test: op1 and op2 of are registers 25(dl), 22(cl)
17 EFLAGS eflags, 1, 0
instrument_test: op1 and op2 of are registers 25(dl), 25(dl)
17 EFLAGS eflags, 1, 0
instrument_addorsub: arith ins is ADD (0xb7ff40a2)
instrument_addorsub: op1 is reg (4) and op2 is immediate
[movx] 0xb7ff40a5 movzx ecx, byte ptr [esi]
instrument_test: op1 and op2 of are registers 22(cl), 22(cl)
17 EFLAGS eflags, 1, 0
instrument_addorsub: arith ins is XOR (0xb7ff40ac)
instrument_addorsub: op1 and op2 of Arith are registers: 10 (eax), 10 (eax)
handling reg reset
instrument_addorsub: arith ins is ADD (0xb7ff40b8)
instrument_addorsub: op1 is reg (6) and op2 is immediate
LEA: base reg is 4(esi) index reg invalid, dst 10(eax)
instrument_addorsub: arith ins is ADD (0xb7ff40b8)
instrument_addorsub: op1 is reg (6) and op2 is immediate
instrument_test: op1 and op2 of are registers 10(eax), 10(eax)
17 EFLAGS eflags, 1, 0
instrument_test: op1 and op2 of are registers 23(ch), 23(ch)
17 EFLAGS eflags, 1, 0
instrument_test: op1 is reg and op2 is imm
instrument_addorsub: arith ins is SUB (0xb7ff6356)
instrument_addorsub: op1 is register and op2 is mem
instrument_test: op1 and op2 of are registers 10(eax), 10(eax)
17 EFLAGS eflags, 1, 0
instrument_test: op1 is reg and op2 is imm
instrument_test: op1 is mem and op2 is imm
LEA: base reg is 10(eax) index reg invalid, dst 10(eax)
LEA: base reg is 4(esi) index reg invalid, dst 4(esi)
LEA: base reg is 10(eax) index reg invalid, dst 4(esi)
instrument_test: op1 and op2 of are registers 10(eax), 10(eax)
17 EFLAGS eflags, 1, 0
instrument_test: op1 is mem and op2 is register
instrument_taint_regmem2flag: flags 63, reg 3 size 4, memsize 4
instrument_addorsub: arith ins is SUB (0xb7ff67f0)
instrument_addorsub: op1 is reg (9) and op2 is immediate
instrument_test: op1 is mem and op2 is register
instrument_taint_regmem2flag: flags 63, reg 10 size 4, memsize 4
instrument_test: op1 is mem and op2 is register
instrument_taint_regmem2flag: flags 63, reg 10 size 4, memsize 4
instrument_test: op1 is mem and op2 is register
instrument_taint_regmem2flag: flags 63, reg 10 size 4, memsize 4
instrument_test: op1 is mem and op2 is register
instrument_taint_regmem2flag: flags 63, reg 10 size 4, memsize 4
instrument_test: op1 is mem and op2 is register
instrument_taint_regmem2flag: flags 63, reg 10 size 4, memsize 4
instrument_test: op1 is mem and op2 is register
instrument_taint_regmem2flag: flags 63, reg 10 size 4, memsize 4
instrument_test: op1 is mem and op2 is register
instrument_taint_regmem2flag: flags 63, reg 10 size 4, memsize 4
instrument_test: op1 is mem and op2 is register
instrument_taint_regmem2flag: flags 63, reg 10 size 4, memsize 4
instrument_addorsub: arith ins is ADD (0xb7ff6831)
instrument_addorsub: op1 is reg (4) and op2 is immediate
instrument_addorsub: arith ins is ADD (0xb7ff6834)
instrument_addorsub: op1 is reg (8) and op2 is immediate
instrument_test: op1 is reg and op2 is imm
instrument_addorsub: arith ins is ADD (0xb7ff6841)
instrument_addorsub: op1 is reg (7) and op2 is immediate
instrument_addorsub: arith ins is ADD (0xb7ff6847)
instrument_addorsub: op1 is register and op2 is mem
instrument_addorsub: arith ins is ADD (0xb7ff684a)
instrument_addorsub: op1 and op2 of Arith are registers: 8 (edx), 9 (ecx)
instrument_addorsub: arith ins is ADD (0xb7ff684c)
instrument_addorsub: op1 and op2 of Arith are registers: 4 (esi), 9 (ecx)
instrument_test: op1 and op2 of are registers 10(eax), 9(ecx)
17 EFLAGS eflags, 1, 0
instrument_test: op1 and op2 of are registers 10(eax), 9(ecx)
17 EFLAGS eflags, 1, 0
instrument_test: op1 and op2 of are registers 10(eax), 9(ecx)
17 EFLAGS eflags, 1, 0
[movx] 0xb7ff67bc movzx eax, word ptr [esi-0x3]
[movx] 0xb7ff67c0 movzx ecx, word ptr [edx-0x3]
instrument_test: op1 and op2 of are registers 19(al), 22(cl)
17 EFLAGS eflags, 1, 0
instrument_test: op1 and op2 of are registers 10(eax), 9(ecx)
17 EFLAGS eflags, 1, 0
[movx] 0xb7ff67d4 movzx eax, byte ptr [esi-0x1]
instrument_test: op1 is mem and op2 is register
instrument_taint_regmem2flag: flags 63, reg 19 size 1, memsize 1
instrument_addorsub: arith ins is XOR (0xb7ff67e2)
instrument_addorsub: op1 and op2 of Arith are registers: 10 (eax), 10 (eax)
handling reg reset
instrument_test: op1 and op2 of are registers 10(eax), 10(eax)
17 EFLAGS eflags, 1, 0
instrument_test: op1 and op2 of are registers 4(esi), 4(esi)
17 EFLAGS eflags, 1, 0
instrument_test: op1 is mem and op2 is register
instrument_taint_regmem2flag: flags 63, reg 9 size 4, memsize 4
instrument_addorsub: arith ins is XOR (0xb7fe5d5d)
instrument_addorsub: op1 and op2 of Arith are registers: 10 (eax), 10 (eax)
handling reg reset
instrument_addorsub: arith ins is ADD (0xb7ff62ed)
instrument_addorsub: op1 is reg (10) and op2 is immediate
instrument_addorsub: arith ins is SUB (0xb7ff62f0)
instrument_addorsub: op1 and op2 of Arith are registers: 8 (edx), 9 (ecx)
instrument_addorsub: arith ins is ADD (0xb7ff62f2)
instrument_addorsub: op1 is reg (9) and op2 is immediate
instrument_addorsub: arith ins is XOR (0xb7ff62fb)
instrument_addorsub: op1 and op2 of Arith are registers: 8 (edx), 9 (ecx)
instrument_addorsub: arith ins is AND (0xb7ff62fd)
instrument_addorsub: op1 is reg (8) and op2 is immediate
instrument_addorsub: arith ins is ADD (0xb7ff6307)
instrument_addorsub: op1 is reg (10) and op2 is immediate
instrument_addorsub: arith ins is SUB (0xb7ff630a)
instrument_addorsub: op1 and op2 of Arith are registers: 8 (edx), 9 (ecx)
instrument_addorsub: arith ins is ADD (0xb7ff630c)
instrument_addorsub: op1 is reg (9) and op2 is immediate
instrument_addorsub: arith ins is XOR (0xb7ff6315)
instrument_addorsub: op1 and op2 of Arith are registers: 8 (edx), 9 (ecx)
instrument_addorsub: arith ins is AND (0xb7ff6317)
instrument_addorsub: op1 is reg (8) and op2 is immediate
instrument_addorsub: arith ins is ADD (0xb7ff6321)
instrument_addorsub: op1 is reg (10) and op2 is immediate
instrument_addorsub: arith ins is SUB (0xb7ff6324)
instrument_addorsub: op1 and op2 of Arith are registers: 8 (edx), 9 (ecx)
instrument_addorsub: arith ins is ADD (0xb7ff6326)
instrument_addorsub: op1 is reg (9) and op2 is immediate
instrument_addorsub: arith ins is XOR (0xb7ff632f)
instrument_addorsub: op1 and op2 of Arith are registers: 8 (edx), 9 (ecx)
instrument_addorsub: arith ins is AND (0xb7ff6331)
instrument_addorsub: op1 is reg (8) and op2 is immediate
instrument_test: op1 and op2 of are registers 4(esi), 4(esi)
17 EFLAGS eflags, 1, 0
instrument_test: op1 is mem and op2 is register
instrument_taint_regmem2flag: flags 63, reg 3 size 4, memsize 4
instrument_test: op1 and op2 of are registers 10(eax), 10(eax)
17 EFLAGS eflags, 1, 0
LEA: index reg is 10(eax) base reg invalid, dst 8(edx)
LEA: base reg is 8(edx) index reg invalid, dst 10(eax)
instrument_addorsub: arith ins is ADD (0xb7fe5c4f)
instrument_addorsub: op1 and op2 of Arith are registers: 10 (eax), 4 (esi)
instrument_addorsub: arith ins is ADD (0xb7fe5c51)
instrument_addorsub: op1 is register and op2 is mem
instrument_test: op1 and op2 of are registers 10(eax), 10(eax)
17 EFLAGS eflags, 1, 0
instrument_test: op1 is mem and op2 is register
instrument_taint_regmem2flag: flags 63, reg 4 size 4, memsize 4
instrument_addorsub: arith ins is XOR (0xb7fe5c9c)
instrument_addorsub: op1 and op2 of Arith are registers: 8 (edx), 8 (edx)
handling reg reset
instrument_test: op1 is mem and op2 is imm
instrument_addorsub: arith ins is XOR (0xb7fe5ca7)
instrument_addorsub: op1 and op2 of Arith are registers: 10 (eax), 10 (eax)
handling reg reset
instrument_addorsub: arith ins is ADD (0xb7fe5ca9)
instrument_addorsub: op1 and op2 of Arith are registers: 8 (edx), 8 (edx)
instrument_test: op1 and op2 of are registers 3(edi), 3(edi)
17 EFLAGS eflags, 1, 0
LEA: base reg is 4(esi) index reg invalid, dst 4(esi)
instrument_addorsub: arith ins is ADD (0xb7fe5cbc)
instrument_addorsub: op1 is reg (10) and op2 is immediate
instrument_test: op1 and op2 of are registers 10(eax), 3(edi)
17 EFLAGS eflags, 1, 0
instrument_addorsub: arith ins is XOR (0xb7fe5c9c)
instrument_addorsub: op1 and op2 of Arith are registers: 8 (edx), 8 (edx)
handling reg reset
instrument_test: op1 is mem and op2 is imm
instrument_addorsub: arith ins is XOR (0xb7fe5ca7)
instrument_addorsub: op1 and op2 of Arith are registers: 10 (eax), 10 (eax)
handling reg reset
instrument_addorsub: arith ins is ADD (0xb7fe5ca9)
instrument_addorsub: op1 and op2 of Arith are registers: 8 (edx), 8 (edx)
instrument_test: op1 and op2 of are registers 3(edi), 3(edi)
17 EFLAGS eflags, 1, 0
LEA: base reg is 4(esi) index reg invalid, dst 4(esi)
instrument_addorsub: arith ins is ADD (0xb7fe5cbc)
instrument_addorsub: op1 is reg (10) and op2 is immediate
instrument_test: op1 and op2 of are registers 10(eax), 3(edi)
17 EFLAGS eflags, 1, 0
instrument_test: op1 and op2 of are registers 10(eax), 10(eax)
17 EFLAGS eflags, 1, 0
instrument_addorsub: arith ins is ADD (0xb7fe5cbc)
instrument_addorsub: op1 is reg (10) and op2 is immediate
instrument_test: op1 and op2 of are registers 10(eax), 3(edi)
17 EFLAGS eflags, 1, 0
instrument_test: op1 and op2 of are registers 10(eax), 10(eax)
17 EFLAGS eflags, 1, 0
instrument_addorsub: arith ins is ADD (0xb7fe5cda)
instrument_addorsub: op1 and op2 of Arith are registers: 10 (eax), 4 (esi)
instrument_addorsub: arith ins is ADD (0xb7fe5cdc)
instrument_addorsub: op1 and op2 of Arith are registers: 10 (eax), 9 (ecx)
instrument_addorsub: arith ins is ADD (0xb7fe5d0e)
instrument_addorsub: op1 is reg (10) and op2 is immediate
instrument_addorsub: arith ins is ADD (0xb7ff40b8)
instrument_addorsub: op1 is reg (6) and op2 is immediate
LEA: base reg is 5(ebp) index reg invalid, dst 6(esp)
instrument_test: op1 and op2 of are registers 8(edx), 8(edx)
17 EFLAGS eflags, 1, 0
LEA: base reg is 5(ebp) index reg invalid, dst 6(esp)
instrument_addorsub: arith ins is XOR (0xb7fe0d7a)
instrument_addorsub: op1 and op2 of Arith are registers: 8 (edx), 8 (edx)
handling reg reset
instrument_addorsub: arith ins is ADD (0xb7fedca8)
instrument_addorsub: op1 is reg (7) and op2 is immediate
instrument_test: op1 and op2 of are registers 8(edx), 8(edx)
17 EFLAGS eflags, 1, 0
imul instruction: imul eax, edx, 0x4c
num operands is 4
instrument_test: op1 is mem and op2 is imm
instrument_test: op1 and op2 of are registers 9(ecx), 9(ecx)
17 EFLAGS eflags, 1, 0
instrument_test: op1 is mem and op2 is imm
instrument_test: op1 and op2 of are registers 9(ecx), 9(ecx)
17 EFLAGS eflags, 1, 0
imul instruction: imul edx, edx, 0x4c
num operands is 4
LEA: base reg is 7(ebx) index reg invalid, dst 8(edx)
instrument_test: op1 and op2 of are registers 10(eax), 10(eax)
17 EFLAGS eflags, 1, 0
[movx] 0xb7fe0d99 movzx eax, byte ptr [ebx+0x6d4]
instrument_addorsub: arith ins is ADD (0xb7fe0da3)
instrument_addorsub: op1 is mem and op2 is immediate
instrument_addorsub: arith ins is AND (0xb7fe0daa)
instrument_addorsub: op1 is reg (10) and op2 is immediate
instrument_addorsub: arith ins is OR (0xb7fe0dad)
instrument_addorsub: op1 is reg (10) and op2 is immediate
LEA: base reg is 7(ebx) index reg invalid, dst 10(eax)
instrument_addorsub: arith ins is ADD (0xb7fe0dbf)
instrument_addorsub: op1 is mem and op2 is immediate
instrument_addorsub: arith ins is ADC (0xb7fe0dc6)
instrument_addorsub: op1 is mem and op2 is immediate
instrument_test: op1 is mem and op2 is imm
[movx] 0xb7fe0dec movzx edx, word ptr [eax+0x2c]
instrument_addorsub: arith ins is ADD (0xb7fe0df0)
instrument_addorsub: op1 and op2 of Arith are registers: 9 (ecx), 10 (eax)
LEA: base reg is 8(edx) index reg invalid, dst 10(eax)
instrument_addorsub: arith ins is ADD (0xb7fe0e01)
instrument_addorsub: op1 and op2 of Arith are registers: 10 (eax), 9 (ecx)
[movx] 0xb7fe0d99 movzx eax, byte ptr [ebx+0x6d4]
instrument_addorsub: arith ins is ADD (0xb7fe0da3)
instrument_addorsub: op1 is mem and op2 is immediate
instrument_addorsub: arith ins is AND (0xb7fe0daa)
instrument_addorsub: op1 is reg (10) and op2 is immediate
instrument_addorsub: arith ins is OR (0xb7fe0dad)
instrument_addorsub: op1 is reg (10) and op2 is immediate
LEA: base reg is 7(ebx) index reg invalid, dst 10(eax)
instrument_addorsub: arith ins is ADD (0xb7fe0dbf)
instrument_addorsub: op1 is mem and op2 is immediate
instrument_addorsub: arith ins is ADC (0xb7fe0dc6)
instrument_addorsub: op1 is mem and op2 is immediate
instrument_test: op1 is mem and op2 is imm
[movx] 0xb7fe0dec movzx edx, word ptr [eax+0x2c]
instrument_addorsub: arith ins is ADD (0xb7fe0df0)
instrument_addorsub: op1 and op2 of Arith are registers: 9 (ecx), 10 (eax)
LEA: base reg is 8(edx) index reg invalid, dst 10(eax)
instrument_addorsub: arith ins is ADD (0xb7fe0e01)
instrument_addorsub: op1 and op2 of Arith are registers: 10 (eax), 9 (ecx)
instrument_test: op1 and op2 of are registers 10(eax), 10(eax)
17 EFLAGS eflags, 1, 0
[movx] 0xb7fe1e5b movzx eax, al
instrument movx address 0xb7fe1e5b is src reg: 19 into dst reg: 10
[movx] 0xb7fe0dec movzx edx, word ptr [eax+0x2c]
instrument_addorsub: arith ins is ADD (0xb7fe0df0)
instrument_addorsub: op1 and op2 of Arith are registers: 9 (ecx), 10 (eax)
LEA: base reg is 8(edx) index reg invalid, dst 10(eax)
instrument_addorsub: arith ins is ADD (0xb7fe0e01)
instrument_addorsub: op1 and op2 of Arith are registers: 10 (eax), 9 (ecx)
instrument_test: op1 and op2 of are registers 8(edx), 8(edx)
17 EFLAGS eflags, 1, 0
instrument_test: op1 and op2 of are registers 10(eax), 10(eax)
17 EFLAGS eflags, 1, 0
instrument_test: op1 and op2 of are registers 10(eax), 10(eax)
17 EFLAGS eflags, 1, 0
instrument_addorsub: arith ins is SUB (0xb7fe0e10)
instrument_addorsub: op1 is reg (8) and op2 is immediate
instrument_addorsub: arith ins is SUB (0xb7fe0e13)
instrument_addorsub: op1 is reg (10) and op2 is immediate
instrument_test: op1 is reg and op2 is imm
instrument_test: op1 and op2 of are registers 8(edx), 8(edx)
17 EFLAGS eflags, 1, 0
instrument_test: op1 and op2 of are registers 10(eax), 10(eax)
17 EFLAGS eflags, 1, 0
instrument_test: op1 and op2 of are registers 10(eax), 10(eax)
17 EFLAGS eflags, 1, 0
instrument_test: op1 and op2 of are registers 10(eax), 10(eax)
17 EFLAGS eflags, 1, 0
instrument_test: op1 and op2 of are registers 10(eax), 10(eax)
17 EFLAGS eflags, 1, 0
instrument_test: op1 and op2 of are registers 10(eax), 10(eax)
17 EFLAGS eflags, 1, 0
instrument_test: op1 and op2 of are registers 10(eax), 10(eax)
17 EFLAGS eflags, 1, 0
instrument_test: op1 and op2 of are registers 10(eax), 10(eax)
17 EFLAGS eflags, 1, 0
instrument_test: op1 and op2 of are registers 4(esi), 4(esi)
17 EFLAGS eflags, 1, 0
LEA: base reg is 7(ebx) index reg invalid, dst 10(eax)
0xb7ff5cbf: not instrument an interrupt
instrument_test: op1 is reg and op2 is imm
instrument_addorsub: arith ins is ADD (0xb7ff5cd0)
instrument_addorsub: op1 is reg (9) and op2 is immediate
instrument_addorsub: arith ins is XOR (0xb7ff5cd6)
instrument_addorsub: op1 and op2 of Arith are registers: 8 (edx), 8 (edx)
handling reg reset
instrument_addorsub: arith ins is SUB (0xb7ff5cd8)
instrument_addorsub: op1 and op2 of Arith are registers: 8 (edx), 10 (eax)
instrument_addorsub: arith ins is OR (0xb7ff5ce0)
instrument_addorsub: op1 is reg (10) and op2 is immediate
instrument_test: op1 and op2 of are registers 10(eax), 10(eax)
17 EFLAGS eflags, 1, 0
instrument_test: op1 and op2 of are registers 10(eax), 10(eax)
17 EFLAGS eflags, 1, 0
instrument_addorsub: arith ins is XOR (0xb7fe0ed6)
instrument_addorsub: op1 and op2 of Arith are registers: 4 (esi), 4 (esi)
handling reg reset
0xb7fe0ed8: not instrument an rdtsc
instrument_addorsub: arith ins is XOR (0xb7fe0eda)
instrument_addorsub: op1 and op2 of Arith are registers: 9 (ecx), 9 (ecx)
handling reg reset
instrument_test: op1 is mem and op2 is imm
instrument_addorsub: arith ins is SUB (0xb7feb8a8)
instrument_addorsub: op1 is reg (6) and op2 is immediate
LEA: index reg is 10(eax) base reg invalid, dst 3(edi)
LEA: base reg is 3(edi) index reg invalid, dst 10(eax)
instrument_addorsub: arith ins is AND (0xb7feb8be)
instrument_addorsub: op1 is reg (10) and op2 is immediate
instrument_addorsub: arith ins is SUB (0xb7feb8c1)
instrument_addorsub: op1 and op2 of Arith are registers: 6 (esp), 10 (eax)
LEA: base reg is 6(esp) index reg invalid, dst 3(edi)
instrument_addorsub: arith ins is AND (0xb7feb8d0)
instrument_addorsub: op1 is reg (3) and op2 is immediate
LEA: base reg is 3(edi) index reg invalid, dst 10(eax)
[movx] 0xb7feb8d9 movzx eax, byte ptr [ecx+0x194]
instrument_addorsub: arith ins is ADD (0xb7feb8e5)
instrument_addorsub: op1 is reg (7) and op2 is immediate
instrument_addorsub: arith ins is AND (0xb7feb8f4)
instrument_addorsub: op1 is reg (10) and op2 is immediate
instrument_addorsub: arith ins is OR (0xb7feb8f7)
instrument_addorsub: op1 is reg (10) and op2 is immediate
instrument_test: op1 and op2 of are registers 4(esi), 4(esi)
17 EFLAGS eflags, 1, 0
LEA: base reg is 3(edi) index reg invalid, dst 10(eax)
instrument_addorsub: arith ins is ADD (0xb7feb91b)
instrument_addorsub: op1 is reg (9) and op2 is immediate
instrument_addorsub: arith ins is ADD (0xb7feb928)
instrument_addorsub: op1 is reg (10) and op2 is immediate
[movx] 0xb7feb92b movzx edx, byte ptr [esi+0x194]
instrument_addorsub: arith ins is AND (0xb7feb935)
instrument_addorsub: op1 is reg (8) and op2 is immediate
instrument_addorsub: arith ins is OR (0xb7feb938)
instrument_addorsub: op1 is reg (8) and op2 is immediate
instrument_test: op1 is mem and op2 is register
instrument_taint_regmem2flag: flags 63, reg 9 size 4, memsize 4
instrument_addorsub: arith ins is ADD (0xb7feb952)
instrument_addorsub: op1 is reg (4) and op2 is immediate
instrument_addorsub: arith ins is ADD (0xb7feb958)
instrument_addorsub: op1 and op2 of Arith are registers: 10 (eax), 3 (edi)
LEA: base reg is 7(ebx) index reg invalid, dst 10(eax)
instrument_test: op1 and op2 of are registers 3(edi), 3(edi)
17 EFLAGS eflags, 1, 0
instrument_addorsub: arith ins is XOR (0xb7fec346)
instrument_addorsub: op1 and op2 of Arith are registers: 10 (eax), 10 (eax)
handling reg reset
instrument_addorsub: arith ins is ADD (0xb7feb958)
instrument_addorsub: op1 and op2 of Arith are registers: 10 (eax), 3 (edi)
LEA: base reg is 7(ebx) index reg invalid, dst 10(eax)
instrument_test: op1 and op2 of are registers 3(edi), 3(edi)
17 EFLAGS eflags, 1, 0
instrument_test: op1 and op2 of are registers 9(ecx), 9(ecx)
17 EFLAGS eflags, 1, 0
instrument_test: op1 and op2 of are registers 10(eax), 10(eax)
17 EFLAGS eflags, 1, 0
instrument_test: op1 and op2 of are registers 4(esi), 4(esi)
17 EFLAGS eflags, 1, 0
instrument_test: op1 is mem and op2 is register
instrument_taint_regmem2flag: flags 63, reg 10 size 4, memsize 4
[movx] 0xb7febbc1 movzx eax, word ptr [eax+0x15a]
instrument_test: op1 and op2 of are registers 21(ax), 21(ax)
17 EFLAGS eflags, 1, 0
instrument_test: op1 and op2 of are registers 9(ecx), 9(ecx)
17 EFLAGS eflags, 1, 0
instrument_test: op1 and op2 of are registers 10(eax), 10(eax)
17 EFLAGS eflags, 1, 0
instrument_test: op1 is reg and op2 is imm
instrument_addorsub: arith ins is ADD (0xb7feba43)
instrument_addorsub: op1 is register and op2 is mem
instrument_test: op1 and op2 of are registers 10(eax), 10(eax)
17 EFLAGS eflags, 1, 0
LEA: base reg is 5(ebp) index reg invalid, dst 4(esi)
LEA: base reg is 5(ebp) index reg invalid, dst 8(edx)
LEA: base reg is 5(ebp) index reg invalid, dst 9(ecx)
LEA: base reg is 5(ebp) index reg invalid, dst 10(eax)
instrument_addorsub: arith ins is ADD (0xb7fed2f7)
instrument_addorsub: op1 is reg (7) and op2 is immediate
instrument_addorsub: arith ins is SUB (0xb7fed2fd)
instrument_addorsub: op1 is reg (6) and op2 is immediate
instrument_addorsub: arith ins is ADD (0xb7fdfca5)
instrument_addorsub: op1 is reg (9) and op2 is immediate
LEA: base reg is 9(ecx) index reg invalid, dst 10(eax)
LEA: base reg is 6(esp) index reg invalid, dst 10(eax)
LEA: base reg is 6(esp) index reg invalid, dst 9(ecx)
instrument_addorsub: arith ins is XOR (0xb7ff5e8c)
instrument_addorsub: op1 and op2 of Arith are registers: 10 (eax), 10 (eax)
handling reg reset
instrument_test: op1 and op2 of are registers 10(eax), 10(eax)
17 EFLAGS eflags, 1, 0
LEA: base reg is 6(esp) index reg invalid, dst 10(eax)
instrument_addorsub: arith ins is SUB (0xb7feb85a)
instrument_addorsub: op1 is reg (6) and op2 is immediate
[movx] 0xb7feb862 movzx edx, byte ptr [eax+0x194]
instrument_addorsub: arith ins is AND (0xb7feb869)
instrument_addorsub: op1 is reg (8) and op2 is immediate
instrument_test: op1 and op2 of are registers 25(dl), 25(dl)
17 EFLAGS eflags, 1, 0
[movx] 0xb7feb86e movzx edi, dl
instrument movx address 0xb7feb86e is src reg: 25 into dst reg: 3
instrument_addorsub: arith ins is SUB (0xb7fe68d6)
instrument_addorsub: op1 is reg (6) and op2 is immediate
instrument_addorsub: arith ins is ADD (0xb7fe68ea)
instrument_addorsub: op1 is reg (7) and op2 is immediate
instrument_test: op1 and op2 of are registers 10(eax), 10(eax)
17 EFLAGS eflags, 1, 0
instrument_test: op1 is mem and op2 is register
instrument_taint_regmem2flag: flags 63, reg 10 size 4, memsize 4
LEA: base reg is 7(ebx) index reg invalid, dst 10(eax)
imul instruction: imul eax, dword ptr [ebp+0x10], 0x4c
num operands is 4
instrument_test: op1 and op2 of are registers 3(edi), 3(edi)
17 EFLAGS eflags, 1, 0
[movx] 0xb7fe6944 movzx eax, byte ptr [edi+0x195]
instrument_test: op1 is reg and op2 is imm
instrument_test: op1 is reg and op2 is imm
instrument_addorsub: arith ins is ADD (0xb7fee32c)
instrument_addorsub: op1 is reg (7) and op2 is immediate
instrument_addorsub: arith ins is SUB (0xb7fee332)
instrument_addorsub: op1 is reg (6) and op2 is immediate
instrument_test: op1 and op2 of are registers 10(eax), 10(eax)
17 EFLAGS eflags, 1, 0
instrument_test: op1 and op2 of are registers 4(esi), 4(esi)
17 EFLAGS eflags, 1, 0
0xb7fee34f: not instrument noop nop 
instrument_test: op1 and op2 of are registers 10(eax), 10(eax)
17 EFLAGS eflags, 1, 0
instrument_addorsub: arith ins is ADD (0xb7fee371)
instrument_addorsub: op1 is reg (6) and op2 is immediate
instrument_test: op1 and op2 of are registers 4(esi), 4(esi)
17 EFLAGS eflags, 1, 0
instrument_addorsub: arith ins is ADD (0xb7fee380)
instrument_addorsub: op1 is reg (6) and op2 is immediate
instrument_addorsub: arith ins is XOR (0xb7fee383)
instrument_addorsub: op1 and op2 of Arith are registers: 10 (eax), 10 (eax)
handling reg reset
instrument_test: op1 and op2 of are registers 10(eax), 10(eax)
17 EFLAGS eflags, 1, 0
LEA: base reg is 5(ebp) index reg invalid, dst 6(esp)
instrument_test: op1 is mem and op2 is imm
instrument_test: op1 and op2 of are registers 3(edi), 3(edi)
17 EFLAGS eflags, 1, 0
[movx] 0xb7fe6944 movzx eax, byte ptr [edi+0x195]
instrument_test: op1 is reg and op2 is imm
instrument_test: op1 and op2 of are registers 10(eax), 10(eax)
17 EFLAGS eflags, 1, 0
instrument_addorsub: arith ins is ADD (0xb7fe7009)
instrument_addorsub: op1 is register and op2 is mem
instrument_test: op1 and op2 of are registers 3(edi), 3(edi)
17 EFLAGS eflags, 1, 0
[movx] 0xb7fe6944 movzx eax, byte ptr [edi+0x195]
instrument_test: op1 is reg and op2 is imm
instrument_test: op1 is reg and op2 is imm
instrument_test: op1 is mem and op2 is register
instrument_taint_regmem2flag: flags 63, reg 19 size 1, memsize 1
instrument_test: op1 and op2 of are registers 19(al), 19(al)
17 EFLAGS eflags, 1, 0
instrument_addorsub: arith ins is XOR (0xb7ff6284)
instrument_addorsub: op1 and op2 of Arith are registers: 10 (eax), 10 (eax)
handling reg reset
instrument_test: op1 and op2 of are registers 10(eax), 10(eax)
17 EFLAGS eflags, 1, 0
instrument_test: op1 is mem and op2 is imm
instrument_test: op1 and op2 of are registers 9(ecx), 9(ecx)
17 EFLAGS eflags, 1, 0
instrument_addorsub: arith ins is AND (0xb7fe698e)
instrument_addorsub: op1 is reg (10) and op2 is immediate
instrument_test: op1 and op2 of are registers 10(eax), 10(eax)
17 EFLAGS eflags, 1, 0
instrument_test: op1 and op2 of are registers 10(eax), 10(eax)
17 EFLAGS eflags, 1, 0
instrument_addorsub: arith ins is ADD (0xb7fe6b2d)
instrument_addorsub: op1 is reg (10) and op2 is immediate
instrument_test: op1 is mem and op2 is imm
instrument_test: op1 and op2 of are registers 10(eax), 10(eax)
17 EFLAGS eflags, 1, 0
instrument_test: op1 and op2 of are registers 3(edi), 3(edi)
17 EFLAGS eflags, 1, 0
LEA: base reg is 7(ebx) index reg invalid, dst 10(eax)
LEA: base reg is 3(edi) index reg invalid, dst 9(ecx)
instrument_test: op1 is reg and op2 is imm
instrument_test: op1 and op2 of are registers 10(eax), 10(eax)
17 EFLAGS eflags, 1, 0
instrument_test: op1 and op2 of are registers 3(edi), 3(edi)
17 EFLAGS eflags, 1, 0
LEA: base reg is 3(edi) index reg invalid, dst 9(ecx)
instrument_test: op1 is reg and op2 is imm
instrument_test: op1 and op2 of are registers 10(eax), 10(eax)
17 EFLAGS eflags, 1, 0
instrument_test: op1 is mem and op2 is imm
instrument_test: op1 is mem and op2 is imm
instrument_test: op1 and op2 of are registers 9(ecx), 9(ecx)
17 EFLAGS eflags, 1, 0
[movx] 0xb7fe6e73 movzx eax, byte ptr [ecx+0x194]
instrument_addorsub: arith ins is AND (0xb7fe6e7a)
instrument_addorsub: op1 is reg (10) and op2 is immediate
instrument_test: op1 is reg and op2 is imm
LEA: base reg is 9(ecx) index reg invalid, dst 3(edi)
instrument_test: op1 is reg and op2 is imm
instrument_test: op1 is mem and op2 is imm
instrument_test: op1 and op2 of are registers 10(eax), 10(eax)
17 EFLAGS eflags, 1, 0
instrument mov is mem read: reg: 10 (eax), size of mem read is 4
LEA: base reg is 5(ebp) index reg invalid, dst 10(eax)
LEA: base reg is 5(ebp) index reg invalid, dst 10(eax)
LEA: base reg is 7(ebx) index reg invalid, dst 10(eax)
LEA: base reg is 5(ebp) index reg invalid, dst 8(edx)
instrument_addorsub: arith ins is AND (0xb7fe6bb8)
instrument_addorsub: op1 is reg (10) and op2 is immediate
instrument_addorsub: arith ins is SUB (0xb7fe4236)
instrument_addorsub: op1 is reg (6) and op2 is immediate
instrument_addorsub: arith ins is ADD (0xb7fe424a)
instrument_addorsub: op1 is reg (7) and op2 is immediate
instrument_test: op1 and op2 of are registers 10(eax), 10(eax)
17 EFLAGS eflags, 1, 0
instrument_addorsub: arith ins is ADD (0xb7fe426c)
instrument_addorsub: op1 is register and op2 is mem
instrument_addorsub: arith ins is ADD (0xb7fe4272)
instrument_addorsub: op1 is register and op2 is mem
instrument_addorsub: arith ins is ADD (0xb7fe428c)
instrument_addorsub: op1 is reg (10) and op2 is immediate
instrument_addorsub: arith ins is AND (0xb7fe428f)
instrument_addorsub: op1 is reg (10) and op2 is immediate
instrument_addorsub: arith ins is SUB (0xb7fe4292)
instrument_addorsub: op1 and op2 of Arith are registers: 6 (esp), 10 (eax)
LEA: base reg is 6(esp) index reg invalid, dst 10(eax)
instrument_addorsub: arith ins is AND (0xb7fe42a1)
instrument_addorsub: op1 is mem and op2 is immediate
LEA: base reg is 7(ebx) index reg invalid, dst 10(eax)
0xb7fe42bf: not instrument noop nop 
instrument_test: op1 is mem and op2 is imm
instrument_test: op1 and op2 of are registers 10(eax), 10(eax)
17 EFLAGS eflags, 1, 0
LEA: base reg is 7(ebx) index reg invalid, dst 10(eax)
instrument_test: op1 is mem and op2 is imm
instrument_addorsub: arith ins is SUB (0xb7fe43b0)
instrument_addorsub: op1 is register and op2 is mem
instrument_test: op1 is mem and op2 is imm
instrument_addorsub: arith ins is ADD (0xb7fe3cab)
instrument_addorsub: op1 is reg (7) and op2 is immediate
instrument_addorsub: arith ins is SUB (0xb7fe3cb1)
instrument_addorsub: op1 is reg (6) and op2 is immediate
instrument_test: op1 and op2 of are registers 10(eax), 10(eax)
17 EFLAGS eflags, 1, 0
0xb7ff5b82: not instrument an interrupt
instrument_test: op1 is reg and op2 is imm
instrument_addorsub: arith ins is ADD (0xb7ff5b92)
instrument_addorsub: op1 is reg (9) and op2 is immediate
instrument_addorsub: arith ins is XOR (0xb7ff5b98)
instrument_addorsub: op1 and op2 of Arith are registers: 8 (edx), 8 (edx)
handling reg reset
instrument_addorsub: arith ins is SUB (0xb7ff5b9a)
instrument_addorsub: op1 and op2 of Arith are registers: 8 (edx), 10 (eax)
instrument_addorsub: arith ins is OR (0xb7ff5ba2)
instrument_addorsub: op1 is reg (10) and op2 is immediate
instrument_test: op1 is reg and op2 is imm
LEA: base reg is 8(edx) index reg invalid, dst 4(esi)
LEA: base reg is 5(ebp) index reg invalid, dst 6(esp)
instrument_test: op1 and op2 of are registers 10(eax), 10(eax)
17 EFLAGS eflags, 1, 0
instrument_test: op1 is reg and op2 is imm
[movx] 0xb7fe43fe movzx eax, al
instrument movx address 0xb7fe43fe is src reg: 19 into dst reg: 10
instrument_addorsub: arith ins is OR (0xb7fe4401)
instrument_addorsub: op1 is mem and op2 is register
instrument_test: op1 is reg and op2 is imm
instrument_test: op1 is mem and op2 is register
instrument_taint_regmem2flag: flags 63, reg 3 size 4, memsize 4
LEA: base reg is 3(edi) index reg invalid, dst 10(eax)
instrument_test: op1 is reg and op2 is imm
instrument_test: op1 and op2 of are registers 10(eax), 10(eax)
17 EFLAGS eflags, 1, 0
instrument_test: op1 is reg and op2 is imm
instrument_test: op1 and op2 of are registers 10(eax), 10(eax)
17 EFLAGS eflags, 1, 0
imul instruction: imul eax, dword ptr [eax+0x18], 0x4c
num operands is 4
instrument_test: op1 is mem and op2 is imm
instrument_addorsub: arith ins is ADD (0xb7fe44a4)
instrument_addorsub: op1 and op2 of Arith are registers: 9 (ecx), 8 (edx)
LEA: base reg is 5(ebp) index reg invalid, dst 10(eax)
instrument_addorsub: arith ins is ADD (0xb7ff5aba)
instrument_addorsub: op1 is reg (7) and op2 is immediate
op1 and op2 of xchg are registers
0xb7ff5acb: not instrument an interrupt
Done with stat64.
op1 and op2 of xchg are registers
instrument_test: op1 is reg and op2 is imm
instrument_addorsub: arith ins is OR (0xb7ff5ae0)
instrument_addorsub: op1 is reg (10) and op2 is immediate
instrument_test: op1 and op2 of are registers 10(eax), 10(eax)
17 EFLAGS eflags, 1, 0
instrument_addorsub: arith ins is AND (0xb7fe44ca)
instrument_addorsub: op1 is reg (10) and op2 is immediate
instrument_test: op1 is reg and op2 is imm
instrument_addorsub: arith ins is XOR (0xb7fe44de)
instrument_addorsub: op1 and op2 of Arith are registers: 10 (eax), 10 (eax)
handling reg reset
instrument_addorsub: arith ins is OR (0xb7fe44e0)
instrument_addorsub: op1 is mem and op2 is register
instrument_addorsub: arith ins is XOR (0xb7fe44de)
instrument_addorsub: op1 and op2 of Arith are registers: 10 (eax), 10 (eax)
handling reg reset
instrument_addorsub: arith ins is OR (0xb7fe44e0)
instrument_addorsub: op1 is mem and op2 is register
instrument_test: op1 is mem and op2 is register
instrument_taint_regmem2flag: flags 63, reg 3 size 4, memsize 4
LEA: base reg is 3(edi) index reg invalid, dst 10(eax)
instrument_test: op1 is mem and op2 is imm
Done with stat64.
Done with stat64.
Done with stat64.
Done with stat64.
Done with stat64.
Done with stat64.
0xb7ff5c02: not instrument an interrupt
Create taints from buffer sized 512 at location 0xbfffefe0
instrument_test: op1 is reg and op2 is imm
instrument_test: op1 is reg and op2 is imm
LEA: base reg is 7(ebx) index reg invalid, dst 10(eax)
instrument_test: op1 and op2 of are registers 10(eax), 9(ecx)
17 EFLAGS eflags, 1, 0
instrument_test: op1 and op2 of are registers 10(eax), 9(ecx)
17 EFLAGS eflags, 1, 0
instrument_addorsub: arith ins is XOR (0xb7ff6663)
instrument_addorsub: op1 and op2 of Arith are registers: 10 (eax), 10 (eax)
handling reg reset
instrument_test: op1 and op2 of are registers 19(al), 22(cl)
17 EFLAGS eflags, 1, 0
instrument_test: op1 and op2 of are registers 20(ah), 23(ch)
17 EFLAGS eflags, 1, 0
instrument_test: op1 and op2 of are registers 19(al), 22(cl)
17 EFLAGS eflags, 1, 0
instrument_test: op1 and op2 of are registers 10(eax), 9(ecx)
17 EFLAGS eflags, 1, 0
instrument_addorsub: arith ins is SBB (0xb7ff687b)
instrument_addorsub: op1 and op2 of Arith are registers: 10 (eax), 10 (eax)
instrument_addorsub: arith ins is SBB (0xb7ff687d)
instrument_addorsub: op1 is reg (10) and op2 is immediate
instrument_test: op1 and op2 of are registers 10(eax), 10(eax)
17 EFLAGS eflags, 1, 0
[movx] 0xb7fe3d46 movzx eax, byte ptr [eax+0xc]
instrument_test: op1 and op2 of are registers 19(al), 19(al)
17 EFLAGS eflags, 1, 0
LEA: base reg is 7(ebx) index reg invalid, dst 10(eax)
instrument_addorsub: arith ins is ADD (0xb7fe3d67)
instrument_addorsub: op1 is reg (10) and op2 is immediate
LEA: base reg is 7(ebx) index reg invalid, dst 10(eax)
instrument_test: op1 and op2 of are registers 10(eax), 10(eax)
17 EFLAGS eflags, 1, 0
[movx] 0xb7fe3d46 movzx eax, byte ptr [eax+0xc]
instrument_test: op1 and op2 of are registers 19(al), 19(al)
17 EFLAGS eflags, 1, 0
LEA: base reg is 7(ebx) index reg invalid, dst 10(eax)
instrument_addorsub: arith ins is ADD (0xb7fe3d67)
instrument_addorsub: op1 is reg (10) and op2 is immediate
instrument_test: op1 and op2 of are registers 10(eax), 9(ecx)
17 EFLAGS eflags, 1, 0
[movx] 0xb7ff67bc movzx eax, word ptr [esi-0x3]
[movx] 0xb7ff67c0 movzx ecx, word ptr [edx-0x3]
instrument_test: op1 and op2 of are registers 19(al), 22(cl)
17 EFLAGS eflags, 1, 0
instrument_test: op1 and op2 of are registers 10(eax), 9(ecx)
17 EFLAGS eflags, 1, 0
[movx] 0xb7ff67d4 movzx eax, byte ptr [esi-0x1]
instrument_test: op1 is mem and op2 is register
instrument_taint_regmem2flag: flags 63, reg 19 size 1, memsize 1
instrument_addorsub: arith ins is XOR (0xb7ff67e2)
instrument_addorsub: op1 and op2 of Arith are registers: 10 (eax), 10 (eax)
handling reg reset
instrument_test: op1 and op2 of are registers 10(eax), 10(eax)
17 EFLAGS eflags, 1, 0
instrument_test: op1 is mem and op2 is imm
instrument_test: op1 is mem and op2 is imm
[movx] 0xb7fe3d92 movzx eax, word ptr [edx+0x14]
instrument_addorsub: arith ins is SUB (0xb7fe3d9a)
instrument_addorsub: op1 is reg (10) and op2 is immediate
instrument_test: op1 is reg and op2 is imm
instrument_test: op1 is mem and op2 is imm
[movx] 0xb7fe3db2 movzx ecx, word ptr [edx+0x30]
instrument_test: op1 and op2 of are registers 8(edx), 3(edi)
17 EFLAGS eflags, 1, 0
instrument_addorsub: arith ins is ADD (0xb7fe3dd6)
instrument_addorsub: op1 and op2 of Arith are registers: 4 (esi), 10 (eax)
instrument_test: op1 and op2 of are registers 10(eax), 4(esi)
17 EFLAGS eflags, 1, 0
LEA: base reg is 7(ebx) index reg invalid, dst 10(eax)
instrument_test: op1 is mem and op2 is imm
instrument_test: op1 is reg and op2 is imm
instrument_test: op1 is mem and op2 is imm
instrument_addorsub: arith ins is ADD (0xb7fe3df2)
instrument_addorsub: op1 is reg (4) and op2 is immediate
instrument_addorsub: arith ins is ADD (0xb7fe3df8)
instrument_addorsub: op1 is register and op2 is mem
instrument_test: op1 and op2 of are registers 4(esi), 10(eax)
17 EFLAGS eflags, 1, 0
instrument_test: op1 is mem and op2 is imm
instrument_test: op1 is reg and op2 is imm
instrument_test: op1 is mem and op2 is imm
instrument_test: op1 is mem and op2 is register
instrument_taint_regmem2flag: flags 63, reg 9 size 4, memsize 4
instrument_test: op1 and op2 of are registers 10(eax), 9(ecx)
17 EFLAGS eflags, 1, 0
instrument_test: op1 and op2 of are registers 10(eax), 9(ecx)
17 EFLAGS eflags, 1, 0
instrument_test: op1 and op2 of are registers 10(eax), 9(ecx)
17 EFLAGS eflags, 1, 0
instrument_addorsub: arith ins is SBB (0xb7ff687b)
instrument_addorsub: op1 and op2 of Arith are registers: 10 (eax), 10 (eax)
instrument_addorsub: arith ins is SBB (0xb7ff687d)
instrument_addorsub: op1 is reg (10) and op2 is immediate
instrument_test: op1 and op2 of are registers 10(eax), 10(eax)
17 EFLAGS eflags, 1, 0
instrument_test: op1 and op2 of are registers 8(edx), 8(edx)
17 EFLAGS eflags, 1, 0
instrument_test: op1 and op2 of are registers 10(eax), 10(eax)
17 EFLAGS eflags, 1, 0
LEA: base reg is 10(eax) index reg invalid, dst 9(ecx)
instrument_addorsub: arith ins is AND (0xb7fe3e40)
instrument_addorsub: op1 is reg (9) and op2 is immediate
instrument_addorsub: arith ins is ADD (0xb7fe3e43)
instrument_addorsub: op1 is reg (10) and op2 is immediate
instrument_addorsub: arith ins is AND (0xb7fe3e46)
instrument_addorsub: op1 is reg (10) and op2 is immediate
LEA: base reg is 4(esi) index reg invalid, dst 9(ecx)
instrument_test: op1 and op2 of are registers 10(eax), 9(ecx)
17 EFLAGS eflags, 1, 0
instrument_addorsub: arith ins is SUB (0xb7fe3e58)
instrument_addorsub: op1 and op2 of Arith are registers: 4 (esi), 10 (eax)
instrument_addorsub: arith ins is ADD (0xb7fe3e5a)
instrument_addorsub: op1 and op2 of Arith are registers: 3 (edi), 10 (eax)
instrument_test: op1 and op2 of are registers 10(eax), 9(ecx)
17 EFLAGS eflags, 1, 0
instrument_addorsub: arith ins is XOR (0xb7ff6663)
instrument_addorsub: op1 and op2 of Arith are registers: 10 (eax), 10 (eax)
handling reg reset
instrument_test: op1 and op2 of are registers 3(edi), 3(edi)
17 EFLAGS eflags, 1, 0
[movx] 0xb7fe3ea6 movzx ecx, cl
instrument movx address 0xb7fe3ea6 is src reg: 22 into dst reg: 9
[movx] 0xb7fe3ea9 movzx esi, dl
instrument movx address 0xb7fe3ea9 is src reg: 25 into dst reg: 4
[movx] 0xb7fe3eac movzx edx, byte ptr [ebp-0x1c]
instrument_addorsub: arith ins is ADD (0xb7fe3eb3)
instrument_addorsub: op1 and op2 of Arith are registers: 9 (ecx), 4 (esi)
instrument_addorsub: arith ins is ADD (0xb7fe3eb8)
instrument_addorsub: op1 and op2 of Arith are registers: 9 (ecx), 8 (edx)
instrument_test: op1 and op2 of are registers 9(ecx), 3(edi)
17 EFLAGS eflags, 1, 0
0xb7fe3ebe: not instrument noop data16 nop 
LEA: base reg is 5(ebp) index reg invalid, dst 6(esp)
instrument_test: op1 and op2 of are registers 10(eax), 10(eax)
17 EFLAGS eflags, 1, 0
LEA: base reg is 5(ebp) index reg invalid, dst 6(esp)
instrument_test: op1 is reg and op2 is imm
instrument_test: op1 and op2 of are registers 9(ecx), 9(ecx)
17 EFLAGS eflags, 1, 0
instrument_addorsub: arith ins is AND (0xb7fe6bda)
instrument_addorsub: op1 and op2 of Arith are registers: 19 (al), 22 (cl)
LEA: base reg is 10(eax) index reg invalid, dst 3(edi)
instrument_test: op1 is reg and op2 is imm
instrument_test: op1 and op2 of are registers 10(eax), 10(eax)
17 EFLAGS eflags, 1, 0
instrument_test: op1 is reg and op2 is imm
instrument_test: op1 is mem and op2 is imm
LEA: base reg is 7(ebx) index reg invalid, dst 10(eax)
instrument_test: op1 and op2 of are registers 10(eax), 10(eax)
17 EFLAGS eflags, 1, 0
instrument mov is mem read: reg: 10 (eax), size of mem read is 4
instrument_test: op1 is reg and op2 is imm
LEA: base reg is 5(ebp) index reg invalid, dst 10(eax)
LEA: base reg is 5(ebp) index reg invalid, dst 10(eax)
instrument_addorsub: arith ins is ADD (0xb7fe47fd)
instrument_addorsub: op1 is reg (7) and op2 is immediate
instrument_addorsub: arith ins is SUB (0xb7fe4803)
instrument_addorsub: op1 is reg (6) and op2 is immediate
instrument_addorsub: arith ins is XOR (0xb7fe4818)
instrument_addorsub: op1 and op2 of Arith are registers: 10 (eax), 10 (eax)
handling reg reset
instrument_test: op1 and op2 of are registers 9(ecx), 9(ecx)
17 EFLAGS eflags, 1, 0
imul instruction: imul edx, edx, 0x4c
num operands is 4
LEA: base reg is 7(ebx) index reg invalid, dst 8(edx)
LEA: base reg is 5(ebp) index reg invalid, dst 10(eax)
instrument_addorsub: arith ins is ADD (0xb7ff5afa)
instrument_addorsub: op1 is reg (7) and op2 is immediate
op1 and op2 of xchg are registers
0xb7ff5b0b: not instrument an interrupt
Done with fstat64.
op1 and op2 of xchg are registers
instrument_test: op1 is reg and op2 is imm
instrument_test: op1 and op2 of are registers 10(eax), 10(eax)
17 EFLAGS eflags, 1, 0
LEA: base reg is 7(ebx) index reg invalid, dst 10(eax)
imul instruction: imul eax, dword ptr [ebp+0x20], 0x4c
num operands is 4
instrument_test: op1 and op2 of are registers 4(esi), 4(esi)
17 EFLAGS eflags, 1, 0
instrument_test: op1 is mem and op2 is imm
instrument_addorsub: arith ins is XOR (0xb7fe489c)
instrument_addorsub: op1 and op2 of Arith are registers: 8 (edx), 9 (ecx)
instrument_addorsub: arith ins is XOR (0xb7fe489e)
instrument_addorsub: op1 and op2 of Arith are registers: 10 (eax), 3 (edi)
instrument_addorsub: arith ins is OR (0xb7fe48a0)
instrument_addorsub: op1 and op2 of Arith are registers: 8 (edx), 10 (eax)
instrument_addorsub: arith ins is XOR (0xb7fe48b0)
instrument_addorsub: op1 is register and op2 is mem
instrument_addorsub: arith ins is XOR (0xb7fe48b6)
instrument_addorsub: op1 is register and op2 is mem
instrument_addorsub: arith ins is OR (0xb7fe48bc)
instrument_addorsub: op1 and op2 of Arith are registers: 8 (edx), 10 (eax)
instrument_test: op1 and op2 of are registers 4(esi), 4(esi)
17 EFLAGS eflags, 1, 0
instrument_test: op1 is mem and op2 is imm
instrument_addorsub: arith ins is XOR (0xb7fe489c)
instrument_addorsub: op1 and op2 of Arith are registers: 8 (edx), 9 (ecx)
instrument_addorsub: arith ins is XOR (0xb7fe489e)
instrument_addorsub: op1 and op2 of Arith are registers: 10 (eax), 3 (edi)
instrument_addorsub: arith ins is OR (0xb7fe48a0)
instrument_addorsub: op1 and op2 of Arith are registers: 8 (edx), 10 (eax)
instrument_test: op1 and op2 of are registers 9(ecx), 9(ecx)
17 EFLAGS eflags, 1, 0
instrument_test: op1 is mem and op2 is imm
instrument_test: op1 is mem and op2 is imm
instrument_test: op1 and op2 of are registers 10(eax), 10(eax)
17 EFLAGS eflags, 1, 0
instrument_test: op1 is reg and op2 is imm
[movx] 0xb7fe9696 movzx ecx, byte ptr [esp+0x18]
[movx] 0xb7fe969e movzx eax, byte ptr [esi+0x194]
instrument_addorsub: arith ins is AND (0xb7fe96a5)
instrument_addorsub: op1 is reg (9) and op2 is immediate
instrument_addorsub: arith ins is AND (0xb7fe96a8)
instrument_addorsub: op1 is reg (10) and op2 is immediate
instrument_addorsub: arith ins is OR (0xb7fe96ab)
instrument_addorsub: op1 and op2 of Arith are registers: 10 (eax), 9 (ecx)
instrument_test: op1 is mem and op2 is imm
instrument_addorsub: arith ins is XOR (0xb7fe96cd)
instrument_addorsub: op1 and op2 of Arith are registers: 10 (eax), 10 (eax)
handling reg reset
instrument_test: op1 and op2 of are registers 5(ebp), 5(ebp)
17 EFLAGS eflags, 1, 0
0xb7fe96d3: not instrument noop nop 
LEA: base reg is 4(esi) index reg invalid, dst 4(esi)
instrument_addorsub: arith ins is ADD (0xb7fe96df)
instrument_addorsub: op1 is reg (10) and op2 is immediate
instrument_test: op1 and op2 of are registers 10(eax), 5(ebp)
17 EFLAGS eflags, 1, 0
instrument_test: op1 and op2 of are registers 10(eax), 10(eax)
17 EFLAGS eflags, 1, 0
instrument_addorsub: arith ins is ADD (0xb7fe9734)
instrument_addorsub: op1 is reg (3) and op2 is immediate
instrument_test: op1 and op2 of are registers 8(edx), 8(edx)
17 EFLAGS eflags, 1, 0
instrument_addorsub: arith ins is XOR (0xb7fe9742)
instrument_addorsub: op1 and op2 of Arith are registers: 10 (eax), 10 (eax)
handling reg reset
LEA: base reg is 4(esi) index reg invalid, dst 10(eax)
[movx] 0xb7fe975b movzx edi, byte ptr [eax]
instrument_test: op1 and op2 of are registers 22(cl), 22(cl)
17 EFLAGS eflags, 1, 0
LEA: base reg is 4(esi) index reg invalid, dst 10(eax)
[movx] 0xb7fe975b movzx edi, byte ptr [eax]
instrument_test: op1 and op2 of are registers 22(cl), 22(cl)
17 EFLAGS eflags, 1, 0
instrument_addorsub: arith ins is XOR (0xb7fe9776)
instrument_addorsub: op1 and op2 of Arith are registers: 9 (ecx), 9 (ecx)
handling reg reset
instrument_addorsub: arith ins is ADD (0xb7fe977c)
instrument_addorsub: op1 is reg (10) and op2 is immediate
instrument_test: op1 is reg and op2 is imm
instrument_test: op1 and op2 of are registers 10(eax), 10(eax)
17 EFLAGS eflags, 1, 0
instrument_test: op1 is mem and op2 is imm
LEA: base reg is 10(eax) index reg invalid, dst 8(edx)
instrument_test: op1 and op2 of are registers 3(edi), 8(edx)
17 EFLAGS eflags, 1, 0
instrument_test: op1 is mem and op2 is imm
LEA: base reg is 10(eax) index reg invalid, dst 8(edx)
instrument_test: op1 and op2 of are registers 3(edi), 8(edx)
17 EFLAGS eflags, 1, 0
instrument_addorsub: arith ins is ADD (0xb7fe97ff)
instrument_addorsub: op1 is reg (6) and op2 is immediate
instrument_addorsub: arith ins is SUB (0xb7fe4958)
instrument_addorsub: op1 is reg (6) and op2 is immediate
instrument_test: op1 and op2 of are registers 10(eax), 10(eax)
17 EFLAGS eflags, 1, 0
[movx] 0xb7fe4974 movzx eax, word ptr [eax+0x14]
[movx] 0xb7fe4981 movzx edx, word ptr [eax+0x30]
instrument_test: op1 is mem and op2 is register
instrument_taint_regmem2flag: flags 63, reg 9 size 4, memsize 4
LEA: index reg is 10(eax) base reg invalid, dst 10(eax)
instrument_addorsub: arith ins is AND (0xb7fe49c2)
instrument_addorsub: op1 is reg (10) and op2 is immediate
instrument_addorsub: arith ins is SUB (0xb7fe49cd)
instrument_addorsub: op1 and op2 of Arith are registers: 6 (esp), 10 (eax)
LEA: base reg is 6(esp) index reg invalid, dst 10(eax)
instrument_addorsub: arith ins is ADD (0xb7fe49f5)
instrument_addorsub: op1 and op2 of Arith are registers: 4 (esi), 10 (eax)
instrument_test: op1 and op2 of are registers 10(eax), 4(esi)
17 EFLAGS eflags, 1, 0
LEA: base reg is 7(ebx) index reg invalid, dst 10(eax)
instrument_test: op1 is reg and op2 is imm
instrument_test: op1 is reg and op2 is imm
[movx] 0xb7fe4a50 movzx eax, word ptr [edi+0x158]
instrument_addorsub: arith ins is ADD (0xb7fe4a57)
instrument_addorsub: op1 is reg (4) and op2 is immediate
instrument_addorsub: arith ins is ADD (0xb7fe4a5d)
instrument_addorsub: op1 is register and op2 is mem
instrument_test: op1 and op2 of are registers 4(esi), 10(eax)
17 EFLAGS eflags, 1, 0
instrument_test: op1 is reg and op2 is imm
instrument_test: op1 is reg and op2 is imm
instrument_test: op1 is reg and op2 is imm
LEA: base reg is 4(esi) index reg invalid, dst 4(esi)
LEA: base reg is 8(edx) index reg invalid, dst 10(eax)
instrument_test: op1 and op2 of are registers 10(eax), 9(ecx)
17 EFLAGS eflags, 1, 0
instrument_addorsub: arith ins is SUB (0xb7fe4b03)
instrument_addorsub: op1 is reg (9) and op2 is immediate
instrument_addorsub: arith ins is SUB (0xb7fe4b0f)
instrument_addorsub: op1 and op2 of Arith are registers: 10 (eax), 8 (edx)
instrument_test: op1 and op2 of are registers 9(ecx), 10(eax)
17 EFLAGS eflags, 1, 0
instrument_addorsub: arith ins is ADD (0xb7fe4b27)
instrument_addorsub: op1 is reg (9) and op2 is immediate
instrument_addorsub: arith ins is AND (0xb7fe4b56)
instrument_addorsub: op1 and op2 of Arith are registers: 9 (ecx), 8 (edx)
instrument_addorsub: arith ins is ADD (0xb7fe4b63)
instrument_addorsub: op1 and op2 of Arith are registers: 9 (ecx), 8 (edx)
instrument_addorsub: arith ins is ADD (0xb7fe4b71)
instrument_addorsub: op1 and op2 of Arith are registers: 8 (edx), 9 (ecx)
instrument_addorsub: arith ins is AND (0xb7fe4b7b)
instrument_addorsub: op1 and op2 of Arith are registers: 9 (ecx), 8 (edx)
instrument_addorsub: arith ins is AND (0xb7fe4b86)
instrument_addorsub: op1 is register and op2 is mem
instrument_addorsub: arith ins is ADD (0xb7fe4b95)
instrument_addorsub: op1 is register and op2 is mem
instrument_test: op1 is mem and op2 is imm
instrument_addorsub: arith ins is AND (0xb7fe4bcd)
instrument_addorsub: op1 is reg (9) and op2 is immediate
instrument_addorsub: arith ins is AND (0xb7fe4bd5)
instrument_addorsub: op1 is reg (8) and op2 is immediate
instrument_test: op1 is mem and op2 is register
instrument_taint_regmem2flag: flags 63, reg 9 size 4, memsize 4
[movx] 0xb7fe4bb5 movzx ecx, byte ptr [ebp-0xa4]
instrument_addorsub: arith ins is AND (0xb7fe4bcd)
instrument_addorsub: op1 is reg (9) and op2 is immediate
instrument_addorsub: arith ins is AND (0xb7fe4bd5)
instrument_addorsub: op1 is reg (8) and op2 is immediate
instrument_test: op1 is reg and op2 is imm
instrument_test: op1 is reg and op2 is imm
instrument_test: op1 is reg and op2 is imm
instrument_test: op1 and op2 of are registers 10(eax), 10(eax)
17 EFLAGS eflags, 1, 0
instrument_test: op1 and op2 of are registers 10(eax), 10(eax)
17 EFLAGS eflags, 1, 0
[movx] 0xb7fe4c1a movzx eax, byte ptr [edi+0x194]
instrument_addorsub: arith ins is AND (0xb7fe4c21)
instrument_addorsub: op1 is reg (10) and op2 is immediate
instrument_test: op1 is reg and op2 is imm
instrument_addorsub: arith ins is SUB (0xb7fe4c68)
instrument_addorsub: op1 is reg (10) and op2 is immediate
instrument_addorsub: arith ins is AND (0xb7fe4c6b)
instrument_addorsub: op1 is register and op2 is mem
[movx] 0xb7fe4c1a movzx eax, byte ptr [edi+0x194]
instrument_addorsub: arith ins is AND (0xb7fe4c21)
instrument_addorsub: op1 is reg (10) and op2 is immediate
instrument_test: op1 is reg and op2 is imm
instrument_addorsub: arith ins is ADD (0xb7fef8a9)
instrument_addorsub: op1 is reg (7) and op2 is immediate
instrument_addorsub: arith ins is SUB (0xb7fef8af)
instrument_addorsub: op1 is reg (6) and op2 is immediate
instrument_test: op1 is mem and op2 is imm
LEA: base reg is 8(edx) index reg invalid, dst 10(eax)
instrument_addorsub: arith ins is ADD (0xb7fef8ca)
instrument_addorsub: op1 is reg (6) and op2 is immediate
0xb7fe4a4f: not instrument noop nop 
[movx] 0xb7fe4a50 movzx eax, word ptr [edi+0x158]
instrument_addorsub: arith ins is ADD (0xb7fe4a57)
instrument_addorsub: op1 is reg (4) and op2 is immediate
instrument_addorsub: arith ins is ADD (0xb7fe4a5d)
instrument_addorsub: op1 is register and op2 is mem
instrument_test: op1 and op2 of are registers 4(esi), 10(eax)
17 EFLAGS eflags, 1, 0
instrument_test: op1 is reg and op2 is imm
instrument_test: op1 and op2 of are registers 10(eax), 10(eax)
17 EFLAGS eflags, 1, 0
instrument_addorsub: arith ins is SUB (0xb7fe4ca9)
instrument_addorsub: op1 is mem and op2 is register
instrument_test: op1 is mem and op2 is imm
instrument_addorsub: arith ins is AND (0xb7fe4cf6)
instrument_addorsub: op1 is register and op2 is mem
instrument_test: op1 is reg and op2 is imm
instrument_addorsub: arith ins is SUB (0xb7fe4d28)
instrument_addorsub: op1 is register and op2 is mem
instrument_test: op1 is mem and op2 is imm
instrument_addorsub: arith ins is OR (0xb7fe4d3e)
instrument_addorsub: op1 is mem and op2 is immediate
instrument_test: op1 is reg and op2 is imm
instrument_addorsub: arith ins is ADD (0xb7fe4d6d)
instrument_addorsub: op1 is register and op2 is mem
instrument_test: op1 and op2 of are registers 10(eax), 10(eax)
17 EFLAGS eflags, 1, 0
instrument_test: op1 and op2 of are registers 10(eax), 8(edx)
17 EFLAGS eflags, 1, 0
instrument_addorsub: arith ins is ADD (0xb7fe4d99)
instrument_addorsub: op1 and op2 of Arith are registers: 8 (edx), 4 (esi)
instrument_addorsub: arith ins is ADD (0xb7fe4d9b)
instrument_addorsub: op1 and op2 of Arith are registers: 4 (esi), 10 (eax)
instrument_addorsub: arith ins is AND (0xb7fe4dbf)
instrument_addorsub: op1 and op2 of Arith are registers: 10 (eax), 4 (esi)
instrument_test: op1 and op2 of are registers 10(eax), 9(ecx)
17 EFLAGS eflags, 1, 0
instrument_test: op1 is mem and op2 is register
instrument_taint_regmem2flag: flags 63, reg 10 size 4, memsize 4
instrument_addorsub: arith ins is ADD (0xb7fe4e26)
instrument_addorsub: op1 is mem and op2 is immediate
instrument_test: op1 is mem and op2 is register
instrument_taint_regmem2flag: flags 63, reg 10 size 4, memsize 4
instrument_test: op1 and op2 of are registers 8(edx), 10(eax)
17 EFLAGS eflags, 1, 0
instrument_addorsub: arith ins is SUB (0xb7fe4e64)
instrument_addorsub: op1 and op2 of Arith are registers: 8 (edx), 10 (eax)
instrument_addorsub: arith ins is ADD (0xb7fe4e8a)
instrument_addorsub: op1 is register and op2 is mem
instrument_test: op1 is reg and op2 is imm
LEA: base reg is 7(ebx) index reg invalid, dst 4(esi)
instrument_test: op1 is reg and op2 is imm
instrument_addorsub: arith ins is ADD (0xb7fe4d6d)
instrument_addorsub: op1 is register and op2 is mem
instrument_test: op1 and op2 of are registers 10(eax), 10(eax)
17 EFLAGS eflags, 1, 0
instrument_test: op1 and op2 of are registers 10(eax), 8(edx)
17 EFLAGS eflags, 1, 0
instrument_test: op1 and op2 of are registers 10(eax), 10(eax)
17 EFLAGS eflags, 1, 0
instrument_test: op1 and op2 of are registers 10(eax), 8(edx)
17 EFLAGS eflags, 1, 0
instrument_addorsub: arith ins is ADD (0xb7fe4d99)
instrument_addorsub: op1 and op2 of Arith are registers: 8 (edx), 4 (esi)
instrument_addorsub: arith ins is ADD (0xb7fe4d9b)
instrument_addorsub: op1 and op2 of Arith are registers: 4 (esi), 10 (eax)
instrument_addorsub: arith ins is AND (0xb7fe4dbf)
instrument_addorsub: op1 and op2 of Arith are registers: 10 (eax), 4 (esi)
instrument_test: op1 and op2 of are registers 10(eax), 9(ecx)
17 EFLAGS eflags, 1, 0
instrument_test: op1 is mem and op2 is register
instrument_taint_regmem2flag: flags 63, reg 10 size 4, memsize 4
instrument_test: op1 is mem and op2 is imm
instrument_addorsub: arith ins is SUB (0xb7fe4df5)
instrument_addorsub: op1 and op2 of Arith are registers: 10 (eax), 8 (edx)
[movx] 0xb7ff68fa movzx eax, byte ptr [esp+0xc]
instrument_addorsub: arith ins is AND (0xb7ff6903)
instrument_addorsub: op1 is reg (8) and op2 is immediate
instrument_addorsub: arith ins is AND (0xb7ff691e)
instrument_addorsub: op1 is reg (8) and op2 is immediate
imul instruction: imul eax, eax, 0x1010101
num operands is 4
instrument_test: op1 is reg and op2 is imm
instrument_test: op1 is mem and op2 is register
instrument_taint_regmem2flag: flags 63, reg 10 size 4, memsize 4
instrument_addorsub: arith ins is ADD (0xb7fe4e26)
instrument_addorsub: op1 is mem and op2 is immediate
instrument_test: op1 is mem and op2 is register
instrument_taint_regmem2flag: flags 63, reg 10 size 4, memsize 4
instrument_addorsub: arith ins is SUB (0xb7fe52ed)
instrument_addorsub: op1 and op2 of Arith are registers: 10 (eax), 8 (edx)
instrument_test: op1 is reg and op2 is imm
LEA: base reg is 7(ebx) index reg invalid, dst 4(esi)
instrument_test: op1 and op2 of are registers 8(edx), 8(edx)
17 EFLAGS eflags, 1, 0
instrument_addorsub: arith ins is ADD (0xb7fe4ee1)
instrument_addorsub: op1 and op2 of Arith are registers: 8 (edx), 10 (eax)
instrument_test: op1 and op2 of are registers 8(edx), 8(edx)
17 EFLAGS eflags, 1, 0
LEA: base reg is 3(edi) index reg invalid, dst 4(esi)
instrument_test: op1 and op2 of are registers 10(eax), 10(eax)
17 EFLAGS eflags, 1, 0
instrument_test: op1 is reg and op2 is imm
instrument_addorsub: arith ins is SUB (0xb7fe5162)
instrument_addorsub: op1 and op2 of Arith are registers: 9 (ecx), 10 (eax)
instrument_test: op1 is reg and op2 is imm
instrument_addorsub: arith ins is SUB (0xb7fe516e)
instrument_addorsub: op1 and op2 of Arith are registers: 9 (ecx), 10 (eax)
instrument_addorsub: arith ins is ADD (0xb7fe514b)
instrument_addorsub: op1 is reg (8) and op2 is immediate
instrument_test: op1 and op2 of are registers 10(eax), 10(eax)
17 EFLAGS eflags, 1, 0
instrument_test: op1 is reg and op2 is imm
instrument_addorsub: arith ins is SUB (0xb7fe5162)
instrument_addorsub: op1 and op2 of Arith are registers: 9 (ecx), 10 (eax)
instrument_test: op1 is reg and op2 is imm
instrument_test: op1 is reg and op2 is imm
instrument_addorsub: arith ins is SUB (0xb7fe5192)
instrument_addorsub: op1 and op2 of Arith are registers: 9 (ecx), 10 (eax)
instrument_test: op1 is reg and op2 is imm
instrument_addorsub: arith ins is SUB (0xb7fe51a2)
instrument_addorsub: op1 and op2 of Arith are registers: 9 (ecx), 10 (eax)
instrument_test: op1 is reg and op2 is imm
instrument_addorsub: arith ins is ADD (0xb7fe514b)
instrument_addorsub: op1 is reg (8) and op2 is immediate
instrument_test: op1 and op2 of are registers 10(eax), 10(eax)
17 EFLAGS eflags, 1, 0
instrument_test: op1 is reg and op2 is imm
instrument_addorsub: arith ins is SUB (0xb7fe5162)
instrument_addorsub: op1 and op2 of Arith are registers: 9 (ecx), 10 (eax)
instrument_test: op1 is reg and op2 is imm
instrument_addorsub: arith ins is SUB (0xb7fe516e)
instrument_addorsub: op1 and op2 of Arith are registers: 9 (ecx), 10 (eax)
instrument_test: op1 and op2 of are registers 10(eax), 10(eax)
17 EFLAGS eflags, 1, 0
instrument_test: op1 and op2 of are registers 10(eax), 10(eax)
17 EFLAGS eflags, 1, 0
instrument_addorsub: arith ins is ADD (0xb7fe4f1c)
instrument_addorsub: op1 is mem and op2 is register
instrument_test: op1 and op2 of are registers 10(eax), 10(eax)
17 EFLAGS eflags, 1, 0
instrument_addorsub: arith ins is ADD (0xb7fe4f2c)
instrument_addorsub: op1 is mem and op2 is register
instrument_test: op1 and op2 of are registers 10(eax), 10(eax)
17 EFLAGS eflags, 1, 0
instrument_addorsub: arith ins is ADD (0xb7fe4f3c)
instrument_addorsub: op1 is mem and op2 is register
instrument_test: op1 and op2 of are registers 10(eax), 10(eax)
17 EFLAGS eflags, 1, 0
instrument_addorsub: arith ins is ADD (0xb7fe4f4c)
instrument_addorsub: op1 is mem and op2 is register
instrument_test: op1 and op2 of are registers 10(eax), 10(eax)
17 EFLAGS eflags, 1, 0
instrument_test: op1 and op2 of are registers 10(eax), 10(eax)
17 EFLAGS eflags, 1, 0
instrument_addorsub: arith ins is ADD (0xb7fe4f6c)
instrument_addorsub: op1 is mem and op2 is register
instrument_test: op1 and op2 of are registers 10(eax), 10(eax)
17 EFLAGS eflags, 1, 0
instrument_addorsub: arith ins is ADD (0xb7fe4f7c)
instrument_addorsub: op1 is mem and op2 is register
instrument_test: op1 and op2 of are registers 10(eax), 10(eax)
17 EFLAGS eflags, 1, 0
instrument_addorsub: arith ins is ADD (0xb7fe4f8f)
instrument_addorsub: op1 is mem and op2 is register
instrument_test: op1 and op2 of are registers 10(eax), 10(eax)
17 EFLAGS eflags, 1, 0
instrument_addorsub: arith ins is ADD (0xb7fe4fa2)
instrument_addorsub: op1 is mem and op2 is register
instrument_test: op1 and op2 of are registers 10(eax), 10(eax)
17 EFLAGS eflags, 1, 0
instrument_test: op1 is reg and op2 is imm
instrument_test: op1 is reg and op2 is imm
LEA: base reg is 7(ebx) index reg invalid, dst 10(eax)
LEA: base reg is 7(ebx) index reg invalid, dst 10(eax)
LEA: base reg is 7(ebx) index reg invalid, dst 10(eax)
instrument_test: op1 and op2 of are registers 10(eax), 10(eax)
17 EFLAGS eflags, 1, 0
instrument_test: op1 is mem and op2 is imm
instrument_test: op1 and op2 of are registers 10(eax), 10(eax)
17 EFLAGS eflags, 1, 0
instrument_test: op1 and op2 of are registers 10(eax), 10(eax)
17 EFLAGS eflags, 1, 0
instrument_test: op1 is mem and op2 is imm
instrument_test: op1 and op2 of are registers 8(edx), 8(edx)
17 EFLAGS eflags, 1, 0
instrument_test: op1 is reg and op2 is imm
instrument_test: op1 is reg and op2 is imm
instrument_test: op1 is reg and op2 is imm
instrument_test: op1 is reg and op2 is imm
instrument_test: op1 is reg and op2 is imm
instrument_test: op1 and op2 of are registers 10(eax), 10(eax)
17 EFLAGS eflags, 1, 0
instrument_test: op1 is reg and op2 is imm
instrument_test: op1 and op2 of are registers 10(eax), 10(eax)
17 EFLAGS eflags, 1, 0
instrument_addorsub: arith ins is AND (0xb7fe501e)
instrument_addorsub: op1 is reg (8) and op2 is immediate
instrument_test: op1 and op2 of are registers 10(eax), 10(eax)
17 EFLAGS eflags, 1, 0
instrument_addorsub: arith ins is AND (0xb7fe501e)
instrument_addorsub: op1 is reg (8) and op2 is immediate
instrument_test: op1 and op2 of are registers 4(esi), 4(esi)
17 EFLAGS eflags, 1, 0
instrument_test: op1 and op2 of are registers 4(esi), 4(esi)
17 EFLAGS eflags, 1, 0
instrument_test: op1 is mem and op2 is imm
instrument_test: op1 and op2 of are registers 10(eax), 10(eax)
17 EFLAGS eflags, 1, 0
instrument_test: op1 is mem and op2 is imm
instrument_test: op1 and op2 of are registers 10(eax), 10(eax)
17 EFLAGS eflags, 1, 0
instrument_addorsub: arith ins is ADD (0xb7fe5055)
instrument_addorsub: op1 is register and op2 is mem
instrument_addorsub: arith ins is AND (0xb7fe5065)
instrument_addorsub: op1 is register and op2 is mem
instrument_test: op1 is reg and op2 is imm
instrument_test: op1 and op2 of are registers 10(eax), 10(eax)
17 EFLAGS eflags, 1, 0
instrument_addorsub: arith ins is ADD (0xb7fe507d)
instrument_addorsub: op1 is register and op2 is mem
0xb7ff5bbb: not instrument an interrupt
instrument_test: op1 is reg and op2 is imm
instrument_test: op1 and op2 of are registers 10(eax), 10(eax)
17 EFLAGS eflags, 1, 0
[movx] 0xb7fe509b movzx eax, byte ptr [edi+0x194]
instrument_addorsub: arith ins is AND (0xb7fe50a4)
instrument_addorsub: op1 is reg (8) and op2 is immediate
instrument_test: op1 is reg and op2 is imm
instrument_addorsub: arith ins is ADD (0xb7fe50b8)
instrument_addorsub: op1 and op2 of Arith are registers: 8 (edx), 10 (eax)
instrument_test: op1 is mem and op2 is imm
instrument_test: op1 is mem and op2 is imm
instrument_addorsub: arith ins is AND (0xb7fe5245)
instrument_addorsub: op1 is reg (10) and op2 is immediate
instrument_addorsub: arith ins is ADD (0xb7fe50b8)
instrument_addorsub: op1 and op2 of Arith are registers: 8 (edx), 10 (eax)
instrument_test: op1 is mem and op2 is imm
instrument_test: op1 is mem and op2 is imm
instrument_test: op1 and op2 of are registers 10(eax), 10(eax)
17 EFLAGS eflags, 1, 0
instrument_test: op1 is mem and op2 is imm
instrument_test: op1 and op2 of are registers 4(esi), 4(esi)
17 EFLAGS eflags, 1, 0
instrument_test: op1 and op2 of are registers 9(ecx), 9(ecx)
17 EFLAGS eflags, 1, 0
imul instruction: imul edx, edi, 0x4c
num operands is 4
instrument_addorsub: arith ins is ADD (0xb7fe959e)
instrument_addorsub: op1 is mem and op2 is immediate
instrument_addorsub: arith ins is ADD (0xb7fe95ac)
instrument_addorsub: op1 is reg (4) and op2 is immediate
instrument_addorsub: arith ins is ADC (0xb7fe95b5)
instrument_addorsub: op1 is reg (3) and op2 is immediate
instrument_test: op1 and op2 of are registers 9(ecx), 9(ecx)
17 EFLAGS eflags, 1, 0
LEA: base reg is 5(ebp) index reg invalid, dst 6(esp)
LEA: base reg is 5(ebp) index reg invalid, dst 6(esp)
instrument_addorsub: arith ins is SUB (0xb7feb893)
instrument_addorsub: op1 is reg (6) and op2 is immediate
LEA: base reg is 5(ebp) index reg invalid, dst 6(esp)
instrument_addorsub: arith ins is XOR (0xb7fed35e)
instrument_addorsub: op1 and op2 of Arith are registers: 8 (edx), 8 (edx)
handling reg reset
instrument_addorsub: arith ins is ADD (0xb7fed37d)
instrument_addorsub: op1 is reg (6) and op2 is immediate
instrument_addorsub: arith ins is SUB (0xb7feba7f)
instrument_addorsub: op1 is reg (6) and op2 is immediate
instrument_test: op1 and op2 of are registers 8(edx), 8(edx)
17 EFLAGS eflags, 1, 0
[movx] 0xb7feba8d movzx ecx, byte ptr [eax+0x194]
instrument_test: op1 is reg and op2 is imm
instrument_addorsub: arith ins is SUB (0xb7febaa0)
instrument_addorsub: op1 is reg (6) and op2 is immediate
instrument_addorsub: arith ins is AND (0xb7febaa3)
instrument_addorsub: op1 is reg (9) and op2 is immediate
LEA: base reg is 6(esp) index reg invalid, dst 8(edx)
instrument_addorsub: arith ins is OR (0xb7febaaa)
instrument_addorsub: op1 is reg (9) and op2 is immediate
instrument_addorsub: arith ins is AND (0xb7febaad)
instrument_addorsub: op1 is reg (8) and op2 is immediate
instrument_addorsub: arith ins is ADD (0xb7febacf)
instrument_addorsub: op1 is reg (3) and op2 is immediate
instrument_test: op1 and op2 of are registers 3(edi), 3(edi)
17 EFLAGS eflags, 1, 0
LEA: base reg is 8(edx) index reg invalid, dst 10(eax)
instrument_addorsub: arith ins is ADD (0xb7feba23)
instrument_addorsub: op1 is mem and op2 is immediate
instrument_test: op1 and op2 of are registers 10(eax), 10(eax)
17 EFLAGS eflags, 1, 0
instrument_test: op1 is reg and op2 is imm
instrument_addorsub: arith ins is ADD (0xb7feba23)
instrument_addorsub: op1 is mem and op2 is immediate
instrument_test: op1 and op2 of are registers 10(eax), 10(eax)
17 EFLAGS eflags, 1, 0
instrument_test: op1 is reg and op2 is imm
instrument_addorsub: arith ins is ADD (0xb7feba43)
instrument_addorsub: op1 is register and op2 is mem
instrument_addorsub: arith ins is AND (0xb7fec09b)
instrument_addorsub: op1 is reg (10) and op2 is immediate
instrument_test: op1 is reg and op2 is imm
instrument_addorsub: arith ins is ADD (0xb7fec0af)
instrument_addorsub: op1 is register and op2 is mem
instrument_test: op1 and op2 of are registers 3(edi), 3(edi)
17 EFLAGS eflags, 1, 0
LEA: index reg is 10(eax) base reg invalid, dst 4(esi)
LEA: index reg is 10(eax) base reg invalid, dst 10(eax)
instrument_test: op1 and op2 of are registers 10(eax), 10(eax)
17 EFLAGS eflags, 1, 0
instrument_test: op1 and op2 of are registers 10(eax), 10(eax)
17 EFLAGS eflags, 1, 0
instrument_test: op1 and op2 of are registers 8(edx), 8(edx)
17 EFLAGS eflags, 1, 0
instrument_test: op1 and op2 of are registers 10(eax), 10(eax)
17 EFLAGS eflags, 1, 0
instrument_test: op1 and op2 of are registers 3(edi), 3(edi)
17 EFLAGS eflags, 1, 0
instrument_test: op1 and op2 of are registers 9(ecx), 9(ecx)
17 EFLAGS eflags, 1, 0
instrument_test: op1 and op2 of are registers 10(eax), 10(eax)
17 EFLAGS eflags, 1, 0
instrument_test: op1 is mem and op2 is register
instrument_taint_regmem2flag: flags 63, reg 10 size 4, memsize 4
instrument_addorsub: arith ins is ADD (0xb7febbe6)
instrument_addorsub: op1 is reg (10) and op2 is immediate
instrument_addorsub: arith ins is AND (0xb7febbe9)
instrument_addorsub: op1 is reg (10) and op2 is immediate
LEA: base reg is 10(eax) index reg invalid, dst 8(edx)
instrument_addorsub: arith ins is AND (0xb7febbef)
instrument_addorsub: op1 is reg (8) and op2 is immediate
instrument_addorsub: arith ins is SUB (0xb7febbf5)
instrument_addorsub: op1 and op2 of Arith are registers: 6 (esp), 8 (edx)
LEA: base reg is 6(esp) index reg invalid, dst 3(edi)
instrument_addorsub: arith ins is AND (0xb7febbfe)
instrument_addorsub: op1 is mem and op2 is immediate
instrument_test: op1 is mem and op2 is register
instrument_taint_regmem2flag: flags 63, reg 8 size 4, memsize 4
instrument_test: op1 and op2 of are registers 23(ch), 25(dl)
17 EFLAGS eflags, 1, 0
instrument_addorsub: arith ins is XOR (0xb7ff626a)
instrument_addorsub: op1 and op2 of Arith are registers: 10 (eax), 10 (eax)
handling reg reset
instrument_test: op1 and op2 of are registers 10(eax), 10(eax)
17 EFLAGS eflags, 1, 0
instrument_addorsub: arith ins is ADD (0xb7fee371)
instrument_addorsub: op1 is reg (6) and op2 is immediate
instrument_test: op1 and op2 of are registers 10(eax), 10(eax)
17 EFLAGS eflags, 1, 0
instrument_addorsub: arith ins is ADD (0xb7febb37)
instrument_addorsub: op1 is reg (4) and op2 is immediate
LEA: base reg is 3(edi) index reg invalid, dst 10(eax)
instrument_test: op1 and op2 of are registers 10(eax), 10(eax)
17 EFLAGS eflags, 1, 0
instrument_test: op1 and op2 of are registers 8(edx), 8(edx)
17 EFLAGS eflags, 1, 0
instrument_test: op1 and op2 of are registers 10(eax), 10(eax)
17 EFLAGS eflags, 1, 0
instrument_test: op1 and op2 of are registers 3(edi), 3(edi)
17 EFLAGS eflags, 1, 0
instrument_test: op1 and op2 of are registers 10(eax), 10(eax)
17 EFLAGS eflags, 1, 0
instrument_test: op1 and op2 of are registers 10(eax), 10(eax)
17 EFLAGS eflags, 1, 0
instrument_test: op1 and op2 of are registers 3(edi), 3(edi)
17 EFLAGS eflags, 1, 0
LEA: index reg is 10(eax) base reg invalid, dst 10(eax)
instrument_test: op1 and op2 of are registers 10(eax), 10(eax)
17 EFLAGS eflags, 1, 0
instrument_addorsub: arith ins is XOR (0xb7febd19)
instrument_addorsub: op1 and op2 of Arith are registers: 9 (ecx), 9 (ecx)
handling reg reset
instrument_test: op1 and op2 of are registers 3(edi), 3(edi)
17 EFLAGS eflags, 1, 0
instrument_addorsub: arith ins is ADD (0xb7febd53)
instrument_addorsub: op1 is reg (9) and op2 is immediate
instrument_addorsub: arith ins is AND (0xb7febd59)
instrument_addorsub: op1 is mem and op2 is immediate
instrument_test: op1 and op2 of are registers 8(edx), 8(edx)
17 EFLAGS eflags, 1, 0
instrument_test: op1 and op2 of are registers 3(edi), 3(edi)
17 EFLAGS eflags, 1, 0
instrument_addorsub: arith ins is ADD (0xb7febd53)
instrument_addorsub: op1 is reg (9) and op2 is immediate
instrument_addorsub: arith ins is AND (0xb7febd59)
instrument_addorsub: op1 is mem and op2 is immediate
instrument_test: op1 and op2 of are registers 8(edx), 8(edx)
17 EFLAGS eflags, 1, 0
instrument_test: op1 is mem and op2 is imm
instrument_test: op1 and op2 of are registers 4(esi), 3(edi)
17 EFLAGS eflags, 1, 0
instrument_test: op1 and op2 of are registers 4(esi), 4(esi)
17 EFLAGS eflags, 1, 0
LEA: base reg is 10(eax) index reg invalid, dst 9(ecx)
instrument_test: op1 is reg and op2 is imm
instrument_test: op1 is reg and op2 is imm
instrument_addorsub: arith ins is ADD (0xb7febf00)
instrument_addorsub: op1 is reg (10) and op2 is immediate
instrument_addorsub: arith ins is AND (0xb7febf03)
instrument_addorsub: op1 is reg (10) and op2 is immediate
instrument_addorsub: arith ins is SUB (0xb7febf06)
instrument_addorsub: op1 and op2 of Arith are registers: 6 (esp), 10 (eax)
LEA: base reg is 6(esp) index reg invalid, dst 10(eax)
LEA: base reg is 3(edi) index reg invalid, dst 3(edi)
instrument_addorsub: arith ins is ADD (0xb7febf4b)
instrument_addorsub: op1 is mem and op2 is immediate
LEA: index reg is 10(eax) base reg invalid, dst 3(edi)
instrument_addorsub: arith ins is ADD (0xb7febf5e)
instrument_addorsub: op1 and op2 of Arith are registers: 3 (edi), 4 (esi)
instrument_test: op1 and op2 of are registers 10(eax), 3(edi)
17 EFLAGS eflags, 1, 0
0xb7febf6f: not instrument noop nop 
instrument_test: op1 and op2 of are registers 10(eax), 10(eax)
17 EFLAGS eflags, 1, 0
instrument_addorsub: arith ins is SUB (0xb7febf8d)
instrument_addorsub: op1 is reg (3) and op2 is immediate
instrument_addorsub: arith ins is SUB (0xb7febf90)
instrument_addorsub: op1 is reg (8) and op2 is immediate
instrument_test: op1 is mem and op2 is register
instrument_taint_regmem2flag: flags 63, reg 3 size 4, memsize 4
instrument_test: op1 is mem and op2 is register
instrument_taint_regmem2flag: flags 63, reg 10 size 4, memsize 4
instrument_addorsub: arith ins is SUB (0xb7febfb8)
instrument_addorsub: op1 and op2 of Arith are registers: 8 (edx), 3 (edi)
instrument_addorsub: arith ins is ADD (0xb7febfba)
instrument_addorsub: op1 and op2 of Arith are registers: 10 (eax), 3 (edi)
instrument_addorsub: arith ins is XOR (0xb7ff6912)
instrument_addorsub: op1 is reg (8) and op2 is immediate
instrument_addorsub: arith ins is ADD (0xb7febfca)
instrument_addorsub: op1 is reg (10) and op2 is immediate
instrument_addorsub: arith ins is ADD (0xb7febf4b)
instrument_addorsub: op1 is mem and op2 is immediate
LEA: index reg is 10(eax) base reg invalid, dst 3(edi)
instrument_addorsub: arith ins is ADD (0xb7febf5e)
instrument_addorsub: op1 and op2 of Arith are registers: 3 (edi), 4 (esi)
instrument_test: op1 and op2 of are registers 10(eax), 3(edi)
17 EFLAGS eflags, 1, 0
0xb7febf6f: not instrument noop nop 
instrument_test: op1 and op2 of are registers 10(eax), 10(eax)
17 EFLAGS eflags, 1, 0
instrument_test: op1 is mem and op2 is register
instrument_taint_regmem2flag: flags 63, reg 10 size 4, memsize 4
instrument_addorsub: arith ins is SUB (0xb7febfb8)
instrument_addorsub: op1 and op2 of Arith are registers: 8 (edx), 3 (edi)
instrument_addorsub: arith ins is ADD (0xb7febfba)
instrument_addorsub: op1 and op2 of Arith are registers: 10 (eax), 3 (edi)
instrument_test: op1 and op2 of are registers 10(eax), 10(eax)
17 EFLAGS eflags, 1, 0
instrument_test: op1 and op2 of are registers 9(ecx), 9(ecx)
17 EFLAGS eflags, 1, 0
LEA: base reg is 5(ebp) index reg invalid, dst 6(esp)
instrument_test: op1 and op2 of are registers 9(ecx), 9(ecx)
17 EFLAGS eflags, 1, 0
LEA: base reg is 5(ebp) index reg invalid, dst 6(esp)
instrument_addorsub: arith ins is SUB (0xb7fe0f06)
instrument_addorsub: op1 is reg (6) and op2 is immediate
0xb7fe0f09: not instrument an rdtsc
instrument_addorsub: arith ins is SUB (0xb7fe0f11)
instrument_addorsub: op1 is register and op2 is mem
instrument_addorsub: arith ins is SBB (0xb7fe0f14)
instrument_addorsub: op1 is register and op2 is mem
instrument_addorsub: arith ins is ADD (0xb7fe0f17)
instrument_addorsub: op1 is mem and op2 is register
instrument_addorsub: arith ins is ADC (0xb7fe0f1d)
instrument_addorsub: op1 is mem and op2 is register
instrument_test: op1 and op2 of are registers 4(esi), 4(esi)
17 EFLAGS eflags, 1, 0
instrument_addorsub: arith ins is SUB (0xb7fe0f32)
instrument_addorsub: op1 is reg (10) and op2 is immediate
instrument_addorsub: arith ins is OR (0xb7fe0f38)
instrument_addorsub: op1 is mem and op2 is immediate
instrument_test: op1 and op2 of are registers 10(eax), 10(eax)
17 EFLAGS eflags, 1, 0
instrument_test: op1 and op2 of are registers 10(eax), 10(eax)
17 EFLAGS eflags, 1, 0
instrument_addorsub: arith ins is SUB (0xb7fe0f32)
instrument_addorsub: op1 is reg (10) and op2 is immediate
instrument_addorsub: arith ins is OR (0xb7fe0f38)
instrument_addorsub: op1 is mem and op2 is immediate
instrument_test: op1 and op2 of are registers 10(eax), 10(eax)
17 EFLAGS eflags, 1, 0
instrument_test: op1 and op2 of are registers 10(eax), 10(eax)
17 EFLAGS eflags, 1, 0
instrument_test: op1 is reg and op2 is imm
instrument_test: op1 is mem and op2 is register
instrument_taint_regmem2flag: flags 63, reg 8 size 4, memsize 4
instrument_addorsub: arith ins is ADD (0xb7fe0f89)
instrument_addorsub: op1 is reg (10) and op2 is immediate
instrument_test: op1 and op2 of are registers 10(eax), 4(esi)
17 EFLAGS eflags, 1, 0
instrument_addorsub: arith ins is XOR (0xb7fe0f97)
instrument_addorsub: op1 and op2 of Arith are registers: 10 (eax), 10 (eax)
handling reg reset
instrument_test: op1 and op2 of are registers 8(edx), 8(edx)
17 EFLAGS eflags, 1, 0
LEA: base reg is 7(ebx) index reg invalid, dst 8(edx)
LEA: base reg is 5(ebp) index reg invalid, dst 10(eax)
LEA: base reg is 7(ebx) index reg invalid, dst 10(eax)
instrument_test: op1 is mem and op2 is register
instrument_taint_regmem2flag: flags 63, reg 8 size 4, memsize 4
instrument_addorsub: arith ins is ADD (0xb7fe0f89)
instrument_addorsub: op1 is reg (10) and op2 is immediate
instrument_test: op1 and op2 of are registers 10(eax), 4(esi)
17 EFLAGS eflags, 1, 0
instrument_addorsub: arith ins is XOR (0xb7fe0f97)
instrument_addorsub: op1 and op2 of Arith are registers: 10 (eax), 10 (eax)
handling reg reset
instrument_test: op1 and op2 of are registers 8(edx), 8(edx)
17 EFLAGS eflags, 1, 0
LEA: base reg is 7(ebx) index reg invalid, dst 8(edx)
LEA: base reg is 5(ebp) index reg invalid, dst 10(eax)
LEA: base reg is 7(ebx) index reg invalid, dst 10(eax)
LEA: index reg is 10(eax) base reg invalid, dst 8(edx)
instrument_test: op1 and op2 of are registers 3(edi), 3(edi)
17 EFLAGS eflags, 1, 0
instrument_addorsub: arith ins is ADD (0xb7fe19fc)
instrument_addorsub: op1 is reg (10) and op2 is immediate
instrument_addorsub: arith ins is XOR (0xb7fe19ff)
instrument_addorsub: op1 and op2 of Arith are registers: 3 (edi), 3 (edi)
handling reg reset
instrument_test: op1 and op2 of are registers 4(esi), 10(eax)
17 EFLAGS eflags, 1, 0
instrument_test: op1 and op2 of are registers 9(ecx), 9(ecx)
17 EFLAGS eflags, 1, 0
instrument_test: op1 and op2 of are registers 9(ecx), 9(ecx)
17 EFLAGS eflags, 1, 0
instrument_test: op1 and op2 of are registers 9(ecx), 10(eax)
17 EFLAGS eflags, 1, 0
instrument_test: op1 and op2 of are registers 10(eax), 3(edi)
17 EFLAGS eflags, 1, 0
instrument_test: op1 and op2 of are registers 10(eax), 10(eax)
17 EFLAGS eflags, 1, 0
instrument_test: op1 is mem and op2 is register
instrument_taint_regmem2flag: flags 63, reg 8 size 4, memsize 4
instrument_addorsub: arith ins is XOR (0xb7fe0f97)
instrument_addorsub: op1 and op2 of Arith are registers: 10 (eax), 10 (eax)
handling reg reset
instrument_test: op1 and op2 of are registers 8(edx), 8(edx)
17 EFLAGS eflags, 1, 0
LEA: base reg is 7(ebx) index reg invalid, dst 8(edx)
LEA: base reg is 5(ebp) index reg invalid, dst 10(eax)
LEA: base reg is 7(ebx) index reg invalid, dst 10(eax)
instrument_addorsub: arith ins is ADD (0xb7fed3cd)
instrument_addorsub: op1 is reg (7) and op2 is immediate
instrument_addorsub: arith ins is SUB (0xb7fed3d3)
instrument_addorsub: op1 is reg (6) and op2 is immediate
instrument_addorsub: arith ins is ADD (0xb7fe01dc)
instrument_addorsub: op1 is reg (7) and op2 is immediate
instrument_addorsub: arith ins is SUB (0xb7fe01e2)
instrument_addorsub: op1 is reg (6) and op2 is immediate
instrument_addorsub: arith ins is SUB (0xb7feec16)
instrument_addorsub: op1 is reg (6) and op2 is immediate
instrument_addorsub: arith ins is ADD (0xb7feec1e)
instrument_addorsub: op1 is reg (7) and op2 is immediate
instrument_test: op1 and op2 of are registers 10(eax), 10(eax)
17 EFLAGS eflags, 1, 0
instrument_addorsub: arith ins is XOR (0xb7feec2e)
instrument_addorsub: op1 and op2 of Arith are registers: 3 (edi), 3 (edi)
handling reg reset
instrument_addorsub: arith ins is XOR (0xb7feec41)
instrument_addorsub: op1 and op2 of Arith are registers: 10 (eax), 10 (eax)
handling reg reset
instrument_test: op1 is mem and op2 is imm
instrument_addorsub: arith ins is SUB (0xb7fee7a6)
instrument_addorsub: op1 is reg (6) and op2 is immediate
instrument_addorsub: arith ins is ADD (0xb7fee7b9)
instrument_addorsub: op1 is reg (7) and op2 is immediate
instrument_test: op1 and op2 of are registers 10(eax), 10(eax)
17 EFLAGS eflags, 1, 0
instrument_test: op1 and op2 of are registers 9(ecx), 9(ecx)
17 EFLAGS eflags, 1, 0
instrument_addorsub: arith ins is ADD (0xb7fee7f4)
instrument_addorsub: op1 is mem and op2 is register
instrument_test: op1 is mem and op2 is imm
LEA: base reg is 7(ebx) index reg invalid, dst 10(eax)
0xb7fee81b: not instrument noop nop 
LEA: base reg is 4(esi) index reg invalid, dst 4(esi)
instrument_addorsub: arith ins is ADD (0xb7fee829)
instrument_addorsub: op1 is register and op2 is mem
imul instruction: imul eax, dword ptr [eax+0x18], 0x4c
num operands is 4
instrument_test: op1 and op2 of are registers 4(esi), 4(esi)
17 EFLAGS eflags, 1, 0
instrument_test: op1 and op2 of are registers 10(eax), 10(eax)
17 EFLAGS eflags, 1, 0
instrument_test: op1 and op2 of are registers 3(edi), 3(edi)
17 EFLAGS eflags, 1, 0
instrument_addorsub: arith ins is ADD (0xb7fee86c)
instrument_addorsub: op1 and op2 of Arith are registers: 4 (esi), 10 (eax)
instrument_test: op1 and op2 of are registers 4(esi), 4(esi)
17 EFLAGS eflags, 1, 0
[movx] 0xb7fee875 movzx edi, word ptr [esi+0x4]
instrument_addorsub: arith ins is AND (0xb7fee87e)
instrument_addorsub: op1 is reg (3) and op2 is immediate
[movx] 0xb7fee881 movzx edi, di
instrument movx address 0xb7fee881 is src reg: 33 into dst reg: 3
instrument_addorsub: arith ins is ADD (0xb7fee88a)
instrument_addorsub: op1 is register and op2 is mem
instrument_test: op1 is mem and op2 is imm
instrument_addorsub: arith ins is ADD (0xb7fee40d)
instrument_addorsub: op1 is reg (7) and op2 is immediate
instrument_addorsub: arith ins is SUB (0xb7fee413)
instrument_addorsub: op1 is reg (6) and op2 is immediate
instrument_test: op1 is mem and op2 is imm
instrument_test: op1 and op2 of are registers 10(eax), 10(eax)
17 EFLAGS eflags, 1, 0
instrument_test: op1 and op2 of are registers 4(esi), 4(esi)
17 EFLAGS eflags, 1, 0
instrument_addorsub: arith ins is ADD (0xb7fee44e)
instrument_addorsub: op1 is register and op2 is mem
instrument_test: op1 is mem and op2 is imm
instrument_test: op1 is mem and op2 is register
instrument_taint_regmem2flag: flags 63, reg 3 size 4, memsize 4
instrument_test: op1 and op2 of are registers 10(eax), 10(eax)
17 EFLAGS eflags, 1, 0
instrument_addorsub: arith ins is ADD (0xb7fee46a)
instrument_addorsub: op1 and op2 of Arith are registers: 4 (esi), 10 (eax)
instrument_test: op1 is mem and op2 is imm
LEA: base reg is 5(ebp) index reg invalid, dst 10(eax)
LEA: base reg is 7(ebx) index reg invalid, dst 3(edi)
[movx] 0xb7fee493 movzx eax, word ptr [esi]
instrument_test: op1 is mem and op2 is register
instrument_taint_regmem2flag: flags 63, reg 3 size 4, memsize 4
instrument_test: op1 and op2 of are registers 10(eax), 10(eax)
17 EFLAGS eflags, 1, 0
instrument_addorsub: arith ins is ADD (0xb7fee46a)
instrument_addorsub: op1 and op2 of Arith are registers: 4 (esi), 10 (eax)
instrument_test: op1 is mem and op2 is imm
instrument_addorsub: arith ins is ADD (0xb7fee508)
instrument_addorsub: op1 is register and op2 is mem
instrument_test: op1 and op2 of are registers 10(eax), 10(eax)
17 EFLAGS eflags, 1, 0
LEA: base reg is 5(ebp) index reg invalid, dst 6(esp)
instrument_addorsub: arith ins is OR (0xb7fee8c6)
instrument_addorsub: op1 is mem and op2 is register
[movx] 0xb7fee8c9 movzx eax, word ptr [esi+0x6]
instrument_addorsub: arith ins is SUB (0xb7fee8cd)
instrument_addorsub: op1 is reg (6) and op2 is immediate
instrument_addorsub: arith ins is AND (0xb7fee8d7)
instrument_addorsub: op1 is reg (10) and op2 is immediate
instrument_test: op1 and op2 of are registers 9(ecx), 10(eax)
17 EFLAGS eflags, 1, 0
instrument_test: op1 and op2 of are registers 10(eax), 10(eax)
17 EFLAGS eflags, 1, 0
instrument_test: op1 and op2 of are registers 10(eax), 10(eax)
17 EFLAGS eflags, 1, 0
instrument_addorsub: arith ins is ADD (0xb7fee8f9)
instrument_addorsub: op1 is mem and op2 is register
instrument_test: op1 and op2 of are registers 10(eax), 10(eax)
17 EFLAGS eflags, 1, 0
instrument_addorsub: arith ins is ADD (0xb7fee9ad)
instrument_addorsub: op1 is register and op2 is mem
[movx] 0xb7fee9b2 movzx edx, word ptr [eax+0x4]
instrument_addorsub: arith ins is AND (0xb7fee9bd)
instrument_addorsub: op1 is reg (8) and op2 is immediate
instrument_test: op1 and op2 of are registers 9(ecx), 8(edx)
17 EFLAGS eflags, 1, 0
instrument_test: op1 and op2 of are registers 8(edx), 8(edx)
17 EFLAGS eflags, 1, 0
LEA: base reg is 4(esi) index reg invalid, dst 4(esi)
instrument_addorsub: arith ins is ADD (0xb7fee9d8)
instrument_addorsub: op1 and op2 of Arith are registers: 10 (eax), 8 (edx)
[movx] 0xb7fee9da movzx edx, word ptr [eax+0x4]
instrument_addorsub: arith ins is AND (0xb7fee9e5)
instrument_addorsub: op1 is reg (8) and op2 is immediate
instrument_test: op1 and op2 of are registers 9(ecx), 8(edx)
17 EFLAGS eflags, 1, 0
instrument_test: op1 and op2 of are registers 8(edx), 8(edx)
17 EFLAGS eflags, 1, 0
instrument_test: op1 and op2 of are registers 4(esi), 4(esi)
17 EFLAGS eflags, 1, 0
LEA: base reg is 5(ebp) index reg invalid, dst 6(esp)
instrument_addorsub: arith ins is ADD (0xb7feea17)
instrument_addorsub: op1 is reg (10) and op2 is immediate
instrument_test: op1 and op2 of are registers 3(edi), 3(edi)
17 EFLAGS eflags, 1, 0
instrument_test: op1 and op2 of are registers 10(eax), 10(eax)
17 EFLAGS eflags, 1, 0
instrument_addorsub: arith ins is ADD (0xb7feea61)
instrument_addorsub: op1 is register and op2 is mem
0xb7feea63: not instrument noop nop 
LEA: base reg is 4(esi) index reg invalid, dst 4(esi)
instrument_addorsub: arith ins is ADD (0xb7feea6e)
instrument_addorsub: op1 and op2 of Arith are registers: 10 (eax), 4 (esi)
[movx] 0xb7feea7a movzx ecx, word ptr [eax+0x6]
instrument_addorsub: arith ins is AND (0xb7feea80)
instrument_addorsub: op1 is reg (8) and op2 is immediate
instrument_test: op1 is mem and op2 is register
instrument_taint_regmem2flag: flags 63, reg 8 size 4, memsize 4
instrument_addorsub: arith ins is AND (0xb7feea90)
instrument_addorsub: op1 is reg (24) and op2 is immediate
instrument_addorsub: arith ins is ADD (0xb7feea95)
instrument_addorsub: op1 is register and op2 is mem
[movx] 0xb7feea98 movzx ecx, cx
instrument movx address 0xb7feea98 is src reg: 24 into dst reg: 9
instrument_addorsub: arith ins is ADD (0xb7feeaa7)
instrument_addorsub: op1 and op2 of Arith are registers: 9 (ecx), 3 (edi)
instrument_addorsub: arith ins is ADD (0xb7feeaad)
instrument_addorsub: op1 is register and op2 is mem
instrument_test: op1 and op2 of are registers 8(edx), 8(edx)
17 EFLAGS eflags, 1, 0
instrument_test: op1 and op2 of are registers 10(eax), 10(eax)
17 EFLAGS eflags, 1, 0
instrument_test: op1 and op2 of are registers 10(eax), 10(eax)
17 EFLAGS eflags, 1, 0
instrument_addorsub: arith ins is ADD (0xb7feeade)
instrument_addorsub: op1 is register and op2 is mem
LEA: base reg is 5(ebp) index reg invalid, dst 6(esp)
instrument_test: op1 and op2 of are registers 10(eax), 10(eax)
17 EFLAGS eflags, 1, 0
[movx] 0xb7feec61 movzx eax, al
instrument movx address 0xb7feec61 is src reg: 19 into dst reg: 10
instrument_addorsub: arith ins is OR (0xb7feec64)
instrument_addorsub: op1 and op2 of Arith are registers: 3 (edi), 10 (eax)
instrument_test: op1 and op2 of are registers 4(esi), 4(esi)
17 EFLAGS eflags, 1, 0
instrument_addorsub: arith ins is ADD (0xb7feec6a)
instrument_addorsub: op1 is reg (6) and op2 is immediate
instrument_test: op1 and op2 of are registers 10(eax), 10(eax)
17 EFLAGS eflags, 1, 0
instrument_addorsub: arith ins is ADD (0xb7fee9ad)
instrument_addorsub: op1 is register and op2 is mem
[movx] 0xb7fee9b2 movzx edx, word ptr [eax+0x4]
instrument_addorsub: arith ins is AND (0xb7fee9bd)
instrument_addorsub: op1 is reg (8) and op2 is immediate
instrument_test: op1 and op2 of are registers 9(ecx), 8(edx)
17 EFLAGS eflags, 1, 0
instrument_test: op1 and op2 of are registers 8(edx), 8(edx)
17 EFLAGS eflags, 1, 0
LEA: base reg is 4(esi) index reg invalid, dst 4(esi)
instrument_addorsub: arith ins is ADD (0xb7fee9d8)
instrument_addorsub: op1 and op2 of Arith are registers: 10 (eax), 8 (edx)
[movx] 0xb7fee9da movzx edx, word ptr [eax+0x4]
instrument_addorsub: arith ins is AND (0xb7fee9e5)
instrument_addorsub: op1 is reg (8) and op2 is immediate
instrument_test: op1 and op2 of are registers 9(ecx), 8(edx)
17 EFLAGS eflags, 1, 0
instrument_test: op1 and op2 of are registers 8(edx), 8(edx)
17 EFLAGS eflags, 1, 0
instrument_test: op1 and op2 of are registers 4(esi), 4(esi)
17 EFLAGS eflags, 1, 0
LEA: base reg is 5(ebp) index reg invalid, dst 6(esp)
instrument_test: op1 and op2 of are registers 10(eax), 10(eax)
17 EFLAGS eflags, 1, 0
instrument_addorsub: arith ins is ADD (0xb7feeade)
instrument_addorsub: op1 is register and op2 is mem
instrument_test: op1 is mem and op2 is imm
[movx] 0xb7feeaf3 movzx edx, word ptr [eax+0x4]
instrument_addorsub: arith ins is AND (0xb7feeb01)
instrument_addorsub: op1 is reg (8) and op2 is immediate
instrument_addorsub: arith ins is ADD (0xb7feeb0a)
instrument_addorsub: op1 is register and op2 is mem
instrument_addorsub: arith ins is ADD (0xb7feeb1a)
instrument_addorsub: op1 and op2 of Arith are registers: 3 (edi), 4 (esi)
instrument_test: op1 and op2 of are registers 8(edx), 8(edx)
17 EFLAGS eflags, 1, 0
LEA: base reg is 5(ebp) index reg invalid, dst 6(esp)
instrument_test: op1 and op2 of are registers 8(edx), 8(edx)
17 EFLAGS eflags, 1, 0
LEA: base reg is 5(ebp) index reg invalid, dst 6(esp)
instrument_addorsub: arith ins is ADD (0xb7feeae8)
instrument_addorsub: op1 and op2 of Arith are registers: 10 (eax), 8 (edx)
instrument_test: op1 is mem and op2 is imm
[movx] 0xb7feeaf3 movzx edx, word ptr [eax+0x4]
instrument_addorsub: arith ins is AND (0xb7feeb01)
instrument_addorsub: op1 is reg (8) and op2 is immediate
instrument_addorsub: arith ins is ADD (0xb7feeb0a)
instrument_addorsub: op1 is register and op2 is mem
instrument_addorsub: arith ins is ADD (0xb7feeb1a)
instrument_addorsub: op1 and op2 of Arith are registers: 3 (edi), 4 (esi)
instrument_test: op1 and op2 of are registers 8(edx), 8(edx)
17 EFLAGS eflags, 1, 0
LEA: base reg is 5(ebp) index reg invalid, dst 6(esp)
instrument_addorsub: arith ins is ADD (0xb7fee870)
instrument_addorsub: op1 and op2 of Arith are registers: 4 (esi), 10 (eax)
[movx] 0xb7fee875 movzx edi, word ptr [esi+0x4]
instrument_addorsub: arith ins is AND (0xb7fee87e)
instrument_addorsub: op1 is reg (3) and op2 is immediate
[movx] 0xb7fee881 movzx edi, di
instrument movx address 0xb7fee881 is src reg: 33 into dst reg: 3
instrument_addorsub: arith ins is ADD (0xb7fee88a)
instrument_addorsub: op1 is register and op2 is mem
instrument_test: op1 is mem and op2 is imm
instrument_addorsub: arith ins is ADD (0xb7fee9d8)
instrument_addorsub: op1 and op2 of Arith are registers: 10 (eax), 8 (edx)
[movx] 0xb7fee9da movzx edx, word ptr [eax+0x4]
instrument_addorsub: arith ins is AND (0xb7fee9e5)
instrument_addorsub: op1 is reg (8) and op2 is immediate
instrument_test: op1 and op2 of are registers 9(ecx), 8(edx)
17 EFLAGS eflags, 1, 0
instrument_test: op1 and op2 of are registers 8(edx), 8(edx)
17 EFLAGS eflags, 1, 0
instrument_test: op1 and op2 of are registers 4(esi), 4(esi)
17 EFLAGS eflags, 1, 0
LEA: base reg is 5(ebp) index reg invalid, dst 6(esp)
instrument_addorsub: arith ins is ADD (0xb7feea78)
instrument_addorsub: op1 and op2 of Arith are registers: 10 (eax), 8 (edx)
[movx] 0xb7feea7a movzx ecx, word ptr [eax+0x6]
instrument_addorsub: arith ins is AND (0xb7feea80)
instrument_addorsub: op1 is reg (8) and op2 is immediate
instrument_test: op1 is mem and op2 is register
instrument_taint_regmem2flag: flags 63, reg 8 size 4, memsize 4
instrument_addorsub: arith ins is AND (0xb7feea90)
instrument_addorsub: op1 is reg (24) and op2 is immediate
instrument_addorsub: arith ins is ADD (0xb7feea95)
instrument_addorsub: op1 is register and op2 is mem
[movx] 0xb7feea98 movzx ecx, cx
instrument movx address 0xb7feea98 is src reg: 24 into dst reg: 9
instrument_addorsub: arith ins is ADD (0xb7feeaa7)
instrument_addorsub: op1 and op2 of Arith are registers: 9 (ecx), 3 (edi)
instrument_addorsub: arith ins is ADD (0xb7feeaad)
instrument_addorsub: op1 is register and op2 is mem
instrument_test: op1 and op2 of are registers 8(edx), 8(edx)
17 EFLAGS eflags, 1, 0
instrument_test: op1 and op2 of are registers 10(eax), 10(eax)
17 EFLAGS eflags, 1, 0
instrument_test: op1 and op2 of are registers 10(eax), 10(eax)
17 EFLAGS eflags, 1, 0
instrument_test: op1 and op2 of are registers 9(ecx), 9(ecx)
17 EFLAGS eflags, 1, 0
instrument_addorsub: arith ins is ADD (0xb7fe0201)
instrument_addorsub: op1 is reg (6) and op2 is immediate
instrument_addorsub: arith ins is ADD (0xb7fe0201)
instrument_addorsub: op1 is reg (6) and op2 is immediate
instrument_addorsub: arith ins is ADD (0xb7fed417)
instrument_addorsub: op1 is reg (6) and op2 is immediate
[movx] 0xb7fe0fc3 movzx eax, byte ptr [ebx+0x86c]
instrument_test: op1 and op2 of are registers 9(ecx), 9(ecx)
17 EFLAGS eflags, 1, 0
instrument_test: op1 and op2 of are registers 10(eax), 10(eax)
17 EFLAGS eflags, 1, 0
instrument_addorsub: arith ins is XOR (0xb7fe0fe7)
instrument_addorsub: op1 and op2 of Arith are registers: 19 (al), 19 (al)
handling reg reset
instrument_test: op1 and op2 of are registers 10(eax), 10(eax)
17 EFLAGS eflags, 1, 0
instrument_addorsub: arith ins is XOR (0xb7fdf821)
instrument_addorsub: op1 and op2 of Arith are registers: 10 (eax), 10 (eax)
handling reg reset
instrument_addorsub: arith ins is ADD (0xb7fdf82a)
instrument_addorsub: op1 is reg (7) and op2 is immediate
instrument_addorsub: arith ins is SUB (0xb7fdf830)
instrument_addorsub: op1 is reg (6) and op2 is immediate
instrument_test: op1 is mem and op2 is imm
LEA: index reg is 4(esi) base reg invalid, dst 10(eax)
LEA: base reg is 4(esi) index reg invalid, dst 8(edx)
instrument_test: op1 is mem and op2 is imm
LEA: base reg is 10(eax) index reg invalid, dst 9(ecx)
LEA: base reg is 7(ebx) index reg invalid, dst 10(eax)
LEA: base reg is 7(ebx) index reg invalid, dst 10(eax)
LEA: base reg is 7(ebx) index reg invalid, dst 10(eax)
instrument_addorsub: arith ins is XOR (0xb7fdf8b1)
instrument_addorsub: op1 and op2 of Arith are registers: 8 (edx), 8 (edx)
handling reg reset
instrument_test: op1 and op2 of are registers 10(eax), 10(eax)
17 EFLAGS eflags, 1, 0
instrument_test: op1 is mem and op2 is imm
instrument_test: op1 and op2 of are registers 10(eax), 10(eax)
17 EFLAGS eflags, 1, 0
instrument_test: op1 is mem and op2 is imm
instrument_test: op1 and op2 of are registers 4(esi), 8(edx)
17 EFLAGS eflags, 1, 0
LEA: base reg is 7(ebx) index reg invalid, dst 10(eax)
LEA: base reg is 7(ebx) index reg invalid, dst 10(eax)
LEA: base reg is 7(ebx) index reg invalid, dst 10(eax)
instrument_addorsub: arith ins is ADD (0xb7fef9a9)
instrument_addorsub: op1 is reg (7) and op2 is immediate
instrument_addorsub: arith ins is SUB (0xb7fef9af)
instrument_addorsub: op1 is reg (6) and op2 is immediate
instrument_test: op1 and op2 of are registers 10(eax), 10(eax)
17 EFLAGS eflags, 1, 0
instrument_test: op1 and op2 of are registers 8(edx), 8(edx)
17 EFLAGS eflags, 1, 0
LEA: base reg is 10(eax) index reg invalid, dst 8(edx)
instrument_test: op1 and op2 of are registers 3(edi), 3(edi)
17 EFLAGS eflags, 1, 0
instrument_test: op1 and op2 of are registers 10(eax), 10(eax)
17 EFLAGS eflags, 1, 0
LEA: base reg is 9(ecx) index reg invalid, dst 4(esi)
instrument_addorsub: arith ins is AND (0xb7fefa7b)
instrument_addorsub: op1 and op2 of Arith are registers: 4 (esi), 10 (eax)
instrument_test: op1 and op2 of are registers 10(eax), 9(ecx)
17 EFLAGS eflags, 1, 0
instrument_addorsub: arith ins is SUB (0xb7fefa8e)
instrument_addorsub: op1 is register and op2 is mem
instrument_test: op1 and op2 of are registers 10(eax), 5(ebp)
17 EFLAGS eflags, 1, 0
instrument_addorsub: arith ins is SUB (0xb7fefaa6)
instrument_addorsub: op1 is mem and op2 is register
instrument_addorsub: arith ins is XOR (0xb7fefaae)
instrument_addorsub: op1 and op2 of Arith are registers: 8 (edx), 8 (edx)
handling reg reset
instrument_addorsub: arith ins is ADD (0xb7fefab0)
instrument_addorsub: op1 is register and op2 is mem
div instruction: div ecx
imul instruction: imul eax, ecx
num operands is 3
instrument_addorsub: arith ins is ADD (0xb7fefab9)
instrument_addorsub: op1 and op2 of Arith are registers: 10 (eax), 4 (esi)
instrument_addorsub: arith ins is ADD (0xb7fefac2)
instrument_addorsub: op1 is register and op2 is mem
instrument_test: op1 and op2 of are registers 10(eax), 8(edx)
17 EFLAGS eflags, 1, 0
instrument_addorsub: arith ins is SUB (0xb7fefad0)
instrument_addorsub: op1 and op2 of Arith are registers: 4 (esi), 5 (ebp)
instrument_addorsub: arith ins is ADD (0xb7fefa3d)
instrument_addorsub: op1 is mem and op2 is immediate
instrument_test: op1 and op2 of are registers 3(edi), 3(edi)
17 EFLAGS eflags, 1, 0
instrument_test: op1 is mem and op2 is register
instrument_taint_regmem2flag: flags 63, reg 10 size 4, memsize 4
LEA: base reg is 9(ecx) index reg invalid, dst 4(esi)
instrument_addorsub: arith ins is AND (0xb7fefa7b)
instrument_addorsub: op1 and op2 of Arith are registers: 4 (esi), 10 (eax)
instrument_test: op1 and op2 of are registers 10(eax), 9(ecx)
17 EFLAGS eflags, 1, 0
instrument_addorsub: arith ins is SUB (0xb7fefa8e)
instrument_addorsub: op1 is register and op2 is mem
instrument_test: op1 and op2 of are registers 10(eax), 5(ebp)
17 EFLAGS eflags, 1, 0
instrument_addorsub: arith ins is XOR (0xb7fefb07)
instrument_addorsub: op1 and op2 of Arith are registers: 8 (edx), 8 (edx)
handling reg reset
div instruction: div edi
imul instruction: imul eax, edi
num operands is 3
instrument_addorsub: arith ins is ADD (0xb7fefb0e)
instrument_addorsub: op1 is reg (10) and op2 is immediate
instrument_addorsub: arith ins is ADD (0xb7fefb23)
instrument_addorsub: op1 is reg (6) and op2 is immediate
instrument_addorsub: arith ins is ADD (0xb7fefcc9)
instrument_addorsub: op1 is reg (7) and op2 is immediate
instrument_addorsub: arith ins is SUB (0xb7fefccf)
instrument_addorsub: op1 is reg (6) and op2 is immediate
instrument_test: op1 and op2 of are registers 10(eax), 10(eax)
17 EFLAGS eflags, 1, 0
instrument_test: op1 is reg and op2 is imm
instrument_test: op1 is reg and op2 is imm
instrument_addorsub: arith ins is XOR (0xb7fefd14)
instrument_addorsub: op1 and op2 of Arith are registers: 10 (eax), 10 (eax)
handling reg reset
instrument_test: op1 is reg and op2 is imm
instrument_addorsub: arith ins is AND (0xb7fefd20)
instrument_addorsub: op1 is reg (8) and op2 is immediate
instrument_addorsub: arith ins is ADD (0xb7fef85a)
instrument_addorsub: op1 is reg (7) and op2 is immediate
instrument_addorsub: arith ins is SUB (0xb7fef860)
instrument_addorsub: op1 is reg (6) and op2 is immediate
LEA: base reg is 8(edx) index reg invalid, dst 4(esi)
instrument_addorsub: arith ins is ADD (0xb7fef874)
instrument_addorsub: op1 is reg (8) and op2 is immediate
instrument_test: op1 and op2 of are registers 10(eax), 10(eax)
17 EFLAGS eflags, 1, 0
LEA: base reg is 10(eax) index reg invalid, dst 8(edx)
instrument_addorsub: arith ins is ADD (0xb7fef88b)
instrument_addorsub: op1 is reg (6) and op2 is immediate
instrument_test: op1 and op2 of are registers 10(eax), 10(eax)
17 EFLAGS eflags, 1, 0
instrument_addorsub: arith ins is ADD (0xb7fefd30)
instrument_addorsub: op1 is reg (6) and op2 is immediate
instrument_test: op1 and op2 of are registers 10(eax), 10(eax)
17 EFLAGS eflags, 1, 0
LEA: base reg is 7(ebx) index reg invalid, dst 4(esi)
LEA: base reg is 6(esp) index reg invalid, dst 9(ecx)
op1 and op2 of xchg are registers
0xb7fdf96a: not instrument an interrupt
op1 and op2 of xchg are registers
instrument_test: op1 and op2 of are registers 10(eax), 10(eax)
17 EFLAGS eflags, 1, 0
LEA: index reg is 10(eax) base reg invalid, dst 10(eax)
instrument_addorsub: arith ins is ADD (0xb7fdf9b8)
instrument_addorsub: op1 is reg (6) and op2 is immediate
instrument_test: op1 and op2 of are registers 10(eax), 10(eax)
17 EFLAGS eflags, 1, 0
instrument_addorsub: arith ins is XOR (0xb7fe0fe7)
instrument_addorsub: op1 and op2 of Arith are registers: 19 (al), 19 (al)
handling reg reset
instrument_test: op1 and op2 of are registers 10(eax), 10(eax)
17 EFLAGS eflags, 1, 0
instrument_test: op1 and op2 of are registers 10(eax), 10(eax)
17 EFLAGS eflags, 1, 0
instrument_test: op1 and op2 of are registers 8(edx), 8(edx)
17 EFLAGS eflags, 1, 0
instrument_test: op1 and op2 of are registers 10(eax), 10(eax)
17 EFLAGS eflags, 1, 0
instrument_test: op1 and op2 of are registers 10(eax), 10(eax)
17 EFLAGS eflags, 1, 0
instrument_addorsub: arith ins is XOR (0xb7fe1e8d)
instrument_addorsub: op1 and op2 of Arith are registers: 4 (esi), 4 (esi)
handling reg reset
instrument_addorsub: arith ins is ADD (0xb7fe1104)
instrument_addorsub: op1 is reg (10) and op2 is immediate
instrument_addorsub: arith ins is AND (0xb7fe1109)
instrument_addorsub: op1 is reg (23) and op2 is immediate
instrument_test: op1 and op2 of are registers 19(al), 19(al)
17 EFLAGS eflags, 1, 0
instrument_test: op1 and op2 of are registers 9(ecx), 9(ecx)
17 EFLAGS eflags, 1, 0
instrument_addorsub: arith ins is XOR (0xb7fe17ca)
instrument_addorsub: op1 and op2 of Arith are registers: 10 (eax), 10 (eax)
handling reg reset
instrument_test: op1 and op2 of are registers 9(ecx), 9(ecx)
17 EFLAGS eflags, 1, 0
instrument_addorsub: arith ins is OR (0xb7fe17d4)
instrument_addorsub: op1 is mem and op2 is register
0xb7fe17da: not instrument an rdtsc
LEA: index reg is 9(ecx) base reg invalid, dst 10(eax)
instrument_test: op1 and op2 of are registers 4(esi), 4(esi)
17 EFLAGS eflags, 1, 0
[movx] 0xb7fe1870 movzx esi, byte ptr [ebp-0x70]
0xb7fe1874: not instrument an rdtsc
instrument_addorsub: arith ins is SUB (0xb7fe1876)
instrument_addorsub: op1 is register and op2 is mem
instrument_addorsub: arith ins is SBB (0xb7fe1879)
instrument_addorsub: op1 is register and op2 is mem
instrument_test: op1 and op2 of are registers 10(eax), 10(eax)
17 EFLAGS eflags, 1, 0
instrument_test: op1 and op2 of are registers 10(eax), 10(eax)
17 EFLAGS eflags, 1, 0
instrument_test: op1 is mem and op2 is register
instrument_taint_regmem2flag: flags 63, reg 3 size 4, memsize 4
instrument_addorsub: arith ins is XOR (0xb7fe182d)
instrument_addorsub: op1 and op2 of Arith are registers: 10 (eax), 10 (eax)
handling reg reset
instrument_test: op1 and op2 of are registers 8(edx), 8(edx)
17 EFLAGS eflags, 1, 0
instrument_test: op1 and op2 of are registers 10(eax), 10(eax)
17 EFLAGS eflags, 1, 0
instrument_test: op1 is mem and op2 is register
instrument_taint_regmem2flag: flags 63, reg 3 size 4, memsize 4
instrument_addorsub: arith ins is XOR (0xb7fe182d)
instrument_addorsub: op1 and op2 of Arith are registers: 10 (eax), 10 (eax)
handling reg reset
instrument_test: op1 and op2 of are registers 8(edx), 8(edx)
17 EFLAGS eflags, 1, 0
instrument_test: op1 and op2 of are registers 10(eax), 10(eax)
17 EFLAGS eflags, 1, 0
instrument_test: op1 is mem and op2 is imm
instrument_addorsub: arith ins is SUB (0xb7fe1865)
instrument_addorsub: op1 is mem and op2 is immediate
instrument_addorsub: arith ins is SUB (0xb7fe1869)
instrument_addorsub: op1 is reg (4) and op2 is immediate
instrument_test: op1 and op2 of are registers 4(esi), 4(esi)
17 EFLAGS eflags, 1, 0
[movx] 0xb7fe1870 movzx esi, byte ptr [ebp-0x70]
0xb7fe1874: not instrument an rdtsc
instrument_addorsub: arith ins is SUB (0xb7fe1876)
instrument_addorsub: op1 is register and op2 is mem
instrument_addorsub: arith ins is SBB (0xb7fe1879)
instrument_addorsub: op1 is register and op2 is mem
instrument_test: op1 and op2 of are registers 10(eax), 10(eax)
17 EFLAGS eflags, 1, 0
instrument_addorsub: arith ins is SUB (0xb7fe9bf6)
instrument_addorsub: op1 is reg (6) and op2 is immediate
instrument_addorsub: arith ins is ADD (0xb7fe9c04)
instrument_addorsub: op1 is reg (7) and op2 is immediate
instrument_test: op1 is reg and op2 is imm
instrument_addorsub: arith ins is XOR (0xb7fe9c18)
instrument_addorsub: op1 and op2 of Arith are registers: 10 (eax), 10 (eax)
handling reg reset
instrument_test: op1 and op2 of are registers 8(edx), 8(edx)
17 EFLAGS eflags, 1, 0
instrument_addorsub: arith ins is OR (0xb7fe9c1f)
instrument_addorsub: op1 is mem and op2 is register
instrument_test: op1 is mem and op2 is imm
instrument_test: op1 and op2 of are registers 4(esi), 4(esi)
17 EFLAGS eflags, 1, 0
instrument_test: op1 and op2 of are registers 9(ecx), 9(ecx)
17 EFLAGS eflags, 1, 0
instrument_test: op1 is mem and op2 is imm
LEA: base reg is 7(ebx) index reg invalid, dst 8(edx)
instrument_addorsub: arith ins is AND (0xb7fe9c3f)
instrument_addorsub: op1 is reg (10) and op2 is immediate
instrument_test: op1 is mem and op2 is imm
instrument_test: op1 and op2 of are registers 8(edx), 8(edx)
17 EFLAGS eflags, 1, 0
instrument_test: op1 and op2 of are registers 4(esi), 4(esi)
17 EFLAGS eflags, 1, 0
instrument_test: op1 and op2 of are registers 9(ecx), 9(ecx)
17 EFLAGS eflags, 1, 0
LEA: base reg is 5(ebp) index reg invalid, dst 10(eax)
instrument_addorsub: arith ins is XOR (0xb7fe9c9a)
instrument_addorsub: op1 and op2 of Arith are registers: 10 (eax), 10 (eax)
handling reg reset
instrument_addorsub: arith ins is ADD (0xb7fe9ca9)
instrument_addorsub: op1 is reg (10) and op2 is immediate
instrument_test: op1 is reg and op2 is imm
instrument_test: op1 and op2 of are registers 10(eax), 10(eax)
17 EFLAGS eflags, 1, 0
instrument_test: op1 and op2 of are registers 8(edx), 8(edx)
17 EFLAGS eflags, 1, 0
instrument_test: op1 and op2 of are registers 8(edx), 8(edx)
17 EFLAGS eflags, 1, 0
LEA: base reg is 7(ebx) index reg invalid, dst 8(edx)
LEA: base reg is 5(ebp) index reg invalid, dst 10(eax)
instrument_addorsub: arith ins is XOR (0xb7fe9c9a)
instrument_addorsub: op1 and op2 of Arith are registers: 10 (eax), 10 (eax)
handling reg reset
instrument_addorsub: arith ins is ADD (0xb7fe9ca9)
instrument_addorsub: op1 is reg (10) and op2 is immediate
instrument_test: op1 is reg and op2 is imm
instrument_test: op1 and op2 of are registers 10(eax), 10(eax)
17 EFLAGS eflags, 1, 0
instrument_test: op1 and op2 of are registers 8(edx), 8(edx)
17 EFLAGS eflags, 1, 0
instrument_addorsub: arith ins is ADD (0xb7fe9ca9)
instrument_addorsub: op1 is reg (10) and op2 is immediate
instrument_test: op1 is reg and op2 is imm
instrument_test: op1 and op2 of are registers 10(eax), 10(eax)
17 EFLAGS eflags, 1, 0
instrument_test: op1 and op2 of are registers 8(edx), 8(edx)
17 EFLAGS eflags, 1, 0
instrument_test: op1 and op2 of are registers 9(ecx), 8(edx)
17 EFLAGS eflags, 1, 0
instrument_test: op1 and op2 of are registers 9(ecx), 9(ecx)
17 EFLAGS eflags, 1, 0
instrument_test: op1 is mem and op2 is imm
instrument_addorsub: arith ins is AND (0xb7fe9d05)
instrument_addorsub: op1 is reg (3) and op2 is immediate
instrument_addorsub: arith ins is XOR (0xb7fe9d0b)
instrument_addorsub: op1 and op2 of Arith are registers: 8 (edx), 8 (edx)
handling reg reset
LEA: base reg is 5(ebp) index reg invalid, dst 3(edi)
LEA: base reg is 5(ebp) index reg invalid, dst 9(ecx)
LEA: base reg is 7(ebx) index reg invalid, dst 3(edi)
instrument_addorsub: arith ins is ADD (0xb7fe9d45)
instrument_addorsub: op1 and op2 of Arith are registers: 10 (eax), 4 (esi)
instrument_test: op1 and op2 of are registers 8(edx), 8(edx)
17 EFLAGS eflags, 1, 0
instrument_test: op1 is mem and op2 is imm
instrument_test: op1 and op2 of are registers 8(edx), 9(ecx)
17 EFLAGS eflags, 1, 0
instrument_addorsub: arith ins is ADD (0xb7fea474)
instrument_addorsub: op1 is register and op2 is mem
instrument_addorsub: arith ins is AND (0xb7fe9d05)
instrument_addorsub: op1 is reg (3) and op2 is immediate
instrument_addorsub: arith ins is XOR (0xb7fe9d0b)
instrument_addorsub: op1 and op2 of Arith are registers: 8 (edx), 8 (edx)
handling reg reset
LEA: base reg is 5(ebp) index reg invalid, dst 3(edi)
LEA: base reg is 5(ebp) index reg invalid, dst 9(ecx)
LEA: base reg is 7(ebx) index reg invalid, dst 3(edi)
instrument_addorsub: arith ins is ADD (0xb7fe9d45)
instrument_addorsub: op1 and op2 of Arith are registers: 10 (eax), 4 (esi)
instrument_test: op1 and op2 of are registers 8(edx), 8(edx)
17 EFLAGS eflags, 1, 0
instrument_test: op1 is mem and op2 is register
instrument_taint_regmem2flag: flags 63, reg 4 size 4, memsize 4
LEA: base reg is 7(ebx) index reg invalid, dst 10(eax)
LEA: base reg is 4(esi) index reg invalid, dst 4(esi)
[movx] 0xb7fe9d70 movzx edx, al
instrument movx address 0xb7fe9d70 is src reg: 19 into dst reg: 8
instrument_addorsub: arith ins is ADD (0xb7fe9d73)
instrument_addorsub: op1 and op2 of Arith are registers: 3 (edi), 9 (ecx)
instrument_test: op1 is reg and op2 is imm
instrument_test: op1 is mem and op2 is register
instrument_taint_regmem2flag: flags 63, reg 10 size 4, memsize 4
instrument_test: op1 and op2 of are registers 3(edi), 3(edi)
17 EFLAGS eflags, 1, 0
instrument_test: op1 is mem and op2 is register
instrument_taint_regmem2flag: flags 63, reg 4 size 4, memsize 4
instrument_addorsub: arith ins is ADD (0xb7fea124)
instrument_addorsub: op1 is register and op2 is mem
instrument_test: op1 is mem and op2 is imm
instrument_addorsub: arith ins is ADD (0xb7fea146)
instrument_addorsub: op1 is reg (4) and op2 is immediate
instrument_addorsub: arith ins is ADD (0xb7fea149)
instrument_addorsub: op1 is mem and op2 is register
instrument_test: op1 and op2 of are registers 9(ecx), 4(esi)
17 EFLAGS eflags, 1, 0
instrument_test: op1 and op2 of are registers 10(eax), 10(eax)
17 EFLAGS eflags, 1, 0
instrument_test: op1 is mem and op2 is register
instrument_taint_regmem2flag: flags 63, reg 10 size 4, memsize 4
instrument_addorsub: arith ins is ADD (0xb7fea13a)
instrument_addorsub: op1 and op2 of Arith are registers: 10 (eax), 8 (edx)
instrument_test: op1 is mem and op2 is imm
instrument_addorsub: arith ins is ADD (0xb7fea146)
instrument_addorsub: op1 is reg (4) and op2 is immediate
instrument_addorsub: arith ins is ADD (0xb7fea149)
instrument_addorsub: op1 is mem and op2 is register
instrument_test: op1 and op2 of are registers 9(ecx), 4(esi)
17 EFLAGS eflags, 1, 0
instrument_test: op1 and op2 of are registers 10(eax), 10(eax)
17 EFLAGS eflags, 1, 0
instrument_test: op1 is mem and op2 is register
instrument_taint_regmem2flag: flags 63, reg 10 size 4, memsize 4
LEA: base reg is 7(ebx) index reg invalid, dst 10(eax)
0xb7fea17e: not instrument noop data16 nop 
instrument_addorsub: arith ins is ADD (0xb7fea18c)
instrument_addorsub: op1 is register and op2 is mem
[movx] 0xb7fea19c movzx edi, word ptr [edi+edx*2]
instrument_addorsub: arith ins is ADD (0xb7fea1a3)
instrument_addorsub: op1 is register and op2 is mem
[movx] 0xb7fea1a9 movzx esi, al
instrument movx address 0xb7fea1a9 is src reg: 19 into dst reg: 4
instrument_test: op1 is reg and op2 is imm
instrument_test: op1 and op2 of are registers 4(esi), 4(esi)
17 EFLAGS eflags, 1, 0
[movx] 0xb7fea1c9 movzx eax, byte ptr [eax+0xc]
instrument_test: op1 and op2 of are registers 19(al), 19(al)
17 EFLAGS eflags, 1, 0
instrument_test: op1 is mem and op2 is register
instrument_taint_regmem2flag: flags 63, reg 8 size 4, memsize 4
LEA: base reg is 4(esi) index reg invalid, dst 10(eax)
instrument_test: op1 is reg and op2 is imm
instrument_test: op1 is reg and op2 is imm
instrument_addorsub: arith ins is OR (0xb7fea1f9)
instrument_addorsub: op1 and op2 of Arith are registers: 8 (edx), 10 (eax)
instrument_test: op1 and op2 of are registers 25(dl), 25(dl)
17 EFLAGS eflags, 1, 0
instrument_test: op1 is reg and op2 is imm
instrument_test: op1 is reg and op2 is imm
instrument_addorsub: arith ins is OR (0xb7fea210)
instrument_addorsub: op1 and op2 of Arith are registers: 10 (eax), 8 (edx)
[movx] 0xb7fea212 movzx eax, al
instrument movx address 0xb7fea212 is src reg: 19 into dst reg: 10
instrument_addorsub: arith ins is XOR (0xb7fea215)
instrument_addorsub: op1 and op2 of Arith are registers: 8 (edx), 8 (edx)
handling reg reset
instrument_test: op1 is reg and op2 is imm
instrument_addorsub: arith ins is AND (0xb7fea21d)
instrument_addorsub: op1 is reg (3) and op2 is immediate
instrument_addorsub: arith ins is OR (0xb7fea22f)
instrument_addorsub: op1 is mem and op2 is register
instrument_addorsub: arith ins is ADD (0xb7fea238)
instrument_addorsub: op1 is register and op2 is mem
instrument_test: op1 and op2 of are registers 9(ecx), 9(ecx)
17 EFLAGS eflags, 1, 0
LEA: base reg is 5(ebp) index reg invalid, dst 9(ecx)
instrument_addorsub: arith ins is ADD (0xb7fea261)
instrument_addorsub: op1 is register and op2 is mem
instrument_addorsub: arith ins is SUB (0xb7fe868b)
instrument_addorsub: op1 is reg (6) and op2 is immediate
[movx] 0xb7fe8699 movzx eax, byte ptr [eax]
instrument_addorsub: arith ins is ADD (0xb7fe86a1)
instrument_addorsub: op1 is reg (7) and op2 is immediate
instrument_test: op1 and op2 of are registers 19(al), 19(al)
17 EFLAGS eflags, 1, 0
0xb7fe86ae: not instrument noop data16 nop 
instrument_addorsub: arith ins is ADD (0xb7fe86b2)
instrument_addorsub: op1 is reg (8) and op2 is immediate
instrument_addorsub: arith ins is ADD (0xb7fe86b8)
instrument_addorsub: op1 and op2 of Arith are registers: 3 (edi), 9 (ecx)
instrument_addorsub: arith ins is ADD (0xb7fe86ba)
instrument_addorsub: op1 and op2 of Arith are registers: 3 (edi), 10 (eax)
[movx] 0xb7fe86bc movzx eax, byte ptr [edx]
instrument_test: op1 and op2 of are registers 19(al), 19(al)
17 EFLAGS eflags, 1, 0
instrument_addorsub: arith ins is ADD (0xb7fe86c6)
instrument_addorsub: op1 is mem and op2 is immediate
instrument_test: op1 and op2 of are registers 9(ecx), 9(ecx)
17 EFLAGS eflags, 1, 0
instrument_addorsub: arith ins is ADD (0xb7fe86b2)
instrument_addorsub: op1 is reg (8) and op2 is immediate
instrument_addorsub: arith ins is ADD (0xb7fe86b8)
instrument_addorsub: op1 and op2 of Arith are registers: 3 (edi), 9 (ecx)
instrument_addorsub: arith ins is ADD (0xb7fe86ba)
instrument_addorsub: op1 and op2 of Arith are registers: 3 (edi), 10 (eax)
[movx] 0xb7fe86bc movzx eax, byte ptr [edx]
instrument_test: op1 and op2 of are registers 19(al), 19(al)
17 EFLAGS eflags, 1, 0
instrument_addorsub: arith ins is ADD (0xb7fe86c6)
instrument_addorsub: op1 is mem and op2 is immediate
instrument_test: op1 and op2 of are registers 9(ecx), 9(ecx)
17 EFLAGS eflags, 1, 0
instrument_test: op1 is mem and op2 is imm
instrument_test: op1 and op2 of are registers 8(edx), 8(edx)
17 EFLAGS eflags, 1, 0
instrument_test: op1 and op2 of are registers 10(eax), 10(eax)
17 EFLAGS eflags, 1, 0
LEA: base reg is 5(ebp) index reg invalid, dst 9(ecx)
LEA: base reg is 5(ebp) index reg invalid, dst 9(ecx)
instrument_addorsub: arith ins is SUB (0xb7fe7e36)
instrument_addorsub: op1 is reg (6) and op2 is immediate
instrument_addorsub: arith ins is ADD (0xb7fe7e54)
instrument_addorsub: op1 is reg (7) and op2 is immediate
LEA: base reg is 7(ebx) index reg invalid, dst 10(eax)
0xb7fe7ea6: not instrument noop data16 nop 
instrument_test: op1 is mem and op2 is register
instrument_taint_regmem2flag: flags 63, reg 4 size 4, memsize 4
instrument_test: op1 is mem and op2 is imm
instrument_test: op1 is mem and op2 is imm
instrument_test: op1 is mem and op2 is imm
instrument_test: op1 is mem and op2 is imm
instrument_test: op1 and op2 of are registers 10(eax), 10(eax)
17 EFLAGS eflags, 1, 0
instrument_test: op1 and op2 of are registers 8(edx), 8(edx)
17 EFLAGS eflags, 1, 0
instrument_addorsub: arith ins is AND (0xb7fe7f39)
instrument_addorsub: op1 is register and op2 is mem
instrument_addorsub: arith ins is AND (0xb7fe7f5a)
instrument_addorsub: op1 and op2 of Arith are registers: 10 (eax), 8 (edx)
instrument_test: op1 is reg and op2 is imm
instrument_test: op1 is mem and op2 is imm
instrument_test: op1 and op2 of are registers 9(ecx), 9(ecx)
17 EFLAGS eflags, 1, 0
instrument_test: op1 and op2 of are registers 10(eax), 10(eax)
17 EFLAGS eflags, 1, 0
instrument_test: op1 and op2 of are registers 10(eax), 10(eax)
17 EFLAGS eflags, 1, 0
instrument_addorsub: arith ins is ADD (0xb7fe7fa0)
instrument_addorsub: op1 is reg (3) and op2 is immediate
instrument_test: op1 is mem and op2 is register
instrument_taint_regmem2flag: flags 63, reg 3 size 4, memsize 4
instrument_addorsub: arith ins is ADD (0xb7fe7fad)
instrument_addorsub: op1 is reg (6) and op2 is immediate
instrument_addorsub: arith ins is XOR (0xb7fe7fb0)
instrument_addorsub: op1 and op2 of Arith are registers: 10 (eax), 10 (eax)
handling reg reset
instrument_test: op1 is mem and op2 is register
instrument_taint_regmem2flag: flags 63, reg 4 size 4, memsize 4
instrument_test: op1 is mem and op2 is imm
instrument_test: op1 is mem and op2 is imm
instrument_addorsub: arith ins is XOR (0xb7fe849c)
instrument_addorsub: op1 and op2 of Arith are registers: 8 (edx), 8 (edx)
handling reg reset
div instruction: div dword ptr [esp+0x18]
div addrsize 4
instrument_test: op1 and op2 of are registers 10(eax), 10(eax)
17 EFLAGS eflags, 1, 0
LEA: base reg is 6(esp) index reg invalid, dst 10(eax)
instrument_addorsub: arith ins is XOR (0xb7fe84e1)
instrument_addorsub: op1 and op2 of Arith are registers: 8 (edx), 10 (eax)
instrument_addorsub: arith ins is SUB (0xb7fe84ed)
instrument_addorsub: op1 is register and op2 is mem
instrument_addorsub: arith ins is ADD (0xb7fe8503)
instrument_addorsub: op1 is register and op2 is mem
instrument_addorsub: arith ins is ADD (0xb7fe84d0)
instrument_addorsub: op1 is reg (4) and op2 is immediate
instrument_test: op1 is reg and op2 is imm
instrument_addorsub: arith ins is XOR (0xb7fe84e1)
instrument_addorsub: op1 and op2 of Arith are registers: 8 (edx), 10 (eax)
instrument_addorsub: arith ins is SUB (0xb7fe84ed)
instrument_addorsub: op1 is register and op2 is mem
instrument_addorsub: arith ins is ADD (0xb7fe8503)
instrument_addorsub: op1 is register and op2 is mem
instrument_addorsub: arith ins is SUB (0xb7fe7ca8)
instrument_addorsub: op1 is reg (6) and op2 is immediate
[movx] 0xb7fe7cab movzx eax, byte ptr [eax+0xc]
instrument_addorsub: arith ins is ADD (0xb7fe7cb7)
instrument_addorsub: op1 is reg (7) and op2 is immediate
instrument_addorsub: arith ins is AND (0xb7fe7cbd)
instrument_addorsub: op1 is reg (10) and op2 is immediate
instrument_test: op1 and op2 of are registers 8(edx), 8(edx)
17 EFLAGS eflags, 1, 0
instrument_addorsub: arith ins is XOR (0xb7fe7cc8)
instrument_addorsub: op1 and op2 of Arith are registers: 8 (edx), 8 (edx)
handling reg reset
instrument_test: op1 is mem and op2 is imm
instrument_test: op1 is mem and op2 is register
instrument_taint_regmem2flag: flags 59, reg 8 size 4, memsize 4
instrument_test: op1 is mem and op2 is register
instrument_taint_regmem2flag: flags 63, reg 3 size 4, memsize 4
instrument_addorsub: arith ins is ADD (0xb7fe7cf8)
instrument_addorsub: op1 is register and op2 is mem
instrument_test: op1 and op2 of are registers 5(ebp), 5(ebp)
17 EFLAGS eflags, 1, 0
instrument_test: op1 and op2 of are registers 10(eax), 10(eax)
17 EFLAGS eflags, 1, 0
[movx] 0xb7fe7d25 movzx esi, word ptr [eax+ecx*2]
instrument_addorsub: arith ins is AND (0xb7fe7d2b)
instrument_addorsub: op1 is reg (10) and op2 is immediate
instrument_addorsub: arith ins is ADD (0xb7fe7d33)
instrument_addorsub: op1 is register and op2 is mem
instrument_test: op1 is mem and op2 is register
instrument_taint_regmem2flag: flags 63, reg 8 size 4, memsize 4
instrument_test: op1 and op2 of are registers 10(eax), 10(eax)
17 EFLAGS eflags, 1, 0
instrument_addorsub: arith ins is ADD (0xb7fe7d53)
instrument_addorsub: op1 is reg (6) and op2 is immediate
instrument_test: op1 and op2 of are registers 10(eax), 10(eax)
17 EFLAGS eflags, 1, 0
[movx] 0xb7fe7fc0 movzx edx, byte ptr [eax+0xc]
instrument_test: op1 is reg and op2 is imm
instrument_test: op1 is reg and op2 is imm
instrument_test: op1 is reg and op2 is imm
instrument_addorsub: arith ins is ADD (0xb7fe7ffe)
instrument_addorsub: op1 is reg (6) and op2 is immediate
instrument_test: op1 is reg and op2 is imm
instrument_test: op1 and op2 of are registers 4(esi), 4(esi)
17 EFLAGS eflags, 1, 0
instrument_test: op1 and op2 of are registers 8(edx), 8(edx)
17 EFLAGS eflags, 1, 0
[movx] 0xb7fe87a6 movzx eax, byte ptr [edx+0xd]
instrument_addorsub: arith ins is AND (0xb7fe87aa)
instrument_addorsub: op1 is reg (10) and op2 is immediate
instrument_test: op1 is reg and op2 is imm
[movx] 0xb7fe87bb movzx eax, byte ptr [esi+0x194]
instrument_addorsub: arith ins is AND (0xb7fe87c2)
instrument_addorsub: op1 is reg (10) and op2 is immediate
instrument_test: op1 is reg and op2 is imm
instrument_test: op1 and op2 of are registers 8(edx), 8(edx)
17 EFLAGS eflags, 1, 0
instrument_test: op1 is reg and op2 is imm
LEA: base reg is 5(ebp) index reg invalid, dst 6(esp)
instrument_addorsub: arith ins is SUB (0xb7fea294)
instrument_addorsub: op1 is reg (6) and op2 is immediate
instrument_test: op1 and op2 of are registers 3(edi), 3(edi)
17 EFLAGS eflags, 1, 0
instrument_addorsub: arith ins is ADD (0xb7fea2ae)
instrument_addorsub: op1 is register and op2 is mem
[movx] 0xb7fea2b0 movzx edx, byte ptr [ecx+0xc]
instrument_addorsub: arith ins is AND (0xb7fea2b4)
instrument_addorsub: op1 is reg (8) and op2 is immediate
instrument_test: op1 is reg and op2 is imm
instrument_test: op1 is reg and op2 is imm
instrument_addorsub: arith ins is ADD (0xb7fea41b)
instrument_addorsub: op1 is mem and op2 is register
instrument_addorsub: arith ins is ADD (0xb7fea2f0)
instrument_addorsub: op1 is mem and op2 is immediate
instrument_test: op1 is mem and op2 is register
instrument_taint_regmem2flag: flags 63, reg 10 size 4, memsize 4
instrument_addorsub: arith ins is ADD (0xb7fea18c)
instrument_addorsub: op1 is register and op2 is mem
[movx] 0xb7fea19c movzx edi, word ptr [edi+edx*2]
instrument_addorsub: arith ins is ADD (0xb7fea1a3)
instrument_addorsub: op1 is register and op2 is mem
[movx] 0xb7fea1a9 movzx esi, al
instrument movx address 0xb7fea1a9 is src reg: 19 into dst reg: 4
instrument_test: op1 is reg and op2 is imm
instrument_test: op1 and op2 of are registers 4(esi), 4(esi)
17 EFLAGS eflags, 1, 0
[movx] 0xb7fea1c9 movzx eax, byte ptr [eax+0xc]
instrument_test: op1 and op2 of are registers 19(al), 19(al)
17 EFLAGS eflags, 1, 0
instrument_test: op1 is mem and op2 is register
instrument_taint_regmem2flag: flags 63, reg 8 size 4, memsize 4
LEA: base reg is 4(esi) index reg invalid, dst 10(eax)
instrument_test: op1 is reg and op2 is imm
instrument_test: op1 is reg and op2 is imm
instrument_addorsub: arith ins is OR (0xb7fea1f9)
instrument_addorsub: op1 and op2 of Arith are registers: 8 (edx), 10 (eax)
instrument_test: op1 and op2 of are registers 25(dl), 25(dl)
17 EFLAGS eflags, 1, 0
instrument_test: op1 is reg and op2 is imm
instrument_test: op1 is reg and op2 is imm
instrument_addorsub: arith ins is OR (0xb7fea210)
instrument_addorsub: op1 and op2 of Arith are registers: 10 (eax), 8 (edx)
[movx] 0xb7fea212 movzx eax, al
instrument movx address 0xb7fea212 is src reg: 19 into dst reg: 10
instrument_addorsub: arith ins is XOR (0xb7fea215)
instrument_addorsub: op1 and op2 of Arith are registers: 8 (edx), 8 (edx)
handling reg reset
instrument_test: op1 is reg and op2 is imm
instrument_addorsub: arith ins is AND (0xb7fea21d)
instrument_addorsub: op1 is reg (3) and op2 is immediate
instrument_addorsub: arith ins is OR (0xb7fea22f)
instrument_addorsub: op1 is mem and op2 is register
instrument_addorsub: arith ins is ADD (0xb7fea238)
instrument_addorsub: op1 is register and op2 is mem
instrument_test: op1 and op2 of are registers 9(ecx), 9(ecx)
17 EFLAGS eflags, 1, 0
LEA: base reg is 5(ebp) index reg invalid, dst 9(ecx)
instrument_addorsub: arith ins is ADD (0xb7fea261)
instrument_addorsub: op1 is register and op2 is mem
instrument_addorsub: arith ins is ADD (0xb7fea2ae)
instrument_addorsub: op1 is register and op2 is mem
[movx] 0xb7fea2b0 movzx edx, byte ptr [ecx+0xc]
instrument_addorsub: arith ins is AND (0xb7fea2b4)
instrument_addorsub: op1 is reg (8) and op2 is immediate
instrument_test: op1 is reg and op2 is imm
instrument_test: op1 is reg and op2 is imm
instrument_test: op1 and op2 of are registers 8(edx), 8(edx)
17 EFLAGS eflags, 1, 0
instrument_test: op1 is reg and op2 is imm
instrument_addorsub: arith ins is ADD (0xb7fea39f)
instrument_addorsub: op1 is register and op2 is mem
instrument_addorsub: arith ins is SUB (0xb7fea3a2)
instrument_addorsub: op1 and op2 of Arith are registers: 10 (eax), 9 (ecx)
instrument_test: op1 and op2 of are registers 3(edi), 3(edi)
17 EFLAGS eflags, 1, 0
0xb7fea2ef: not instrument noop nop 
instrument_addorsub: arith ins is ADD (0xb7fea2f0)
instrument_addorsub: op1 is mem and op2 is immediate
instrument_test: op1 is mem and op2 is register
instrument_taint_regmem2flag: flags 63, reg 10 size 4, memsize 4
instrument_test: op1 and op2 of are registers 10(eax), 10(eax)
17 EFLAGS eflags, 1, 0
0xb7fe7f9b: not instrument noop nop 
LEA: base reg is 4(esi) index reg invalid, dst 4(esi)
instrument_addorsub: arith ins is ADD (0xb7fe7fa0)
instrument_addorsub: op1 is reg (3) and op2 is immediate
instrument_test: op1 is mem and op2 is register
instrument_taint_regmem2flag: flags 63, reg 3 size 4, memsize 4
instrument_addorsub: arith ins is ADD (0xb7fe7fad)
instrument_addorsub: op1 is reg (6) and op2 is immediate
instrument_addorsub: arith ins is XOR (0xb7fe7fb0)
instrument_addorsub: op1 and op2 of Arith are registers: 10 (eax), 10 (eax)
handling reg reset
instrument_test: op1 is mem and op2 is imm
instrument_test: op1 and op2 of are registers 9(ecx), 9(ecx)
17 EFLAGS eflags, 1, 0
instrument_test: op1 and op2 of are registers 10(eax), 10(eax)
17 EFLAGS eflags, 1, 0
instrument_test: op1 and op2 of are registers 10(eax), 10(eax)
17 EFLAGS eflags, 1, 0
instrument_test: op1 and op2 of are registers 10(eax), 10(eax)
17 EFLAGS eflags, 1, 0
instrument_test: op1 and op2 of are registers 5(ebp), 5(ebp)
17 EFLAGS eflags, 1, 0
instrument_test: op1 and op2 of are registers 10(eax), 10(eax)
17 EFLAGS eflags, 1, 0
[movx] 0xb7fe7d25 movzx esi, word ptr [eax+ecx*2]
instrument_addorsub: arith ins is AND (0xb7fe7d2b)
instrument_addorsub: op1 is reg (10) and op2 is immediate
instrument_addorsub: arith ins is ADD (0xb7fe7d33)
instrument_addorsub: op1 is register and op2 is mem
instrument_test: op1 is mem and op2 is register
instrument_taint_regmem2flag: flags 63, reg 8 size 4, memsize 4
instrument_test: op1 and op2 of are registers 10(eax), 10(eax)
17 EFLAGS eflags, 1, 0
instrument_test: op1 and op2 of are registers 8(edx), 8(edx)
17 EFLAGS eflags, 1, 0
0xb7fea2ef: not instrument noop nop 
instrument_addorsub: arith ins is ADD (0xb7fea2f0)
instrument_addorsub: op1 is mem and op2 is immediate
instrument_test: op1 is mem and op2 is register
instrument_taint_regmem2flag: flags 63, reg 10 size 4, memsize 4
instrument_test: op1 and op2 of are registers 9(ecx), 9(ecx)
17 EFLAGS eflags, 1, 0
instrument_test: op1 and op2 of are registers 8(edx), 8(edx)
17 EFLAGS eflags, 1, 0
instrument_addorsub: arith ins is XOR (0xb7fea2d8)
instrument_addorsub: op1 and op2 of Arith are registers: 3 (edi), 3 (edi)
handling reg reset
LEA: base reg is 5(ebp) index reg invalid, dst 9(ecx)
instrument_addorsub: arith ins is ADD (0xb7fea261)
instrument_addorsub: op1 is register and op2 is mem
instrument_test: op1 and op2 of are registers 10(eax), 10(eax)
17 EFLAGS eflags, 1, 0
[movx] 0xb7fe7d67 movzx edx, word ptr [eax+edx*2]
instrument_addorsub: arith ins is AND (0xb7fe7d73)
instrument_addorsub: op1 is reg (9) and op2 is immediate
instrument_addorsub: arith ins is ADD (0xb7fe7d7c)
instrument_addorsub: op1 is reg (10) and op2 is immediate
instrument_test: op1 and op2 of are registers 10(eax), 9(ecx)
17 EFLAGS eflags, 1, 0
instrument_test: op1 and op2 of are registers 27(dx), 27(dx)
17 EFLAGS eflags, 1, 0
instrument_test: op1 is reg and op2 is imm
instrument_test: op1 is reg and op2 is imm
instrument_addorsub: arith ins is OR (0xb7feb0cc)
instrument_addorsub: op1 and op2 of Arith are registers: 25 (dl), 19 (al)
instrument_test: op1 is reg and op2 is imm
instrument_test: op1 is reg and op2 is imm
instrument_addorsub: arith ins is OR (0xb7feb0dc)
instrument_addorsub: op1 and op2 of Arith are registers: 10 (eax), 9 (ecx)
[movx] 0xb7feb0de movzx eax, al
instrument movx address 0xb7feb0de is src reg: 19 into dst reg: 10
instrument_addorsub: arith ins is XOR (0xb7feb0e3)
instrument_addorsub: op1 and op2 of Arith are registers: 10 (eax), 10 (eax)
handling reg reset
instrument_test: op1 is reg and op2 is imm
instrument_addorsub: arith ins is ADD (0xb7feb0eb)
instrument_addorsub: op1 and op2 of Arith are registers: 10 (eax), 10 (eax)
instrument_addorsub: arith ins is OR (0xb7feb0ed)
instrument_addorsub: op1 and op2 of Arith are registers: 10 (eax), 9 (ecx)
instrument_test: op1 is mem and op2 is register
instrument_taint_regmem2flag: flags 63, reg 10 size 4, memsize 4
instrument_addorsub: arith ins is ADD (0xb7feb106)
instrument_addorsub: op1 is mem and op2 is immediate
instrument_test: op1 and op2 of are registers 3(edi), 3(edi)
17 EFLAGS eflags, 1, 0
instrument_addorsub: arith ins is ADD (0xb7fea2ae)
instrument_addorsub: op1 is register and op2 is mem
[movx] 0xb7fea2b0 movzx edx, byte ptr [ecx+0xc]
instrument_addorsub: arith ins is AND (0xb7fea2b4)
instrument_addorsub: op1 is reg (8) and op2 is immediate
instrument_test: op1 is reg and op2 is imm
instrument_test: op1 is reg and op2 is imm
instrument_addorsub: arith ins is ADD (0xb7fe8736)
instrument_addorsub: op1 is reg (3) and op2 is immediate
instrument_test: op1 and op2 of are registers 10(eax), 10(eax)
17 EFLAGS eflags, 1, 0
instrument_addorsub: arith ins is XOR (0xb7fe873f)
instrument_addorsub: op1 and op2 of Arith are registers: 8 (edx), 8 (edx)
handling reg reset
instrument_test: op1 and op2 of are registers 4(esi), 4(esi)
17 EFLAGS eflags, 1, 0
instrument_test: op1 and op2 of are registers 8(edx), 8(edx)
17 EFLAGS eflags, 1, 0
[movx] 0xb7fe87a6 movzx eax, byte ptr [edx+0xd]
instrument_addorsub: arith ins is AND (0xb7fe87aa)
instrument_addorsub: op1 is reg (10) and op2 is immediate
instrument_test: op1 is reg and op2 is imm
instrument_test: op1 and op2 of are registers 10(eax), 10(eax)
17 EFLAGS eflags, 1, 0
[movx] 0xb7fe8a37 movzx eax, byte ptr [eax+0xc]
instrument_test: op1 is reg and op2 is imm
instrument_test: op1 and op2 of are registers 10(eax), 10(eax)
17 EFLAGS eflags, 1, 0
instrument_addorsub: arith ins is XOR (0xb7fe8a52)
instrument_addorsub: op1 and op2 of Arith are registers: 10 (eax), 10 (eax)
handling reg reset
LEA: base reg is 5(ebp) index reg invalid, dst 6(esp)
instrument_addorsub: arith ins is XOR (0xb7fea448)
instrument_addorsub: op1 and op2 of Arith are registers: 10 (eax), 10 (eax)
handling reg reset
instrument_test: op1 and op2 of are registers 9(ecx), 9(ecx)
17 EFLAGS eflags, 1, 0
instrument_test: op1 is reg and op2 is imm
0xb7fea2ef: not instrument noop nop 
instrument_addorsub: arith ins is ADD (0xb7fea2f0)
instrument_addorsub: op1 is mem and op2 is immediate
instrument_test: op1 is mem and op2 is register
instrument_taint_regmem2flag: flags 63, reg 10 size 4, memsize 4
instrument_addorsub: arith ins is ADD (0xb7fe9da1)
instrument_addorsub: op1 is mem and op2 is immediate
instrument_test: op1 is mem and op2 is register
instrument_taint_regmem2flag: flags 63, reg 10 size 4, memsize 4
instrument_addorsub: arith ins is XOR (0xb7fe9dba)
instrument_addorsub: op1 and op2 of Arith are registers: 10 (eax), 10 (eax)
handling reg reset
instrument_addorsub: arith ins is ADD (0xb7fe9dc9)
instrument_addorsub: op1 is reg (10) and op2 is immediate
instrument_test: op1 is reg and op2 is imm
instrument_test: op1 and op2 of are registers 10(eax), 10(eax)
17 EFLAGS eflags, 1, 0
instrument_addorsub: arith ins is ADD (0xb7fe9d45)
instrument_addorsub: op1 and op2 of Arith are registers: 10 (eax), 4 (esi)
instrument_test: op1 and op2 of are registers 8(edx), 8(edx)
17 EFLAGS eflags, 1, 0
instrument_test: op1 is mem and op2 is register
instrument_taint_regmem2flag: flags 63, reg 4 size 4, memsize 4
LEA: base reg is 7(ebx) index reg invalid, dst 10(eax)
LEA: base reg is 4(esi) index reg invalid, dst 4(esi)
[movx] 0xb7fe9d70 movzx edx, al
instrument movx address 0xb7fe9d70 is src reg: 19 into dst reg: 8
instrument_addorsub: arith ins is ADD (0xb7fe9d73)
instrument_addorsub: op1 and op2 of Arith are registers: 3 (edi), 9 (ecx)
instrument_test: op1 is reg and op2 is imm
instrument_test: op1 and op2 of are registers 10(eax), 10(eax)
17 EFLAGS eflags, 1, 0
instrument_addorsub: arith ins is ADD (0xb7fe9d8f)
instrument_addorsub: op1 is mem and op2 is register
instrument_addorsub: arith ins is ADD (0xb7fe9d91)
instrument_addorsub: op1 is reg (4) and op2 is immediate
instrument_test: op1 is mem and op2 is register
instrument_taint_regmem2flag: flags 63, reg 4 size 4, memsize 4
instrument_addorsub: arith ins is ADD (0xb7fe9da1)
instrument_addorsub: op1 is mem and op2 is immediate
instrument_test: op1 is mem and op2 is register
instrument_taint_regmem2flag: flags 63, reg 10 size 4, memsize 4
[movx] 0xb7fe9d70 movzx edx, al
instrument movx address 0xb7fe9d70 is src reg: 19 into dst reg: 8
instrument_addorsub: arith ins is ADD (0xb7fe9d73)
instrument_addorsub: op1 and op2 of Arith are registers: 3 (edi), 9 (ecx)
instrument_test: op1 is reg and op2 is imm
instrument_test: op1 and op2 of are registers 10(eax), 10(eax)
17 EFLAGS eflags, 1, 0
instrument_addorsub: arith ins is ADD (0xb7fe9d8f)
instrument_addorsub: op1 is mem and op2 is register
instrument_addorsub: arith ins is ADD (0xb7fe9d91)
instrument_addorsub: op1 is reg (4) and op2 is immediate
instrument_test: op1 is mem and op2 is register
instrument_taint_regmem2flag: flags 63, reg 4 size 4, memsize 4
instrument_test: op1 is reg and op2 is imm
instrument_test: op1 and op2 of are registers 10(eax), 10(eax)
17 EFLAGS eflags, 1, 0
LEA: base reg is 7(ebx) index reg invalid, dst 10(eax)
instrument_test: op1 is reg and op2 is imm
LEA: base reg is 4(esi) index reg invalid, dst 4(esi)
instrument_addorsub: arith ins is ADD (0xb7feb5c4)
instrument_addorsub: op1 is register and op2 is mem
instrument_test: op1 and op2 of are registers 8(edx), 8(edx)
17 EFLAGS eflags, 1, 0
instrument_addorsub: arith ins is ADD (0xb7eb9286)
instrument_addorsub: op1 is reg (7) and op2 is immediate
instrument_test: op1 is mem and op2 is imm
instrument_addorsub: arith ins is XOR (0xb7e5c7e1)
instrument_addorsub: op1 and op2 of Arith are registers: 10 (eax), 10 (eax)
handling reg reset
instrument_addorsub: arith ins is ADD (0xb7e5c7eb)
instrument_addorsub: op1 is reg (7) and op2 is immediate
instrument_addorsub: arith ins is SUB (0xb7e5c7f1)
instrument_addorsub: op1 is reg (6) and op2 is immediate
op1 and op2 of xchg are registers
op1 and op2 of xchg are registers
instrument_test: op1 is reg and op2 is imm
instrument_test: op1 is reg and op2 is imm
instrument_test: op1 is reg and op2 is imm
instrument_test: op1 is reg and op2 is imm
op1 and op2 of xchg are registers
op1 and op2 of xchg are registers
instrument_addorsub: arith ins is AND (0xb7e5c88e)
instrument_addorsub: op1 is reg (4) and op2 is immediate
instrument_addorsub: arith ins is OR (0xb7e5c891)
instrument_addorsub: op1 is reg (9) and op2 is immediate
instrument_addorsub: arith ins is AND (0xb7e5c8a2)
instrument_addorsub: op1 is reg (3) and op2 is immediate
instrument_addorsub: arith ins is AND (0xb7e5c8a5)
instrument_addorsub: op1 is reg (9) and op2 is immediate
instrument_test: op1 is reg and op2 is imm
instrument_test: op1 is reg and op2 is imm
instrument_addorsub: arith ins is ADD (0xb7e5c8ca)
instrument_addorsub: op1 and op2 of Arith are registers: 3 (edi), 9 (ecx)
LEA: base reg is 3(edi) index reg invalid, dst 9(ecx)
instrument_test: op1 is reg and op2 is imm
instrument_addorsub: arith ins is AND (0xb7e5c8f0)
instrument_addorsub: op1 is reg (5) and op2 is immediate
instrument_addorsub: arith ins is OR (0xb7e5c903)
instrument_addorsub: op1 is reg (8) and op2 is immediate
instrument_addorsub: arith ins is ADD (0xb7e5c84c)
instrument_addorsub: op1 is reg (6) and op2 is immediate
LEA: base reg is 7(ebx) index reg invalid, dst 10(eax)
instrument_test: op1 is mem and op2 is imm
LEA: base reg is 7(ebx) index reg invalid, dst 10(eax)
instrument_addorsub: arith ins is ADD (0xb7fe9d91)
instrument_addorsub: op1 is reg (4) and op2 is immediate
instrument_test: op1 is mem and op2 is register
instrument_taint_regmem2flag: flags 63, reg 4 size 4, memsize 4
instrument_addorsub: arith ins is ADD (0xb7fe9da1)
instrument_addorsub: op1 is mem and op2 is immediate
instrument_test: op1 is mem and op2 is register
instrument_taint_regmem2flag: flags 63, reg 10 size 4, memsize 4
instrument_addorsub: arith ins is XOR (0xb7fe9dba)
instrument_addorsub: op1 and op2 of Arith are registers: 10 (eax), 10 (eax)
handling reg reset
instrument_addorsub: arith ins is ADD (0xb7fe9dc9)
instrument_addorsub: op1 is reg (10) and op2 is immediate
instrument_test: op1 is reg and op2 is imm
instrument_addorsub: arith ins is ADD (0xb7eba7b6)
instrument_addorsub: op1 is reg (7) and op2 is immediate
instrument_test: op1 is mem and op2 is imm
LEA: base reg is 7(ebx) index reg invalid, dst 10(eax)
instrument_test: op1 is mem and op2 is imm
LEA: base reg is 7(ebx) index reg invalid, dst 10(eax)
instrument_test: op1 is mem and op2 is imm
LEA: base reg is 7(ebx) index reg invalid, dst 10(eax)
instrument_addorsub: arith ins is ADD (0xb7ebee16)
instrument_addorsub: op1 is reg (7) and op2 is immediate
instrument_test: op1 is mem and op2 is imm
instrument_test: op1 is mem and op2 is imm
instrument_test: op1 is mem and op2 is imm
LEA: base reg is 7(ebx) index reg invalid, dst 10(eax)
LEA: base reg is 7(ebx) index reg invalid, dst 10(eax)
instrument_addorsub: arith ins is ADD (0xb7ed3316)
instrument_addorsub: op1 is reg (7) and op2 is immediate
instrument_test: op1 is mem and op2 is imm
LEA: base reg is 7(ebx) index reg invalid, dst 10(eax)
instrument_test: op1 is mem and op2 is imm
LEA: base reg is 7(ebx) index reg invalid, dst 10(eax)
instrument_addorsub: arith ins is ADD (0xb7fe9dc9)
instrument_addorsub: op1 is reg (10) and op2 is immediate
instrument_test: op1 is reg and op2 is imm
instrument_test: op1 and op2 of are registers 10(eax), 10(eax)
17 EFLAGS eflags, 1, 0
instrument_test: op1 and op2 of are registers 3(edi), 3(edi)
17 EFLAGS eflags, 1, 0
instrument_addorsub: arith ins is XOR (0xb7feaba4)
instrument_addorsub: op1 and op2 of Arith are registers: 8 (edx), 8 (edx)
handling reg reset
instrument_addorsub: arith ins is XOR (0xb7feaba6)
instrument_addorsub: op1 and op2 of Arith are registers: 9 (ecx), 9 (ecx)
handling reg reset
instrument_addorsub: arith ins is XOR (0xb7feaba8)
instrument_addorsub: op1 and op2 of Arith are registers: 4 (esi), 4 (esi)
handling reg reset
instrument_test: op1 and op2 of are registers 10(eax), 10(eax)
17 EFLAGS eflags, 1, 0
instrument_test: op1 is mem and op2 is imm
LEA: base reg is 7(ebx) index reg invalid, dst 10(eax)
LEA: base reg is 7(ebx) index reg invalid, dst 10(eax)
instrument_addorsub: arith ins is ADD (0xb7fe9e50)
instrument_addorsub: op1 and op2 of Arith are registers: 9 (ecx), 4 (esi)
instrument_test: op1 is mem and op2 is register
instrument_taint_regmem2flag: flags 63, reg 9 size 4, memsize 4
instrument_test: op1 and op2 of are registers 3(edi), 3(edi)
17 EFLAGS eflags, 1, 0
instrument_test: op1 and op2 of are registers 9(ecx), 9(ecx)
17 EFLAGS eflags, 1, 0
instrument_test: op1 and op2 of are registers 10(eax), 10(eax)
17 EFLAGS eflags, 1, 0
instrument_test: op1 and op2 of are registers 4(esi), 8(edx)
17 EFLAGS eflags, 1, 0
0xb7fea8c3: not instrument noop nop 
LEA: base reg is 4(esi) index reg invalid, dst 4(esi)
instrument_addorsub: arith ins is ADD (0xb7fea8cb)
instrument_addorsub: op1 is reg (10) and op2 is immediate
instrument_addorsub: arith ins is ADD (0xb7fea8d1)
instrument_addorsub: op1 and op2 of Arith are registers: 3 (edi), 9 (ecx)
instrument_test: op1 and op2 of are registers 8(edx), 10(eax)
17 EFLAGS eflags, 1, 0
instrument_test: op1 and op2 of are registers 10(eax), 10(eax)
17 EFLAGS eflags, 1, 0
instrument_test: op1 is mem and op2 is register
instrument_taint_regmem2flag: flags 63, reg 8 size 4, memsize 4
LEA: base reg is 8(edx) index reg invalid, dst 3(edi)
0xb7fe9eb7: not instrument noop nop 
[movx] 0xb7fe9ec0 movzx eax, al
instrument movx address 0xb7fe9ec0 is src reg: 19 into dst reg: 10
[movx] 0xb7fe9ec6 movzx edi, word ptr [ecx+edx*2]
instrument_addorsub: arith ins is ADD (0xb7fe9ed0)
instrument_addorsub: op1 is register and op2 is mem
instrument_addorsub: arith ins is ADD (0xb7fe9ed3)
instrument_addorsub: op1 is register and op2 is mem
instrument_test: op1 is reg and op2 is imm
instrument_addorsub: arith ins is ADD (0xb7fea028)
instrument_addorsub: op1 is mem and op2 is immediate
instrument_test: op1 is mem and op2 is register
instrument_taint_regmem2flag: flags 63, reg 10 size 4, memsize 4
instrument_test: op1 and op2 of are registers 9(ecx), 9(ecx)
17 EFLAGS eflags, 1, 0
instrument_addorsub: arith ins is OR (0xb7fea04f)
instrument_addorsub: op1 is mem and op2 is immediate
instrument_test: op1 and op2 of are registers 8(edx), 8(edx)
17 EFLAGS eflags, 1, 0
instrument_addorsub: arith ins is ADD (0xb7fe9e50)
instrument_addorsub: op1 and op2 of Arith are registers: 9 (ecx), 4 (esi)
instrument_test: op1 is mem and op2 is register
instrument_taint_regmem2flag: flags 63, reg 9 size 4, memsize 4
instrument_test: op1 and op2 of are registers 3(edi), 3(edi)
17 EFLAGS eflags, 1, 0
instrument_test: op1 and op2 of are registers 9(ecx), 9(ecx)
17 EFLAGS eflags, 1, 0
instrument_test: op1 and op2 of are registers 10(eax), 10(eax)
17 EFLAGS eflags, 1, 0
instrument_addorsub: arith ins is ADD (0xb7fe9b1c)
instrument_addorsub: op1 is reg (7) and op2 is immediate
instrument_addorsub: arith ins is SUB (0xb7fe9b22)
instrument_addorsub: op1 is reg (6) and op2 is immediate
instrument_addorsub: arith ins is ADD (0xb7fe9b2b)
instrument_addorsub: op1 is register and op2 is mem
instrument_addorsub: arith ins is AND (0xb7fe9b37)
instrument_addorsub: op1 and op2 of Arith are registers: 10 (eax), 9 (ecx)
instrument_addorsub: arith ins is ADD (0xb7fe9b39)
instrument_addorsub: op1 is register and op2 is mem
instrument_addorsub: arith ins is AND (0xb7fe9b3f)
instrument_addorsub: op1 and op2 of Arith are registers: 9 (ecx), 8 (edx)
instrument_test: op1 and op2 of are registers 10(eax), 9(ecx)
17 EFLAGS eflags, 1, 0
instrument_addorsub: arith ins is SUB (0xb7fe9b45)
instrument_addorsub: op1 and op2 of Arith are registers: 9 (ecx), 10 (eax)
0xb7ff5de2: not instrument an interrupt
instrument_test: op1 is reg and op2 is imm
instrument_test: op1 and op2 of are registers 10(eax), 10(eax)
17 EFLAGS eflags, 1, 0
LEA: base reg is 5(ebp) index reg invalid, dst 6(esp)
0xb7fea073: not instrument noop nop 
LEA: base reg is 4(esi) index reg invalid, dst 4(esi)
LEA: base reg is 5(ebp) index reg invalid, dst 6(esp)
instrument_test: op1 and op2 of are registers 10(eax), 10(eax)
17 EFLAGS eflags, 1, 0
instrument_test: op1 is mem and op2 is imm
instrument_addorsub: arith ins is ADD (0xb7ff049b)
instrument_addorsub: op1 is reg (7) and op2 is immediate
instrument_addorsub: arith ins is SUB (0xb7ff04a1)
instrument_addorsub: op1 is reg (6) and op2 is immediate
instrument_test: op1 and op2 of are registers 4(esi), 10(eax)
17 EFLAGS eflags, 1, 0
LEA: base reg is 9(ecx) index reg invalid, dst 8(edx)
LEA: base reg is 5(ebp) index reg invalid, dst 6(esp)
instrument_addorsub: arith ins is SUB (0xb7fe1865)
instrument_addorsub: op1 is mem and op2 is immediate
instrument_addorsub: arith ins is SUB (0xb7fe1869)
instrument_addorsub: op1 is reg (4) and op2 is immediate
instrument_test: op1 and op2 of are registers 4(esi), 4(esi)
17 EFLAGS eflags, 1, 0
[movx] 0xb7fe1870 movzx esi, byte ptr [ebp-0x70]
0xb7fe1874: not instrument an rdtsc
instrument_addorsub: arith ins is SUB (0xb7fe1876)
instrument_addorsub: op1 is register and op2 is mem
instrument_addorsub: arith ins is SBB (0xb7fe1879)
instrument_addorsub: op1 is register and op2 is mem
instrument_test: op1 and op2 of are registers 10(eax), 10(eax)
17 EFLAGS eflags, 1, 0
instrument_test: op1 and op2 of are registers 9(ecx), 9(ecx)
17 EFLAGS eflags, 1, 0
instrument_test: op1 is mem and op2 is imm
instrument_addorsub: arith ins is AND (0xb7fe9d05)
instrument_addorsub: op1 is reg (3) and op2 is immediate
instrument_addorsub: arith ins is XOR (0xb7fe9d0b)
instrument_addorsub: op1 and op2 of Arith are registers: 8 (edx), 8 (edx)
handling reg reset
LEA: base reg is 5(ebp) index reg invalid, dst 3(edi)
LEA: base reg is 5(ebp) index reg invalid, dst 9(ecx)
LEA: base reg is 7(ebx) index reg invalid, dst 3(edi)
instrument_addorsub: arith ins is ADD (0xb7fe9d45)
instrument_addorsub: op1 and op2 of Arith are registers: 10 (eax), 4 (esi)
instrument_test: op1 and op2 of are registers 8(edx), 8(edx)
17 EFLAGS eflags, 1, 0
instrument_test: op1 and op2 of are registers 10(eax), 10(eax)
17 EFLAGS eflags, 1, 0
instrument_test: op1 is mem and op2 is register
instrument_taint_regmem2flag: flags 63, reg 10 size 4, memsize 4
LEA: base reg is 7(ebx) index reg invalid, dst 10(eax)
0xb7fea17e: not instrument noop data16 nop 
instrument_addorsub: arith ins is ADD (0xb7fea18c)
instrument_addorsub: op1 is register and op2 is mem
[movx] 0xb7fea19c movzx edi, word ptr [edi+edx*2]
instrument_addorsub: arith ins is ADD (0xb7fea1a3)
instrument_addorsub: op1 is register and op2 is mem
[movx] 0xb7fea1a9 movzx esi, al
instrument movx address 0xb7fea1a9 is src reg: 19 into dst reg: 4
instrument_test: op1 is reg and op2 is imm
instrument_test: op1 and op2 of are registers 4(esi), 4(esi)
17 EFLAGS eflags, 1, 0
[movx] 0xb7fea1c9 movzx eax, byte ptr [eax+0xc]
instrument_test: op1 and op2 of are registers 19(al), 19(al)
17 EFLAGS eflags, 1, 0
instrument_test: op1 is mem and op2 is register
instrument_taint_regmem2flag: flags 63, reg 8 size 4, memsize 4
LEA: base reg is 4(esi) index reg invalid, dst 10(eax)
instrument_test: op1 is reg and op2 is imm
instrument_test: op1 is reg and op2 is imm
instrument_addorsub: arith ins is OR (0xb7fea1f9)
instrument_addorsub: op1 and op2 of Arith are registers: 8 (edx), 10 (eax)
instrument_test: op1 and op2 of are registers 25(dl), 25(dl)
17 EFLAGS eflags, 1, 0
instrument_test: op1 is reg and op2 is imm
instrument_test: op1 is reg and op2 is imm
instrument_addorsub: arith ins is OR (0xb7fea210)
instrument_addorsub: op1 and op2 of Arith are registers: 10 (eax), 8 (edx)
[movx] 0xb7fea212 movzx eax, al
instrument movx address 0xb7fea212 is src reg: 19 into dst reg: 10
instrument_addorsub: arith ins is XOR (0xb7fea215)
instrument_addorsub: op1 and op2 of Arith are registers: 8 (edx), 8 (edx)
handling reg reset
instrument_test: op1 is reg and op2 is imm
instrument_addorsub: arith ins is AND (0xb7fea21d)
instrument_addorsub: op1 is reg (3) and op2 is immediate
instrument_addorsub: arith ins is OR (0xb7fea22f)
instrument_addorsub: op1 is mem and op2 is register
instrument_addorsub: arith ins is ADD (0xb7fea238)
instrument_addorsub: op1 is register and op2 is mem
instrument_test: op1 and op2 of are registers 9(ecx), 9(ecx)
17 EFLAGS eflags, 1, 0
instrument_test: op1 is mem and op2 is imm
instrument_test: op1 and op2 of are registers 10(eax), 10(eax)
17 EFLAGS eflags, 1, 0
instrument_addorsub: arith ins is ADD (0xb7fe18a7)
instrument_addorsub: op1 is mem and op2 is immediate
instrument_addorsub: arith ins is SUB (0xb7fefda4)
instrument_addorsub: op1 is reg (6) and op2 is immediate
instrument_addorsub: arith ins is ADD (0xb7fefdac)
instrument_addorsub: op1 is reg (7) and op2 is immediate
instrument_test: op1 and op2 of are registers 10(eax), 10(eax)
17 EFLAGS eflags, 1, 0
LEA: base reg is 4(esi) index reg invalid, dst 4(esi)
instrument_addorsub: arith ins is XOR (0xb7fefdec)
instrument_addorsub: op1 and op2 of Arith are registers: 10 (eax), 10 (eax)
handling reg reset
instrument_test: op1 and op2 of are registers 3(edi), 3(edi)
17 EFLAGS eflags, 1, 0
instrument_test: op1 is mem and op2 is register
instrument_taint_regmem2flag: flags 63, reg 4 size 4, memsize 4
instrument_addorsub: arith ins is ADD (0xb7fefe03)
instrument_addorsub: op1 and op2 of Arith are registers: 10 (eax), 4 (esi)
instrument_test: op1 and op2 of are registers 8(edx), 10(eax)
17 EFLAGS eflags, 1, 0
instrument_test: op1 and op2 of are registers 10(eax), 10(eax)
17 EFLAGS eflags, 1, 0
instrument_test: op1 and op2 of are registers 9(ecx), 8(edx)
17 EFLAGS eflags, 1, 0
instrument_test: op1 is reg and op2 is imm
instrument_addorsub: arith ins is ADD (0xb7fefed6)
instrument_addorsub: op1 is reg (4) and op2 is immediate
instrument_test: op1 is mem and op2 is register
instrument_taint_regmem2flag: flags 63, reg 4 size 4, memsize 4
instrument_test: op1 is mem and op2 is register
instrument_taint_regmem2flag: flags 63, reg 4 size 4, memsize 4
instrument_test: op1 and op2 of are registers 9(ecx), 5(ebp)
17 EFLAGS eflags, 1, 0
instrument_test: op1 is mem and op2 is register
instrument_taint_regmem2flag: flags 63, reg 8 size 4, memsize 4
instrument_addorsub: arith ins is SUB (0xb7fefe4a)
instrument_addorsub: op1 and op2 of Arith are registers: 9 (ecx), 8 (edx)
instrument_addorsub: arith ins is SUB (0xb7fefe7d)
instrument_addorsub: op1 and op2 of Arith are registers: 9 (ecx), 5 (ebp)
instrument_addorsub: arith ins is ADD (0xb7fefe8f)
instrument_addorsub: op1 is reg (4) and op2 is immediate
instrument_test: op1 is mem and op2 is register
instrument_taint_regmem2flag: flags 63, reg 4 size 4, memsize 4
instrument_addorsub: arith ins is ADD (0xb7fefe9a)
instrument_addorsub: op1 is reg (3) and op2 is immediate
instrument_addorsub: arith ins is ADD (0xb7fefe9d)
instrument_addorsub: op1 and op2 of Arith are registers: 10 (eax), 4 (esi)
instrument_test: op1 is mem and op2 is register
instrument_taint_regmem2flag: flags 63, reg 10 size 4, memsize 4
instrument_test: op1 and op2 of are registers 10(eax), 10(eax)
17 EFLAGS eflags, 1, 0
instrument_addorsub: arith ins is ADD (0xb7feff4e)
instrument_addorsub: op1 is reg (6) and op2 is immediate
instrument_test: op1 is mem and op2 is imm
op1 and op2 of xchg are registers
0xb7fe18f4: not instrument an interrupt
instrument_test: op1 is mem and op2 is register
instrument_taint_regmem2flag: flags 63, reg 10 size 4, memsize 4
instrument_test: op1 and op2 of are registers 19(al), 19(al)
17 EFLAGS eflags, 1, 0
instrument_test: op1 is mem and op2 is imm
0xb7fe1e9e: not instrument an rdtsc
instrument_addorsub: arith ins is AND (0xb7fe1ea6)
instrument_addorsub: op1 is mem and op2 is immediate
instrument_addorsub: arith ins is XOR (0xb7fea215)
instrument_addorsub: op1 and op2 of Arith are registers: 8 (edx), 8 (edx)
handling reg reset
instrument_test: op1 is reg and op2 is imm
instrument_addorsub: arith ins is AND (0xb7fea21d)
instrument_addorsub: op1 is reg (3) and op2 is immediate
instrument_addorsub: arith ins is OR (0xb7fea22f)
instrument_addorsub: op1 is mem and op2 is register
instrument_addorsub: arith ins is ADD (0xb7fea238)
instrument_addorsub: op1 is register and op2 is mem
instrument_test: op1 and op2 of are registers 9(ecx), 9(ecx)
17 EFLAGS eflags, 1, 0
LEA: base reg is 5(ebp) index reg invalid, dst 9(ecx)
instrument_addorsub: arith ins is ADD (0xb7fea261)
instrument_addorsub: op1 is register and op2 is mem
0xb7fe1ed5: not instrument an rdtsc
instrument_addorsub: arith ins is SUB (0xb7fe1ed7)
instrument_addorsub: op1 is register and op2 is mem
instrument_addorsub: arith ins is SBB (0xb7fe1eda)
instrument_addorsub: op1 is register and op2 is mem
instrument_addorsub: arith ins is ADD (0xb7fe1edd)
instrument_addorsub: op1 is mem and op2 is register
instrument_addorsub: arith ins is ADC (0xb7fe1ee3)
instrument_addorsub: op1 is mem and op2 is register
instrument_test: op1 and op2 of are registers 10(eax), 10(eax)
17 EFLAGS eflags, 1, 0
instrument_test: op1 is mem and op2 is imm
instrument_addorsub: arith ins is ADD (0xb7fe1f15)
instrument_addorsub: op1 is reg (10) and op2 is immediate
instrument_addorsub: arith ins is XOR (0xb7fe1f1a)
instrument_addorsub: op1 and op2 of Arith are registers: 3 (edi), 3 (edi)
handling reg reset
instrument_test: op1 and op2 of are registers 9(ecx), 9(ecx)
17 EFLAGS eflags, 1, 0
instrument_addorsub: arith ins is XOR (0xb7fe193b)
instrument_addorsub: op1 and op2 of Arith are registers: 8 (edx), 8 (edx)
handling reg reset
instrument_addorsub: arith ins is XOR (0xb7fe193d)
instrument_addorsub: op1 and op2 of Arith are registers: 10 (eax), 10 (eax)
handling reg reset
instrument_addorsub: arith ins is ADD (0xb7fe7c66)
instrument_addorsub: op1 is reg (7) and op2 is immediate
instrument_addorsub: arith ins is SUB (0xb7fe7c6c)
instrument_addorsub: op1 is reg (6) and op2 is immediate
LEA: base reg is 10(eax) index reg invalid, dst 8(edx)
instrument_test: op1 is reg and op2 is imm
instrument_addorsub: arith ins is ADD (0xb7fe7c99)
instrument_addorsub: op1 is reg (6) and op2 is immediate
LEA: base reg is 5(ebp) index reg invalid, dst 6(esp)
instrument_addorsub: arith ins is ADD (0xb7ff2c33)
instrument_addorsub: op1 is reg (6) and op2 is immediate
instrument_test: op1 is mem and op2 is imm
instrument_addorsub: arith ins is ADD (0xb7fe34e7)
instrument_addorsub: op1 is reg (6) and op2 is immediate
instrument_addorsub: arith ins is ADD (0xb7fdfc5e)
instrument_addorsub: op1 is reg (7) and op2 is immediate
instrument_addorsub: arith ins is SUB (0xb7fdfc6e)
instrument_addorsub: op1 and op2 of Arith are registers: 8 (edx), 10 (eax)
LEA: base reg is 6(esp) index reg invalid, dst 9(ecx)
instrument_addorsub: arith ins is AND (0xb7fdfc81)
instrument_addorsub: op1 is reg (6) and op2 is immediate
instrument_addorsub: arith ins is XOR (0xb7fdfc88)
instrument_addorsub: op1 and op2 of Arith are registers: 5 (ebp), 5 (ebp)
handling reg reset
instrument_addorsub: arith ins is ADD (0xb7fed54b)
instrument_addorsub: op1 is reg (7) and op2 is immediate
instrument_addorsub: arith ins is SUB (0xb7fed551)
instrument_addorsub: op1 is reg (6) and op2 is immediate
instrument_test: op1 and op2 of are registers 10(eax), 10(eax)
17 EFLAGS eflags, 1, 0
instrument_test: op1 and op2 of are registers 9(ecx), 9(ecx)
17 EFLAGS eflags, 1, 0
instrument_test: op1 and op2 of are registers 4(esi), 4(esi)
17 EFLAGS eflags, 1, 0
LEA: index reg is 4(esi) base reg invalid, dst 5(ebp)
0xb7fed587: not instrument noop nop 
instrument_addorsub: arith ins is SUB (0xb7fed599)
instrument_addorsub: op1 is reg (5) and op2 is immediate
instrument_addorsub: arith ins is SUB (0xb7fed426)
instrument_addorsub: op1 is reg (6) and op2 is immediate
[movx] 0xb7fed429 movzx edx, byte ptr [eax+0x194]
instrument_addorsub: arith ins is ADD (0xb7fed435)
instrument_addorsub: op1 is reg (7) and op2 is immediate
instrument_test: op1 is reg and op2 is imm
instrument_addorsub: arith ins is OR (0xb7fed447)
instrument_addorsub: op1 is reg (8) and op2 is immediate
[movx] 0xb7fed450 movzx ecx, byte ptr [esi]
instrument_test: op1 and op2 of are registers 22(cl), 22(cl)
17 EFLAGS eflags, 1, 0
instrument_test: op1 and op2 of are registers 8(edx), 8(edx)
17 EFLAGS eflags, 1, 0
instrument_test: op1 and op2 of are registers 3(edi), 3(edi)
17 EFLAGS eflags, 1, 0
instrument_addorsub: arith ins is ADD (0xb7fed4e7)
instrument_addorsub: op1 is reg (6) and op2 is immediate
instrument_addorsub: arith ins is SUB (0xb7fed5ac)
instrument_addorsub: op1 is reg (4) and op2 is immediate
instrument_addorsub: arith ins is ADD (0xb7fed5b1)
instrument_addorsub: op1 is reg (6) and op2 is immediate
instrument_addorsub: arith ins is SUB (0xb7fed599)
instrument_addorsub: op1 is reg (5) and op2 is immediate
instrument_test: op1 is mem and op2 is imm
instrument_test: op1 and op2 of are registers 8(edx), 8(edx)
17 EFLAGS eflags, 1, 0
instrument_addorsub: arith ins is ADD (0xb7fed47a)
instrument_addorsub: op1 is register and op2 is mem
instrument_addorsub: arith ins is ADD (0xb7e5c339)
instrument_addorsub: op1 is reg (7) and op2 is immediate
instrument_addorsub: arith ins is SUB (0xb7e5c33f)
instrument_addorsub: op1 is reg (6) and op2 is immediate
instrument_test: op1 and op2 of are registers 10(eax), 10(eax)
17 EFLAGS eflags, 1, 0
instrument_test: op1 and op2 of are registers 10(eax), 10(eax)
17 EFLAGS eflags, 1, 0
[movx] 0xb7e5c3ae movzx eax, word ptr [eax]
instrument_test: op1 is mem and op2 is register
instrument_taint_regmem2flag: flags 63, reg 21 size 2, memsize 2
instrument_addorsub: arith ins is SUB (0xb7f23013)
instrument_addorsub: op1 is reg (6) and op2 is immediate
instrument_addorsub: arith ins is ADD (0xb7f2301f)
instrument_addorsub: op1 is reg (7) and op2 is immediate
instrument_test: op1 and op2 of are registers 4(esi), 4(esi)
17 EFLAGS eflags, 1, 0
instrument_test: op1 and op2 of are registers 3(edi), 3(edi)
17 EFLAGS eflags, 1, 0
instrument_addorsub: arith ins is XOR (0xb7eb9422)
instrument_addorsub: op1 and op2 of Arith are registers: 10 (eax), 10 (eax)
handling reg reset
instrument_test: op1 is reg and op2 is imm
instrument_test: op1 and op2 of are registers 22(cl), 25(dl)
17 EFLAGS eflags, 1, 0
instrument_addorsub: arith ins is OR (0xb7eb944a)
instrument_addorsub: op1 and op2 of Arith are registers: 25 (dl), 25 (dl)
instrument_test: op1 is reg and op2 is imm
instrument_test: op1 and op2 of are registers 22(cl), 25(dl)
17 EFLAGS eflags, 1, 0
instrument_addorsub: arith ins is OR (0xb7eb9463)
instrument_addorsub: op1 and op2 of Arith are registers: 25 (dl), 25 (dl)
instrument_addorsub: arith ins is ADD (0xb7eb94ca)
instrument_addorsub: op1 and op2 of Arith are registers: 3 (edi), 8 (edx)
instrument_addorsub: arith ins is XOR (0xb7eb94d2)
instrument_addorsub: op1 and op2 of Arith are registers: 3 (edi), 8 (edx)
instrument_addorsub: arith ins is OR (0xb7eb94d4)
instrument_addorsub: op1 is reg (3) and op2 is immediate
instrument_addorsub: arith ins is XOR (0xb7eb94e1)
instrument_addorsub: op1 and op2 of Arith are registers: 8 (edx), 9 (ecx)
instrument_addorsub: arith ins is ADD (0xb7eb94e8)
instrument_addorsub: op1 and op2 of Arith are registers: 3 (edi), 8 (edx)
instrument_addorsub: arith ins is XOR (0xb7eb94ec)
instrument_addorsub: op1 and op2 of Arith are registers: 3 (edi), 8 (edx)
instrument_addorsub: arith ins is OR (0xb7eb94ee)
instrument_addorsub: op1 is reg (3) and op2 is immediate
instrument_addorsub: arith ins is ADD (0xb7eb94ff)
instrument_addorsub: op1 and op2 of Arith are registers: 3 (edi), 8 (edx)
instrument_addorsub: arith ins is XOR (0xb7eb9507)
instrument_addorsub: op1 and op2 of Arith are registers: 3 (edi), 8 (edx)
instrument_addorsub: arith ins is OR (0xb7eb9509)
instrument_addorsub: op1 is reg (3) and op2 is immediate
instrument_addorsub: arith ins is XOR (0xb7eb9516)
instrument_addorsub: op1 and op2 of Arith are registers: 8 (edx), 9 (ecx)
instrument_addorsub: arith ins is ADD (0xb7eb951d)
instrument_addorsub: op1 and op2 of Arith are registers: 3 (edi), 8 (edx)
instrument_addorsub: arith ins is XOR (0xb7eb9525)
instrument_addorsub: op1 and op2 of Arith are registers: 3 (edi), 8 (edx)
instrument_addorsub: arith ins is OR (0xb7eb9527)
instrument_addorsub: op1 is reg (3) and op2 is immediate
instrument_addorsub: arith ins is ADD (0xb7eb953c)
instrument_addorsub: op1 and op2 of Arith are registers: 3 (edi), 8 (edx)
instrument_addorsub: arith ins is SUB (0xb7eb94a3)
instrument_addorsub: op1 is reg (4) and op2 is immediate
instrument_addorsub: arith ins is SUB (0xb7eb94a6)
instrument_addorsub: op1 is reg (4) and op2 is immediate
instrument_test: op1 is reg and op2 is imm
LEA: base reg is 4(esi) index reg invalid, dst 10(eax)
LEA: base reg is 4(esi) index reg invalid, dst 10(eax)
instrument_test: op1 and op2 of are registers 26(dh), 26(dh)
17 EFLAGS eflags, 1, 0
LEA: base reg is 4(esi) index reg invalid, dst 10(eax)
instrument_addorsub: arith ins is ADD (0xb7eb94c0)
instrument_addorsub: op1 is reg (4) and op2 is immediate
instrument_addorsub: arith ins is ADD (0xb7eb94ca)
instrument_addorsub: op1 and op2 of Arith are registers: 3 (edi), 8 (edx)
instrument_addorsub: arith ins is XOR (0xb7eb94d2)
instrument_addorsub: op1 and op2 of Arith are registers: 3 (edi), 8 (edx)
instrument_addorsub: arith ins is OR (0xb7eb94d4)
instrument_addorsub: op1 is reg (3) and op2 is immediate
instrument_addorsub: arith ins is ADD (0xb7eb94c0)
instrument_addorsub: op1 is reg (4) and op2 is immediate
instrument_addorsub: arith ins is ADD (0xb7eb94ca)
instrument_addorsub: op1 and op2 of Arith are registers: 3 (edi), 8 (edx)
instrument_addorsub: arith ins is XOR (0xb7eb94d2)
instrument_addorsub: op1 and op2 of Arith are registers: 3 (edi), 8 (edx)
instrument_addorsub: arith ins is OR (0xb7eb94d4)
instrument_addorsub: op1 is reg (3) and op2 is immediate
instrument_addorsub: arith ins is XOR (0xb7eb94e1)
instrument_addorsub: op1 and op2 of Arith are registers: 8 (edx), 9 (ecx)
instrument_addorsub: arith ins is ADD (0xb7eb94e8)
instrument_addorsub: op1 and op2 of Arith are registers: 3 (edi), 8 (edx)
instrument_addorsub: arith ins is XOR (0xb7eb94e1)
instrument_addorsub: op1 and op2 of Arith are registers: 8 (edx), 9 (ecx)
instrument_addorsub: arith ins is ADD (0xb7eb94e8)
instrument_addorsub: op1 and op2 of Arith are registers: 3 (edi), 8 (edx)
instrument_addorsub: arith ins is XOR (0xb7eb94ec)
instrument_addorsub: op1 and op2 of Arith are registers: 3 (edi), 8 (edx)
instrument_addorsub: arith ins is OR (0xb7eb94ee)
instrument_addorsub: op1 is reg (3) and op2 is immediate
instrument_addorsub: arith ins is ADD (0xb7eb94ff)
instrument_addorsub: op1 and op2 of Arith are registers: 3 (edi), 8 (edx)
instrument_addorsub: arith ins is XOR (0xb7eb9507)
instrument_addorsub: op1 and op2 of Arith are registers: 3 (edi), 8 (edx)
instrument_addorsub: arith ins is OR (0xb7eb9509)
instrument_addorsub: op1 is reg (3) and op2 is immediate
instrument_addorsub: arith ins is XOR (0xb7eb9516)
instrument_addorsub: op1 and op2 of Arith are registers: 8 (edx), 9 (ecx)
instrument_addorsub: arith ins is ADD (0xb7eb951d)
instrument_addorsub: op1 and op2 of Arith are registers: 3 (edi), 8 (edx)
instrument_addorsub: arith ins is XOR (0xb7eb9525)
instrument_addorsub: op1 and op2 of Arith are registers: 3 (edi), 8 (edx)
instrument_addorsub: arith ins is OR (0xb7eb9527)
instrument_addorsub: op1 is reg (3) and op2 is immediate
instrument_addorsub: arith ins is SUB (0xb7eb948a)
instrument_addorsub: op1 is reg (4) and op2 is immediate
instrument_addorsub: arith ins is SUB (0xb7eb948d)
instrument_addorsub: op1 is reg (4) and op2 is immediate
instrument_addorsub: arith ins is SUB (0xb7eb9490)
instrument_addorsub: op1 is reg (4) and op2 is immediate
instrument_test: op1 is reg and op2 is imm
LEA: base reg is 4(esi) index reg invalid, dst 10(eax)
instrument_addorsub: arith ins is ADD (0xb7eb95a6)
instrument_addorsub: op1 is reg (4) and op2 is immediate
instrument_addorsub: arith ins is ADD (0xb7eb95a9)
instrument_addorsub: op1 is reg (4) and op2 is immediate
instrument_test: op1 and op2 of are registers 25(dl), 22(cl)
17 EFLAGS eflags, 1, 0
instrument_test: op1 and op2 of are registers 25(dl), 25(dl)
17 EFLAGS eflags, 1, 0
instrument_test: op1 and op2 of are registers 26(dh), 22(cl)
17 EFLAGS eflags, 1, 0
instrument_test: op1 and op2 of are registers 25(dl), 25(dl)
17 EFLAGS eflags, 1, 0
instrument_test: op1 and op2 of are registers 26(dh), 22(cl)
17 EFLAGS eflags, 1, 0
LEA: base reg is 4(esi) index reg invalid, dst 10(eax)
instrument_test: op1 and op2 of are registers 26(dh), 26(dh)
17 EFLAGS eflags, 1, 0
instrument_test: op1 and op2 of are registers 26(dh), 26(dh)
17 EFLAGS eflags, 1, 0
instrument_test: op1 and op2 of are registers 25(dl), 22(cl)
17 EFLAGS eflags, 1, 0
LEA: base reg is 4(esi) index reg invalid, dst 10(eax)
instrument_test: op1 and op2 of are registers 25(dl), 25(dl)
17 EFLAGS eflags, 1, 0
instrument_test: op1 and op2 of are registers 25(dl), 25(dl)
17 EFLAGS eflags, 1, 0
instrument_test: op1 and op2 of are registers 26(dh), 22(cl)
17 EFLAGS eflags, 1, 0
LEA: base reg is 4(esi) index reg invalid, dst 10(eax)
instrument_test: op1 and op2 of are registers 10(eax), 10(eax)
17 EFLAGS eflags, 1, 0
instrument_addorsub: arith ins is ADD (0xb7f23049)
instrument_addorsub: op1 is reg (10) and op2 is immediate
instrument_addorsub: arith ins is ADD (0xb7f23058)
instrument_addorsub: op1 is reg (6) and op2 is immediate
instrument_addorsub: arith ins is ADD (0xb7e5c38c)
instrument_addorsub: op1 is reg (6) and op2 is immediate
instrument_addorsub: arith ins is ADD (0xb7e6a476)
instrument_addorsub: op1 is reg (7) and op2 is immediate
instrument_addorsub: arith ins is ADD (0xb7e6a490)
instrument_addorsub: op1 is reg (9) and op2 is immediate
instrument_addorsub: arith ins is ADD (0xb7e6a4a2)
instrument_addorsub: op1 is reg (9) and op2 is immediate
instrument_addorsub: arith ins is ADD (0xb7e6a4b4)
instrument_addorsub: op1 is reg (8) and op2 is immediate
instrument_test: op1 and op2 of are registers 8(edx), 8(edx)
17 EFLAGS eflags, 1, 0
instrument_addorsub: arith ins is ADD (0xb7fed4ab)
instrument_addorsub: op1 is register and op2 is mem
instrument_test: op1 and op2 of are registers 10(eax), 10(eax)
17 EFLAGS eflags, 1, 0
instrument_addorsub: arith ins is XOR (0xb7fed4c2)
instrument_addorsub: op1 and op2 of Arith are registers: 4 (esi), 4 (esi)
handling reg reset
LEA: base reg is 4(esi) index reg invalid, dst 4(esi)
instrument_addorsub: arith ins is ADD (0xb7e5c047)
instrument_addorsub: op1 is reg (7) and op2 is immediate
instrument_test: op1 and op2 of are registers 10(eax), 10(eax)
17 EFLAGS eflags, 1, 0
instrument_addorsub: arith ins is ADD (0xb7fed4de)
instrument_addorsub: op1 is reg (4) and op2 is immediate
instrument_test: op1 is mem and op2 is register
instrument_taint_regmem2flag: flags 63, reg 4 size 4, memsize 4
instrument_addorsub: arith ins is ADD (0xb7fed4e7)
instrument_addorsub: op1 is reg (6) and op2 is immediate
instrument_addorsub: arith ins is ADD (0xb7e5c0b9)
instrument_addorsub: op1 is reg (7) and op2 is immediate
instrument_addorsub: arith ins is SUB (0xb7e5c0bf)
instrument_addorsub: op1 is reg (6) and op2 is immediate
instrument_test: op1 and op2 of are registers 10(eax), 10(eax)
17 EFLAGS eflags, 1, 0
instrument_test: op1 is reg and op2 is imm
instrument_test: op1 is reg and op2 is imm
instrument_addorsub: arith ins is SUB (0xb7ed2f34)
instrument_addorsub: op1 is reg (6) and op2 is immediate
instrument_addorsub: arith ins is ADD (0xb7ed2f3c)
instrument_addorsub: op1 is reg (7) and op2 is immediate
instrument_test: op1 is reg and op2 is imm
LEA: base reg is 6(esp) index reg invalid, dst 4(esi)
LEA: base reg is 6(esp) index reg invalid, dst 3(edi)
op1 and op2 of xchg are registers
op1 and op2 of xchg are registers
instrument_test: op1 is mem and op2 is imm
[movx] 0xb7ed300d movzx ecx, al
instrument movx address 0xb7ed300d is src reg: 19 into dst reg: 9
instrument_addorsub: arith ins is XOR (0xb7ed3010)
instrument_addorsub: op1 and op2 of Arith are registers: 19 (al), 19 (al)
handling reg reset
instrument_addorsub: arith ins is SUB (0xb7ed2c86)
instrument_addorsub: op1 is reg (6) and op2 is immediate
instrument_addorsub: arith ins is ADD (0xb7ed2c8e)
instrument_addorsub: op1 is reg (7) and op2 is immediate
instrument_test: op1 and op2 of are registers 8(edx), 8(edx)
17 EFLAGS eflags, 1, 0
LEA: base reg is 10(eax) index reg invalid, dst 9(ecx)
imul instruction: imul edx
num operands is 4
instrument_addorsub: arith ins is SUB (0xb7ed2cb6)
instrument_addorsub: op1 and op2 of Arith are registers: 8 (edx), 9 (ecx)
instrument_test: op1 and op2 of are registers 4(esi), 4(esi)
17 EFLAGS eflags, 1, 0
LEA: base reg is 7(ebx) index reg invalid, dst 5(ebp)
[movx] 0xb7ed2d57 movzx eax, al
instrument movx address 0xb7ed2d57 is src reg: 19 into dst reg: 10
instrument_test: op1 is reg and op2 is imm
instrument_test: op1 is reg and op2 is imm
0xb7ed2d6f: not instrument noop nop 
instrument_addorsub: arith ins is XOR (0xb7ed2d70)
instrument_addorsub: op1 and op2 of Arith are registers: 10 (eax), 10 (eax)
handling reg reset
instrument_addorsub: arith ins is ADD (0xb7ed2d72)
instrument_addorsub: op1 is reg (6) and op2 is immediate
instrument_test: op1 is reg and op2 is imm
instrument_test: op1 is reg and op2 is imm
instrument_test: op1 is reg and op2 is imm
LEA: base reg is 7(ebx) index reg invalid, dst 10(eax)
LEA: base reg is 6(esp) index reg invalid, dst 10(eax)
instrument_addorsub: arith ins is XOR (0xb7e73ed1)
instrument_addorsub: op1 and op2 of Arith are registers: 5 (ebp), 5 (ebp)
handling reg reset
instrument_addorsub: arith ins is SUB (0xb7e73ed5)
instrument_addorsub: op1 is reg (6) and op2 is immediate
instrument_test: op1 and op2 of are registers 10(eax), 10(eax)
17 EFLAGS eflags, 1, 0
instrument_addorsub: arith ins is ADD (0xb7e73eff)
instrument_addorsub: op1 and op2 of Arith are registers: 4 (esi), 5 (ebp)
imul instruction: imul edi, esi
num operands is 3
instrument_addorsub: arith ins is ADD (0xb7e73f06)
instrument_addorsub: op1 is register and op2 is mem
[movx] 0xb7ed2a78 movzx eax, byte ptr [eax]
instrument_test: op1 is mem and op2 is register
instrument_taint_regmem2flag: flags 63, reg 19 size 1, memsize 1
instrument_addorsub: arith ins is SBB (0xb7ed2a7f)
instrument_addorsub: op1 and op2 of Arith are registers: 10 (eax), 10 (eax)
instrument_addorsub: arith ins is OR (0xb7ed2a81)
instrument_addorsub: op1 is reg (10) and op2 is immediate
instrument_test: op1 and op2 of are registers 10(eax), 10(eax)
17 EFLAGS eflags, 1, 0
instrument_test: op1 is mem and op2 is register
instrument_taint_regmem2flag: flags 63, reg 5 size 4, memsize 4
instrument_addorsub: arith ins is ADD (0xb7e73f23)
instrument_addorsub: op1 is reg (6) and op2 is immediate
instrument_addorsub: arith ins is XOR (0xb7e73f26)
instrument_addorsub: op1 and op2 of Arith are registers: 10 (eax), 10 (eax)
handling reg reset
instrument_test: op1 and op2 of are registers 10(eax), 10(eax)
17 EFLAGS eflags, 1, 0
[movx] 0xb7ed2d3a movzx edx, byte ptr [eax+0x3]
[movx] 0xb7ed2d3e movzx ecx, dl
instrument movx address 0xb7ed2d3e is src reg: 25 into dst reg: 9
instrument_test: op1 and op2 of are registers 9(ecx), 3(edi)
17 EFLAGS eflags, 1, 0
instrument_test: op1 is reg and op2 is imm
instrument_test: op1 and op2 of are registers 4(esi), 4(esi)
17 EFLAGS eflags, 1, 0
[movx] 0xb7ed2d57 movzx eax, al
instrument movx address 0xb7ed2d57 is src reg: 19 into dst reg: 10
instrument_test: op1 is reg and op2 is imm
instrument_test: op1 is reg and op2 is imm
LEA: base reg is 4(esi) index reg invalid, dst 5(ebp)
instrument_test: op1 is mem and op2 is register
instrument_taint_regmem2flag: flags 63, reg 5 size 4, memsize 4
instrument_addorsub: arith ins is ADD (0xb7e73eff)
instrument_addorsub: op1 and op2 of Arith are registers: 4 (esi), 5 (ebp)
imul instruction: imul edi, esi
num operands is 3
instrument_addorsub: arith ins is ADD (0xb7e73f06)
instrument_addorsub: op1 is register and op2 is mem
instrument_addorsub: arith ins is ADD (0xb7e73f23)
instrument_addorsub: op1 is reg (6) and op2 is immediate
instrument_addorsub: arith ins is XOR (0xb7e73f26)
instrument_addorsub: op1 and op2 of Arith are registers: 10 (eax), 10 (eax)
handling reg reset
instrument_addorsub: arith ins is XOR (0xb7ed2d70)
instrument_addorsub: op1 and op2 of Arith are registers: 10 (eax), 10 (eax)
handling reg reset
instrument_addorsub: arith ins is ADD (0xb7ed2d72)
instrument_addorsub: op1 is reg (6) and op2 is immediate
instrument_test: op1 and op2 of are registers 10(eax), 10(eax)
17 EFLAGS eflags, 1, 0
instrument_addorsub: arith ins is XOR (0xb7ed2da2)
instrument_addorsub: op1 and op2 of Arith are registers: 9 (ecx), 9 (ecx)
handling reg reset
op1 and op2 of xchg are registers
op1 and op2 of xchg are registers
instrument_addorsub: arith ins is AND (0xb7ed2dac)
instrument_addorsub: op1 is reg (8) and op2 is immediate
instrument_addorsub: arith ins is XOR (0xb7ed2db1)
instrument_addorsub: op1 and op2 of Arith are registers: 4 (esi), 4 (esi)
handling reg reset
instrument_addorsub: arith ins is AND (0xb7ed2de4)
instrument_addorsub: op1 is reg (10) and op2 is immediate
instrument_test: op1 is reg and op2 is imm
instrument_test: op1 is reg and op2 is imm
instrument_test: op1 is reg and op2 is imm
instrument_addorsub: arith ins is SUB (0xb7ed2e1b)
instrument_addorsub: op1 is reg (10) and op2 is immediate
instrument_addorsub: arith ins is SUB (0xb7ed2e20)
instrument_addorsub: op1 and op2 of Arith are registers: 10 (eax), 3 (edi)
instrument_test: op1 is reg and op2 is imm
instrument_test: op1 is reg and op2 is imm
instrument_addorsub: arith ins is AND (0xb7ed2e78)
instrument_addorsub: op1 is reg (8) and op2 is immediate
instrument_addorsub: arith ins is ADD (0xb7ed2e7e)
instrument_addorsub: op1 is reg (8) and op2 is immediate
instrument_addorsub: arith ins is ADD (0xb7ed2e81)
instrument_addorsub: op1 is reg (10) and op2 is immediate
imul instruction: imul eax, edx
num operands is 3
instrument_addorsub: arith ins is ADD (0xb7ed2e87)
instrument_addorsub: op1 is reg (9) and op2 is immediate
instrument_addorsub: arith ins is AND (0xb7ed2e8f)
instrument_addorsub: op1 is reg (8) and op2 is immediate
imul instruction: imul eax, ecx
num operands is 3
instrument_addorsub: arith ins is ADD (0xb7ed2e98)
instrument_addorsub: op1 is reg (8) and op2 is immediate
imul instruction: imul eax, edx
num operands is 3
instrument_addorsub: arith ins is ADD (0xb7ed2d72)
instrument_addorsub: op1 is reg (6) and op2 is immediate
instrument_test: op1 and op2 of are registers 10(eax), 10(eax)
17 EFLAGS eflags, 1, 0
instrument_addorsub: arith ins is ADD (0xb7ed3038)
instrument_addorsub: op1 is reg (6) and op2 is immediate
instrument_test: op1 is mem and op2 is imm
instrument_test: op1 is reg and op2 is imm
instrument_test: op1 and op2 of are registers 3(edi), 3(edi)
17 EFLAGS eflags, 1, 0
instrument_test: op1 is reg and op2 is imm
0xb7ed2e0e: not instrument noop data16 nop 
instrument_test: op1 is reg and op2 is imm
instrument_addorsub: arith ins is SUB (0xb7ed2e1b)
instrument_addorsub: op1 is reg (10) and op2 is immediate
instrument_addorsub: arith ins is SUB (0xb7ed2e20)
instrument_addorsub: op1 and op2 of Arith are registers: 10 (eax), 3 (edi)
instrument_test: op1 is reg and op2 is imm
instrument_test: op1 is reg and op2 is imm
instrument_addorsub: arith ins is ADD (0xb7ed2dca)
instrument_addorsub: op1 is reg (4) and op2 is immediate
op1 and op2 of xchg are registers
instrument_test: op1 is reg and op2 is imm
instrument_test: op1 is reg and op2 is imm
instrument_addorsub: arith ins is ADD (0xb7ed2dca)
instrument_addorsub: op1 is reg (4) and op2 is immediate
op1 and op2 of xchg are registers
op1 and op2 of xchg are registers
instrument_addorsub: arith ins is AND (0xb7ed2ddc)
instrument_addorsub: op1 is reg (8) and op2 is immediate
instrument_addorsub: arith ins is AND (0xb7ed2de4)
instrument_addorsub: op1 is reg (10) and op2 is immediate
instrument_test: op1 is reg and op2 is imm
instrument_test: op1 is reg and op2 is imm
instrument_test: op1 and op2 of are registers 10(eax), 10(eax)
17 EFLAGS eflags, 1, 0
instrument_test: op1 is reg and op2 is imm
instrument_addorsub: arith ins is XOR (0xb7e5c139)
instrument_addorsub: op1 and op2 of Arith are registers: 9 (ecx), 9 (ecx)
handling reg reset
LEA: base reg is 9(ecx) index reg invalid, dst 3(edi)
op1 and op2 of xchg are registers
op1 and op2 of xchg are registers
instrument_test: op1 is reg and op2 is imm
[movx] 0xb7e5c17a movzx ecx, cl
instrument movx address 0xb7e5c17a is src reg: 22 into dst reg: 9
instrument_test: op1 and op2 of are registers 9(ecx), 9(ecx)
17 EFLAGS eflags, 1, 0
instrument_test: op1 and op2 of are registers 5(ebp), 5(ebp)
17 EFLAGS eflags, 1, 0
instrument_addorsub: arith ins is AND (0xb7e5c14d)
instrument_addorsub: op1 is reg (8) and op2 is immediate
instrument_test: op1 and op2 of are registers 8(edx), 5(ebp)
17 EFLAGS eflags, 1, 0
LEA: base reg is 9(ecx) index reg invalid, dst 3(edi)
op1 and op2 of xchg are registers
instrument_addorsub: arith ins is AND (0xb7e5c284)
instrument_addorsub: op1 is reg (10) and op2 is immediate
instrument_test: op1 is mem and op2 is imm
instrument_addorsub: arith ins is XOR (0xb7e5c299)
instrument_addorsub: op1 and op2 of Arith are registers: 9 (ecx), 9 (ecx)
handling reg reset
instrument_addorsub: arith ins is ADD (0xb7e5c2d1)
instrument_addorsub: op1 is reg (9) and op2 is immediate
instrument_test: op1 and op2 of are registers 9(ecx), 9(ecx)
17 EFLAGS eflags, 1, 0
instrument_test: op1 and op2 of are registers 5(ebp), 5(ebp)
17 EFLAGS eflags, 1, 0
instrument_test: op1 and op2 of are registers 3(edi), 3(edi)
17 EFLAGS eflags, 1, 0
instrument_addorsub: arith ins is XOR (0xb7e5c24e)
instrument_addorsub: op1 and op2 of Arith are registers: 8 (edx), 8 (edx)
handling reg reset
div instruction: div ecx
instrument_test: op1 and op2 of are registers 3(edi), 3(edi)
17 EFLAGS eflags, 1, 0
instrument_addorsub: arith ins is XOR (0xb7e5c199)
instrument_addorsub: op1 and op2 of Arith are registers: 19 (al), 19 (al)
handling reg reset
instrument_test: op1 and op2 of are registers 5(ebp), 5(ebp)
17 EFLAGS eflags, 1, 0
instrument_addorsub: arith ins is AND (0xb7e5c1c3)
instrument_addorsub: op1 is reg (5) and op2 is immediate
instrument_addorsub: arith ins is ADD (0xb7e5c1df)
instrument_addorsub: op1 is reg (6) and op2 is immediate
instrument_addorsub: arith ins is AND (0xb7fed4ff)
instrument_addorsub: op1 is reg (25) and op2 is immediate
0xb7fed508: not instrument noop nop 
LEA: base reg is 4(esi) index reg invalid, dst 4(esi)
LEA: base reg is 7(ebx) index reg invalid, dst 8(edx)
instrument_addorsub: arith ins is XOR (0x80483b0)
instrument_addorsub: op1 and op2 of Arith are registers: 5 (ebp), 5 (ebp)
handling reg reset
instrument_addorsub: arith ins is AND (0x80483b5)
instrument_addorsub: op1 is reg (6) and op2 is immediate
instrument_addorsub: arith ins is SUB (0xb7fec858)
instrument_addorsub: op1 is reg (6) and op2 is immediate
instrument_addorsub: arith ins is ADD (0xb7fec863)
instrument_addorsub: op1 is reg (7) and op2 is immediate
instrument_addorsub: arith ins is ADD (0xb7fec872)
instrument_addorsub: op1 is register and op2 is mem
instrument_addorsub: arith ins is ADD (0xb7fec88b)
instrument_addorsub: op1 is mem and op2 is register
instrument_addorsub: arith ins is ADD (0xb7fec899)
instrument_addorsub: op1 is register and op2 is mem
instrument_test: op1 is reg and op2 is imm
instrument_test: op1 is mem and op2 is imm
instrument_test: op1 and op2 of are registers 8(edx), 8(edx)
17 EFLAGS eflags, 1, 0
[movx] 0xb7fec8c5 movzx edx, word ptr [edx+edi*2]
instrument_addorsub: arith ins is AND (0xb7fec8c9)
instrument_addorsub: op1 is reg (8) and op2 is immediate
instrument_addorsub: arith ins is ADD (0xb7fec8d2)
instrument_addorsub: op1 is register and op2 is mem
instrument_test: op1 and op2 of are registers 9(ecx), 9(ecx)
17 EFLAGS eflags, 1, 0
instrument_test: op1 and op2 of are registers 9(ecx), 9(ecx)
17 EFLAGS eflags, 1, 0
LEA: base reg is 5(ebp) index reg invalid, dst 10(eax)
instrument_addorsub: arith ins is ADD (0xb7fec905)
instrument_addorsub: op1 is register and op2 is mem
instrument_addorsub: arith ins is SUB (0xb7fec932)
instrument_addorsub: op1 is reg (6) and op2 is immediate
instrument_test: op1 and op2 of are registers 10(eax), 10(eax)
17 EFLAGS eflags, 1, 0
instrument_test: op1 and op2 of are registers 8(edx), 8(edx)
17 EFLAGS eflags, 1, 0
instrument_test: op1 and op2 of are registers 4(esi), 4(esi)
17 EFLAGS eflags, 1, 0
instrument_addorsub: arith ins is ADD (0xb7fec952)
instrument_addorsub: op1 is register and op2 is mem
[movx] 0xb7fec955 movzx edx, byte ptr [edx+0xc]
instrument_addorsub: arith ins is AND (0xb7fec959)
instrument_addorsub: op1 is reg (8) and op2 is immediate
instrument_test: op1 is reg and op2 is imm
instrument_test: op1 and op2 of are registers 10(eax), 10(eax)
17 EFLAGS eflags, 1, 0
LEA: base reg is 5(ebp) index reg invalid, dst 6(esp)
instrument_addorsub: arith ins is ADD (0xb7e5c3e9)
instrument_addorsub: op1 is reg (7) and op2 is immediate
instrument_addorsub: arith ins is SUB (0xb7e5c3ef)
instrument_addorsub: op1 is reg (6) and op2 is immediate
instrument_test: op1 and op2 of are registers 8(edx), 8(edx)
17 EFLAGS eflags, 1, 0
instrument_addorsub: arith ins is XOR (0xb7e5c40d)
instrument_addorsub: op1 and op2 of Arith are registers: 9 (ecx), 9 (ecx)
handling reg reset
instrument_test: op1 and op2 of are registers 8(edx), 8(edx)
17 EFLAGS eflags, 1, 0
instrument_test: op1 and op2 of are registers 10(eax), 10(eax)
17 EFLAGS eflags, 1, 0
instrument_addorsub: arith ins is XOR (0xb7e5c4db)
instrument_addorsub: op1 and op2 of Arith are registers: 9 (ecx), 9 (ecx)
handling reg reset
instrument_test: op1 and op2 of are registers 10(eax), 10(eax)
17 EFLAGS eflags, 1, 0
instrument_addorsub: arith ins is ADD (0xb7e75766)
instrument_addorsub: op1 is reg (7) and op2 is immediate
instrument_addorsub: arith ins is SUB (0xb7e7576c)
instrument_addorsub: op1 is reg (6) and op2 is immediate
LEA: base reg is 7(ebx) index reg invalid, dst 10(eax)
instrument_addorsub: arith ins is XOR (0xb7e755b1)
instrument_addorsub: op1 and op2 of Arith are registers: 10 (eax), 10 (eax)
handling reg reset
instrument_addorsub: arith ins is SUB (0xb7e755bb)
instrument_addorsub: op1 is reg (6) and op2 is immediate
instrument_addorsub: arith ins is ADD (0xb7e755c3)
instrument_addorsub: op1 is reg (7) and op2 is immediate
instrument_test: op1 is mem and op2 is imm
instrument_test: op1 and op2 of are registers 3(edi), 3(edi)
17 EFLAGS eflags, 1, 0
instrument_test: op1 and op2 of are registers 3(edi), 3(edi)
17 EFLAGS eflags, 1, 0
instrument_addorsub: arith ins is XOR (0xb7e755f1)
instrument_addorsub: op1 and op2 of Arith are registers: 5 (ebp), 5 (ebp)
handling reg reset
0xb7e755f3: not instrument noop nop 
LEA: base reg is 4(esi) index reg invalid, dst 4(esi)
instrument_test: op1 and op2 of are registers 10(eax), 10(eax)
17 EFLAGS eflags, 1, 0
instrument_test: op1 and op2 of are registers 10(eax), 10(eax)
17 EFLAGS eflags, 1, 0
LEA: base reg is 5(ebp) index reg invalid, dst 9(ecx)
instrument_addorsub: arith ins is ADD (0xb7e75662)
instrument_addorsub: op1 is mem and op2 is immediate
instrument_addorsub: arith ins is ADC (0xb7e75669)
instrument_addorsub: op1 is mem and op2 is immediate
instrument_test: op1 is mem and op2 is imm
instrument_addorsub: arith ins is SUB (0xb7e7567a)
instrument_addorsub: op1 is mem and op2 is immediate
instrument_addorsub: arith ins is ADD (0xb7e75688)
instrument_addorsub: op1 is reg (6) and op2 is immediate
instrument_addorsub: arith ins is SUB (0xb7e7567b)
instrument_addorsub: op1 is mem and op2 is immediate
instrument_addorsub: arith ins is ADD (0xb7e75688)
instrument_addorsub: op1 is reg (6) and op2 is immediate
instrument_test: op1 and op2 of are registers 10(eax), 10(eax)
17 EFLAGS eflags, 1, 0
instrument_addorsub: arith ins is XOR (0xb7e75785)
instrument_addorsub: op1 is register and op2 is mem
instrument_addorsub: arith ins is XOR (0xb7e757a6)
instrument_addorsub: op1 and op2 of Arith are registers: 10 (eax), 10 (eax)
handling reg reset
instrument_addorsub: arith ins is ADD (0xb7e757a8)
instrument_addorsub: op1 is reg (6) and op2 is immediate
instrument_addorsub: arith ins is AND (0xb7e5c440)
instrument_addorsub: op1 is reg (3) and op2 is immediate
instrument_test: op1 and op2 of are registers 4(esi), 4(esi)
17 EFLAGS eflags, 1, 0
instrument_addorsub: arith ins is ADD (0x8048519)
instrument_addorsub: op1 is reg (7) and op2 is immediate
instrument_addorsub: arith ins is SUB (0x804851f)
instrument_addorsub: op1 is reg (6) and op2 is immediate
LEA: base reg is 7(ebx) index reg invalid, dst 3(edi)
instrument_addorsub: arith ins is SUB (0x8048315)
instrument_addorsub: op1 is reg (6) and op2 is immediate
instrument_addorsub: arith ins is ADD (0x804831e)
instrument_addorsub: op1 is reg (7) and op2 is immediate
instrument_test: op1 and op2 of are registers 10(eax), 10(eax)
17 EFLAGS eflags, 1, 0
instrument_addorsub: arith ins is ADD (0x8048333)
instrument_addorsub: op1 is reg (6) and op2 is immediate
LEA: base reg is 7(ebx) index reg invalid, dst 10(eax)
instrument_addorsub: arith ins is SUB (0x8048537)
instrument_addorsub: op1 and op2 of Arith are registers: 3 (edi), 10 (eax)
instrument_test: op1 and op2 of are registers 3(edi), 3(edi)
17 EFLAGS eflags, 1, 0
instrument_addorsub: arith ins is XOR (0x8048540)
instrument_addorsub: op1 and op2 of Arith are registers: 4 (esi), 4 (esi)
handling reg reset
LEA: base reg is 4(esi) index reg invalid, dst 4(esi)
instrument_test: op1 and op2 of are registers 10(eax), 10(eax)
17 EFLAGS eflags, 1, 0
instrument_test: op1 and op2 of are registers 10(eax), 10(eax)
17 EFLAGS eflags, 1, 0
instrument_addorsub: arith ins is SUB (0x8048485)
instrument_addorsub: op1 is reg (6) and op2 is immediate
instrument_addorsub: arith ins is SUB (0x8048415)
instrument_addorsub: op1 is reg (10) and op2 is immediate
instrument_addorsub: arith ins is ADD (0x8048422)
instrument_addorsub: op1 and op2 of Arith are registers: 10 (eax), 8 (edx)
instrument_addorsub: arith ins is ADD (0x8048562)
instrument_addorsub: op1 is reg (4) and op2 is immediate
instrument_test: op1 and op2 of are registers 4(esi), 3(edi)
17 EFLAGS eflags, 1, 0
instrument_addorsub: arith ins is ADD (0x8048569)
instrument_addorsub: op1 is reg (6) and op2 is immediate
instrument_test: op1 and op2 of are registers 4(esi), 4(esi)
17 EFLAGS eflags, 1, 0
instrument_test: op1 and op2 of are registers 3(edi), 3(edi)
17 EFLAGS eflags, 1, 0
LEA: base reg is 6(esp) index reg invalid, dst 10(eax)
instrument_addorsub: arith ins is XOR (0xb7e70800)
instrument_addorsub: op1 and op2 of Arith are registers: 10 (eax), 10 (eax)
handling reg reset
LEA: base reg is 6(esp) index reg invalid, dst 9(ecx)
instrument_addorsub: arith ins is XOR (0xb7e70812)
instrument_addorsub: op1 is register and op2 is mem
instrument_addorsub: arith ins is XOR (0xb7e70822)
instrument_addorsub: op1 is register and op2 is mem
instrument_test: op1 and op2 of are registers 10(eax), 10(eax)
17 EFLAGS eflags, 1, 0
LEA: base reg is 6(esp) index reg invalid, dst 10(eax)
instrument_addorsub: arith ins is AND (0x80484a3)
instrument_addorsub: op1 is reg (6) and op2 is immediate
instrument_addorsub: arith ins is SUB (0x80484a6)
instrument_addorsub: op1 is reg (6) and op2 is immediate
instrument_test: op1 is reg and op2 is imm
instrument_test: op1 and op2 of are registers 10(eax), 10(eax)
17 EFLAGS eflags, 1, 0
LEA: base reg is 4(esi) index reg invalid, dst 4(esi)
0xb7fde419: not instrument a sysenter
Done with getpid
instrument_test: op1 and op2 of are registers 8(edx), 8(edx)
17 EFLAGS eflags, 1, 0
LEA: base reg is 4(esi) index reg invalid, dst 4(esi)
instrument_test: op1 is mem and op2 is imm
instrument_addorsub: arith ins is SUB (0xb7e8b8c1)
instrument_addorsub: op1 is reg (6) and op2 is immediate
instrument_addorsub: arith ins is ADD (0xb7e8b8c9)
instrument_addorsub: op1 is reg (7) and op2 is immediate
LEA: base reg is 6(esp) index reg invalid, dst 10(eax)
instrument_addorsub: arith ins is ADD (0xb7e8215b)
instrument_addorsub: op1 is reg (7) and op2 is immediate
instrument_addorsub: arith ins is SUB (0xb7e82161)
instrument_addorsub: op1 is reg (6) and op2 is immediate
instrument_test: op1 is mem and op2 is imm
instrument_test: op1 and op2 of are registers 3(edi), 3(edi)
17 EFLAGS eflags, 1, 0
instrument_test: op1 and op2 of are registers 10(eax), 10(eax)
17 EFLAGS eflags, 1, 0
instrument_test: op1 is reg and op2 is imm
instrument_test: op1 and op2 of are registers 9(ecx), 9(ecx)
17 EFLAGS eflags, 1, 0
instrument_test: op1 is mem and op2 is imm
instrument_test: op1 and op2 of are registers 8(edx), 8(edx)
17 EFLAGS eflags, 1, 0
instrument_test: op1 and op2 of are registers 8(edx), 8(edx)
17 EFLAGS eflags, 1, 0
instrument_test: op1 is reg and op2 is imm
instrument_test: op1 is reg and op2 is imm
instrument_test: op1 is reg and op2 is imm
instrument_test: op1 is reg and op2 is imm
instrument_test: op1 and op2 of are registers 25(dl), 22(cl)
17 EFLAGS eflags, 1, 0
instrument_test: op1 and op2 of are registers 22(cl), 22(cl)
17 EFLAGS eflags, 1, 0
instrument_test: op1 is reg and op2 is imm
instrument_test: op1 and op2 of are registers 25(dl), 22(cl)
17 EFLAGS eflags, 1, 0
instrument_test: op1 and op2 of are registers 22(cl), 22(cl)
17 EFLAGS eflags, 1, 0
instrument_test: op1 is reg and op2 is imm
instrument_test: op1 and op2 of are registers 25(dl), 22(cl)
17 EFLAGS eflags, 1, 0
instrument_test: op1 and op2 of are registers 22(cl), 22(cl)
17 EFLAGS eflags, 1, 0
instrument_addorsub: arith ins is XOR (0xb7ebbb35)
instrument_addorsub: op1 and op2 of Arith are registers: 9 (ecx), 8 (edx)
instrument_addorsub: arith ins is ADD (0xb7ebbb3c)
instrument_addorsub: op1 and op2 of Arith are registers: 3 (edi), 9 (ecx)
instrument_addorsub: arith ins is XOR (0xb7ebbb44)
instrument_addorsub: op1 and op2 of Arith are registers: 3 (edi), 9 (ecx)
instrument_addorsub: arith ins is OR (0xb7ebbb46)
instrument_addorsub: op1 is reg (3) and op2 is immediate
instrument_addorsub: arith ins is XOR (0xb7ebbb53)
instrument_addorsub: op1 and op2 of Arith are registers: 9 (ecx), 8 (edx)
instrument_addorsub: arith ins is ADD (0xb7ebbb5a)
instrument_addorsub: op1 and op2 of Arith are registers: 3 (edi), 9 (ecx)
instrument_addorsub: arith ins is XOR (0xb7ebbb62)
instrument_addorsub: op1 and op2 of Arith are registers: 3 (edi), 9 (ecx)
instrument_addorsub: arith ins is OR (0xb7ebbb64)
instrument_addorsub: op1 is reg (3) and op2 is immediate
instrument_addorsub: arith ins is XOR (0xb7ebbb74)
instrument_addorsub: op1 and op2 of Arith are registers: 9 (ecx), 8 (edx)
instrument_addorsub: arith ins is ADD (0xb7ebbb7b)
instrument_addorsub: op1 and op2 of Arith are registers: 3 (edi), 9 (ecx)
instrument_addorsub: arith ins is XOR (0xb7ebbb83)
instrument_addorsub: op1 and op2 of Arith are registers: 3 (edi), 9 (ecx)
instrument_addorsub: arith ins is OR (0xb7ebbb85)
instrument_addorsub: op1 is reg (3) and op2 is immediate
instrument_addorsub: arith ins is XOR (0xb7ebbb8e)
instrument_addorsub: op1 and op2 of Arith are registers: 9 (ecx), 8 (edx)
instrument_addorsub: arith ins is ADD (0xb7ebbb95)
instrument_addorsub: op1 and op2 of Arith are registers: 3 (edi), 9 (ecx)
instrument_addorsub: arith ins is XOR (0xb7ebbb99)
instrument_addorsub: op1 and op2 of Arith are registers: 3 (edi), 9 (ecx)
instrument_addorsub: arith ins is OR (0xb7ebbb9b)
instrument_addorsub: op1 is reg (3) and op2 is immediate
instrument_addorsub: arith ins is XOR (0xb7ebbba7)
instrument_addorsub: op1 and op2 of Arith are registers: 9 (ecx), 8 (edx)
instrument_addorsub: arith ins is ADD (0xb7ebbbae)
instrument_addorsub: op1 and op2 of Arith are registers: 3 (edi), 9 (ecx)
instrument_addorsub: arith ins is XOR (0xb7ebbbb2)
instrument_addorsub: op1 and op2 of Arith are registers: 3 (edi), 9 (ecx)
instrument_addorsub: arith ins is OR (0xb7ebbbb4)
instrument_addorsub: op1 is reg (3) and op2 is immediate
instrument_addorsub: arith ins is XOR (0xb7ebbbbd)
instrument_addorsub: op1 and op2 of Arith are registers: 9 (ecx), 8 (edx)
instrument_addorsub: arith ins is ADD (0xb7ebbbc4)
instrument_addorsub: op1 and op2 of Arith are registers: 3 (edi), 9 (ecx)
instrument_addorsub: arith ins is XOR (0xb7ebbbc8)
instrument_addorsub: op1 and op2 of Arith are registers: 3 (edi), 9 (ecx)
instrument_addorsub: arith ins is OR (0xb7ebbbca)
instrument_addorsub: op1 is reg (3) and op2 is immediate
instrument_addorsub: arith ins is XOR (0xb7ebbbd6)
instrument_addorsub: op1 and op2 of Arith are registers: 9 (ecx), 8 (edx)
instrument_addorsub: arith ins is ADD (0xb7ebbbdd)
instrument_addorsub: op1 and op2 of Arith are registers: 3 (edi), 9 (ecx)
instrument_addorsub: arith ins is XOR (0xb7ebbbe1)
instrument_addorsub: op1 and op2 of Arith are registers: 3 (edi), 9 (ecx)
instrument_addorsub: arith ins is OR (0xb7ebbbe3)
instrument_addorsub: op1 is reg (3) and op2 is immediate
instrument_addorsub: arith ins is XOR (0xb7ebbbec)
instrument_addorsub: op1 and op2 of Arith are registers: 9 (ecx), 8 (edx)
instrument_addorsub: arith ins is ADD (0xb7ebbbf3)
instrument_addorsub: op1 and op2 of Arith are registers: 3 (edi), 9 (ecx)
instrument_addorsub: arith ins is ADD (0xb7ebbc06)
instrument_addorsub: op1 is reg (10) and op2 is immediate
instrument_addorsub: arith ins is ADD (0xb7ebbc09)
instrument_addorsub: op1 is reg (10) and op2 is immediate
instrument_addorsub: arith ins is ADD (0xb7ebbc0c)
instrument_addorsub: op1 is reg (10) and op2 is immediate
instrument_test: op1 and op2 of are registers 22(cl), 22(cl)
17 EFLAGS eflags, 1, 0
instrument_test: op1 and op2 of are registers 22(cl), 25(dl)
17 EFLAGS eflags, 1, 0
instrument_test: op1 and op2 of are registers 23(ch), 23(ch)
17 EFLAGS eflags, 1, 0
instrument_test: op1 and op2 of are registers 23(ch), 25(dl)
17 EFLAGS eflags, 1, 0
instrument_test: op1 and op2 of are registers 22(cl), 22(cl)
17 EFLAGS eflags, 1, 0
instrument_test: op1 and op2 of are registers 22(cl), 25(dl)
17 EFLAGS eflags, 1, 0
instrument_test: op1 is mem and op2 is imm
instrument_test: op1 and op2 of are registers 10(eax), 10(eax)
17 EFLAGS eflags, 1, 0
instrument_test: op1 is mem and op2 is register
instrument_taint_regmem2flag: flags 63, reg 3 size 4, memsize 4
instrument_addorsub: arith ins is XOR (0xb7e8224b)
instrument_addorsub: op1 and op2 of Arith are registers: 10 (eax), 10 (eax)
handling reg reset
instrument_test: op1 is mem and op2 is imm
instrument_addorsub: arith ins is ADD (0xb7e8226c)
instrument_addorsub: op1 is mem and op2 is immediate
instrument_addorsub: arith ins is SUB (0xb7e82276)
instrument_addorsub: op1 is register and op2 is mem
[movx] 0xb7e82281 movsx eax, byte ptr [esi+0x46]
instrument_addorsub: arith ins is ADD (0xb7e8226c)
instrument_addorsub: op1 is mem and op2 is immediate
instrument_addorsub: arith ins is SUB (0xb7e82276)
instrument_addorsub: op1 is register and op2 is mem
[movx] 0xb7e82281 movsx eax, byte ptr [esi+0x46]
instrument_addorsub: arith ins is XOR (0xb7eadad1)
instrument_addorsub: op1 and op2 of Arith are registers: 10 (eax), 10 (eax)
handling reg reset
instrument_addorsub: arith ins is SUB (0xb7eadad6)
instrument_addorsub: op1 is reg (6) and op2 is immediate
instrument_addorsub: arith ins is ADD (0xb7eadae2)
instrument_addorsub: op1 is reg (7) and op2 is immediate
instrument_test: op1 and op2 of are registers 8(edx), 8(edx)
17 EFLAGS eflags, 1, 0
instrument_addorsub: arith ins is AND (0xb7eadaf6)
instrument_addorsub: op1 is reg (10) and op2 is immediate
instrument_test: op1 is reg and op2 is imm
instrument_test: op1 and op2 of are registers 9(ecx), 8(edx)
17 EFLAGS eflags, 1, 0
instrument_addorsub: arith ins is ADD (0xb7eadb80)
instrument_addorsub: op1 and op2 of Arith are registers: 10 (eax), 5 (ebp)
instrument_test: op1 and op2 of are registers 10(eax), 10(eax)
17 EFLAGS eflags, 1, 0
[movx] 0xb7eadb86 movsx eax, byte ptr [edi+0x46]
instrument_addorsub: arith ins is SUB (0xb7eae634)
instrument_addorsub: op1 is reg (6) and op2 is immediate
instrument_addorsub: arith ins is ADD (0xb7eae640)
instrument_addorsub: op1 is reg (7) and op2 is immediate
instrument_test: op1 is reg and op2 is imm
instrument_test: op1 is reg and op2 is imm
instrument_test: op1 and op2 of are registers 10(eax), 10(eax)
17 EFLAGS eflags, 1, 0
instrument_test: op1 and op2 of are registers 10(eax), 10(eax)
17 EFLAGS eflags, 1, 0
instrument_test: op1 is reg and op2 is imm
instrument_test: op1 and op2 of are registers 5(ebp), 8(edx)
17 EFLAGS eflags, 1, 0
instrument_addorsub: arith ins is SUB (0xb7eaf452)
instrument_addorsub: op1 is reg (6) and op2 is immediate
instrument_addorsub: arith ins is ADD (0xb7eaf45e)
instrument_addorsub: op1 is reg (7) and op2 is immediate
instrument_test: op1 and op2 of are registers 10(eax), 10(eax)
17 EFLAGS eflags, 1, 0
instrument_addorsub: arith ins is ADD (0xb7eaf46b)
instrument_addorsub: op1 is reg (6) and op2 is immediate
instrument_test: op1 is mem and op2 is imm
instrument_test: op1 and op2 of are registers 9(ecx), 9(ecx)
17 EFLAGS eflags, 1, 0
[movx] 0xb7eaf484 movsx eax, byte ptr [esi+0x46]
[movx] 0xb7eaf484 movsx eax, byte ptr [esi+0x46]
instrument_addorsub: arith ins is SUB (0xb7ea1fb4)
instrument_addorsub: op1 is reg (6) and op2 is immediate
instrument_addorsub: arith ins is ADD (0xb7ea1fc6)
instrument_addorsub: op1 is reg (7) and op2 is immediate
instrument_test: op1 and op2 of are registers 5(ebp), 5(ebp)
17 EFLAGS eflags, 1, 0
[movx] 0xb7ea1fd3 movsx eax, byte ptr [esi+0x46]
LEA: base reg is 6(esp) index reg invalid, dst 8(edx)
instrument_addorsub: arith ins is SUB (0xb7ead520)
instrument_addorsub: op1 is reg (6) and op2 is immediate
instrument_addorsub: arith ins is ADD (0xb7f1402a)
instrument_addorsub: op1 is reg (7) and op2 is immediate
op1 and op2 of xchg are registers
Done with fstat64.
op1 and op2 of xchg are registers
instrument_test: op1 is reg and op2 is imm
instrument_addorsub: arith ins is ADD (0xb7ead542)
instrument_addorsub: op1 is reg (6) and op2 is immediate
instrument_test: op1 and op2 of are registers 10(eax), 10(eax)
17 EFLAGS eflags, 1, 0
instrument_addorsub: arith ins is AND (0xb7ea1ff4)
instrument_addorsub: op1 is reg (10) and op2 is immediate
instrument_test: op1 is reg and op2 is imm
instrument_test: op1 and op2 of are registers 3(edi), 3(edi)
17 EFLAGS eflags, 1, 0
instrument_addorsub: arith ins is AND (0xb7ea209e)
instrument_addorsub: op1 is reg (9) and op2 is immediate
instrument_addorsub: arith ins is AND (0xb7ea20a4)
instrument_addorsub: op1 is reg (10) and op2 is immediate
instrument_addorsub: arith ins is OR (0xb7ea20a9)
instrument_addorsub: op1 and op2 of Arith are registers: 9 (ecx), 10 (eax)
instrument_addorsub: arith ins is SUB (0xb7ea20ab)
instrument_addorsub: op1 is reg (9) and op2 is immediate
instrument_test: op1 is reg and op2 is imm
instrument_addorsub: arith ins is OR (0xb7ea20ba)
instrument_addorsub: op1 is mem and op2 is immediate
instrument_test: op1 and op2 of are registers 3(edi), 3(edi)
17 EFLAGS eflags, 1, 0
LEA: base reg is 3(edi) index reg invalid, dst 10(eax)
instrument_addorsub: arith ins is AND (0xb7ea2012)
instrument_addorsub: op1 is reg (10) and op2 is immediate
instrument_test: op1 is reg and op2 is imm
instrument_test: op1 is reg and op2 is imm
instrument_test: op1 is reg and op2 is imm
instrument_addorsub: arith ins is ADD (0xb7ea2063)
instrument_addorsub: op1 and op2 of Arith are registers: 3 (edi), 10 (eax)
instrument_addorsub: arith ins is SUB (0xb7eaf3d2)
instrument_addorsub: op1 is reg (6) and op2 is immediate
instrument_addorsub: arith ins is ADD (0xb7eaf3de)
instrument_addorsub: op1 is reg (7) and op2 is immediate
instrument_test: op1 and op2 of are registers 8(edx), 8(edx)
17 EFLAGS eflags, 1, 0
instrument_test: op1 is reg and op2 is imm
instrument_test: op1 and op2 of are registers 8(edx), 8(edx)
17 EFLAGS eflags, 1, 0
instrument_test: op1 and op2 of are registers 8(edx), 8(edx)
17 EFLAGS eflags, 1, 0
instrument_addorsub: arith ins is OR (0xb7eaf407)
instrument_addorsub: op1 is reg (10) and op2 is immediate
instrument_addorsub: arith ins is ADD (0xb7eaf40c)
instrument_addorsub: op1 is reg (6) and op2 is immediate
instrument_addorsub: arith ins is AND (0xb7eaf418)
instrument_addorsub: op1 is reg (10) and op2 is immediate
instrument_addorsub: arith ins is ADD (0xb7eaf41d)
instrument_addorsub: op1 is reg (6) and op2 is immediate
instrument_addorsub: arith ins is ADD (0xb7ea2082)
instrument_addorsub: op1 is reg (6) and op2 is immediate
instrument_test: op1 is reg and op2 is imm
LEA: base reg is 4(esi) index reg invalid, dst 10(eax)
LEA: base reg is 4(esi) index reg invalid, dst 10(eax)
instrument_addorsub: arith ins is ADD (0xb7eaf46b)
instrument_addorsub: op1 is reg (6) and op2 is immediate
instrument_test: op1 is reg and op2 is imm
instrument_test: op1 and op2 of are registers 5(ebp), 8(edx)
17 EFLAGS eflags, 1, 0
instrument_addorsub: arith ins is OR (0xb7eae6d5)
instrument_addorsub: op1 is reg (20) and op2 is immediate
instrument_test: op1 and op2 of are registers 10(eax), 10(eax)
17 EFLAGS eflags, 1, 0
instrument_addorsub: arith ins is AND (0xb7eae6ee)
instrument_addorsub: op1 is reg (9) and op2 is immediate
instrument_test: op1 is reg and op2 is imm
instrument_test: op1 is mem and op2 is register
instrument_taint_regmem2flag: flags 63, reg 8 size 4, memsize 4
LEA: base reg is 8(edx) index reg invalid, dst 10(eax)
instrument_test: op1 is reg and op2 is imm
instrument_addorsub: arith ins is SUB (0xb7eae77e)
instrument_addorsub: op1 and op2 of Arith are registers: 8 (edx), 10 (eax)
instrument_addorsub: arith ins is XOR (0xb7eadea1)
instrument_addorsub: op1 and op2 of Arith are registers: 10 (eax), 10 (eax)
handling reg reset
instrument_addorsub: arith ins is SUB (0xb7eadea3)
instrument_addorsub: op1 is reg (6) and op2 is immediate
instrument_test: op1 and op2 of are registers 4(esi), 4(esi)
17 EFLAGS eflags, 1, 0
instrument_addorsub: arith ins is ADD (0xb7eadec8)
instrument_addorsub: op1 is reg (6) and op2 is immediate
instrument_addorsub: arith ins is ADD (0xb7eae699)
instrument_addorsub: op1 is reg (6) and op2 is immediate
instrument_test: op1 is reg and op2 is imm
instrument_addorsub: arith ins is XOR (0xb7eadbab)
instrument_addorsub: op1 and op2 of Arith are registers: 8 (edx), 8 (edx)
handling reg reset
instrument_addorsub: arith ins is SUB (0xb7eadbad)
instrument_addorsub: op1 is register and op2 is mem
instrument_test: op1 is reg and op2 is imm
instrument_addorsub: arith ins is XOR (0xb7eadbb7)
instrument_addorsub: op1 and op2 of Arith are registers: 8 (edx), 8 (edx)
handling reg reset
div instruction: div ecx
instrument_addorsub: arith ins is SUB (0xb7eadbbd)
instrument_addorsub: op1 and op2 of Arith are registers: 9 (ecx), 8 (edx)
instrument_test: op1 and op2 of are registers 5(ebp), 5(ebp)
17 EFLAGS eflags, 1, 0
instrument_addorsub: arith ins is ADD (0xb7eadbc9)
instrument_addorsub: op1 and op2 of Arith are registers: 9 (ecx), 4 (esi)
instrument_addorsub: arith ins is XOR (0xb7eaf511)
instrument_addorsub: op1 and op2 of Arith are registers: 10 (eax), 10 (eax)
handling reg reset
instrument_addorsub: arith ins is SUB (0xb7eaf516)
instrument_addorsub: op1 is reg (6) and op2 is immediate
instrument_addorsub: arith ins is ADD (0xb7eaf522)
instrument_addorsub: op1 is reg (7) and op2 is immediate
instrument_test: op1 and op2 of are registers 8(edx), 8(edx)
17 EFLAGS eflags, 1, 0
LEA: base reg is 4(esi) index reg invalid, dst 4(esi)
instrument_test: op1 and op2 of are registers 9(ecx), 5(ebp)
17 EFLAGS eflags, 1, 0
instrument_addorsub: arith ins is SUB (0xb7eaf54a)
instrument_addorsub: op1 and op2 of Arith are registers: 5 (ebp), 9 (ecx)
instrument_test: op1 and op2 of are registers 8(edx), 5(ebp)
17 EFLAGS eflags, 1, 0
instrument_test: op1 is reg and op2 is imm
instrument_test: op1 and op2 of are registers 8(edx), 8(edx)
17 EFLAGS eflags, 1, 0
[movx] 0xb7eaf57f movsx eax, byte ptr [edi+0x46]
LEA: base reg is 4(esi) index reg invalid, dst 5(ebp)
[movx] 0xb7eaf586 movzx ecx, byte ptr [esi]
instrument_test: op1 is reg and op2 is imm
instrument_test: op1 is mem and op2 is register
instrument_taint_regmem2flag: flags 63, reg 8 size 4, memsize 4
LEA: base reg is 8(edx) index reg invalid, dst 10(eax)
instrument_test: op1 is reg and op2 is imm
instrument_test: op1 is reg and op2 is imm
instrument_test: op1 is reg and op2 is imm
[movx] 0xb7eae696 movzx eax, al
instrument movx address 0xb7eae696 is src reg: 19 into dst reg: 10
instrument_addorsub: arith ins is ADD (0xb7eae699)
instrument_addorsub: op1 is reg (6) and op2 is immediate
instrument_test: op1 is reg and op2 is imm
instrument_addorsub: arith ins is SUB (0xb7eaf5a7)
instrument_addorsub: op1 is reg (8) and op2 is immediate
instrument_test: op1 and op2 of are registers 9(ecx), 5(ebp)
17 EFLAGS eflags, 1, 0
instrument_addorsub: arith ins is SUB (0xb7eaf54a)
instrument_addorsub: op1 and op2 of Arith are registers: 5 (ebp), 9 (ecx)
instrument_test: op1 and op2 of are registers 8(edx), 5(ebp)
17 EFLAGS eflags, 1, 0
instrument_test: op1 is reg and op2 is imm
instrument_test: op1 and op2 of are registers 5(ebp), 5(ebp)
17 EFLAGS eflags, 1, 0
instrument_addorsub: arith ins is SUB (0xb7eaf5d4)
instrument_addorsub: op1 and op2 of Arith are registers: 10 (eax), 8 (edx)
instrument_addorsub: arith ins is ADD (0xb7eaf5d6)
instrument_addorsub: op1 is reg (6) and op2 is immediate
instrument_addorsub: arith ins is SUB (0xb7eadbdb)
instrument_addorsub: op1 and op2 of Arith are registers: 5 (ebp), 10 (eax)
instrument_addorsub: arith ins is SUB (0xb7eadb63)
instrument_addorsub: op1 and op2 of Arith are registers: 10 (eax), 5 (ebp)
instrument_addorsub: arith ins is ADD (0xb7eadb65)
instrument_addorsub: op1 is reg (6) and op2 is immediate
instrument_test: op1 and op2 of are registers 3(edi), 10(eax)
17 EFLAGS eflags, 1, 0
instrument_test: op1 is mem and op2 is imm
instrument_addorsub: arith ins is SUB (0xb7e822ba)
instrument_addorsub: op1 is mem and op2 is immediate
instrument_test: op1 is mem and op2 is imm
instrument_test: op1 is mem and op2 is imm
instrument_test: op1 and op2 of are registers 10(eax), 10(eax)
17 EFLAGS eflags, 1, 0
instrument_test: op1 and op2 of are registers 3(edi), 3(edi)
17 EFLAGS eflags, 1, 0
instrument_test: op1 and op2 of are registers 10(eax), 10(eax)
17 EFLAGS eflags, 1, 0
LEA: base reg is 7(ebx) index reg invalid, dst 10(eax)
LEA: base reg is 3(edi) index reg invalid, dst 10(eax)
[movx] 0xb7e823b4 movzx eax, byte ptr [edi+0x1]
LEA: base reg is 10(eax) index reg invalid, dst 8(edx)
instrument_test: op1 is reg and op2 is imm
[movx] 0xb7e823cc movsx eax, byte ptr [ebp-0x474]
[movx] 0xb7e823d9 movzx eax, byte ptr [ebx+eax*1-0x4cc94]
instrument_addorsub: arith ins is ADD (0xb7e823e1)
instrument_addorsub: op1 is register and op2 is mem
LEA: base reg is 5(ebp) index reg invalid, dst 3(edi)
instrument_test: op1 is mem and op2 is imm
instrument_addorsub: arith ins is ADD (0xb7e839cf)
instrument_addorsub: op1 is reg (10) and op2 is immediate
instrument_test: op1 is mem and op2 is imm
instrument_addorsub: arith ins is ADC (0xb7e83a07)
instrument_addorsub: op1 is reg (8) and op2 is immediate
instrument_test: op1 is mem and op2 is imm
instrument_addorsub: arith ins is ADD (0xb7e8614c)
instrument_addorsub: op1 is reg (10) and op2 is immediate
instrument_test: op1 is mem and op2 is imm
[movx] 0xb7e86161 movsx eax, byte ptr [eax]
instrument_test: op1 and op2 of are registers 9(ecx), 9(ecx)
17 EFLAGS eflags, 1, 0
instrument_test: op1 is mem and op2 is imm
instrument_test: op1 and op2 of are registers 9(ecx), 9(ecx)
17 EFLAGS eflags, 1, 0
instrument_test: op1 is mem and op2 is imm
instrument_test: op1 is mem and op2 is imm
instrument_addorsub: arith ins is XOR (0xb7e849cf)
instrument_addorsub: op1 and op2 of Arith are registers: 10 (eax), 10 (eax)
handling reg reset
instrument_test: op1 is mem and op2 is imm
instrument_addorsub: arith ins is ADD (0xb7e81acd)
instrument_addorsub: op1 is reg (7) and op2 is immediate
instrument_test: op1 and op2 of are registers 10(eax), 10(eax)
17 EFLAGS eflags, 1, 0
LEA: base reg is 7(ebx) index reg invalid, dst 3(edi)
LEA: base reg is 7(ebx) index reg invalid, dst 10(eax)
instrument_test: op1 is reg and op2 is imm
instrument_test: op1 is reg and op2 is imm
instrument_test: op1 is reg and op2 is imm
LEA: base reg is 4(esi) index reg invalid, dst 4(esi)
instrument_addorsub: arith ins is SUB (0xb7e81b5a)
instrument_addorsub: op1 is reg (4) and op2 is immediate
mul instruction: mul ebp
instrument_addorsub: arith ins is ADD (0xb7e81b65)
instrument_addorsub: op1 and op2 of Arith are registers: 10 (eax), 10 (eax)
instrument_addorsub: arith ins is SUB (0xb7e81b67)
instrument_addorsub: op1 and op2 of Arith are registers: 9 (ecx), 10 (eax)
instrument_test: op1 and op2 of are registers 8(edx), 8(edx)
17 EFLAGS eflags, 1, 0
[movx] 0xb7e81b6b movzx eax, byte ptr [edi+ecx*1]
instrument_addorsub: arith ins is SUB (0xb7e81b5a)
instrument_addorsub: op1 is reg (4) and op2 is immediate
mul instruction: mul ebp
instrument_addorsub: arith ins is ADD (0xb7e81b65)
instrument_addorsub: op1 and op2 of Arith are registers: 10 (eax), 10 (eax)
instrument_addorsub: arith ins is SUB (0xb7e81b67)
instrument_addorsub: op1 and op2 of Arith are registers: 9 (ecx), 10 (eax)
instrument_test: op1 and op2 of are registers 8(edx), 8(edx)
17 EFLAGS eflags, 1, 0
[movx] 0xb7e81b6b movzx eax, byte ptr [edi+ecx*1]
instrument_test: op1 is mem and op2 is imm
instrument_test: op1 is mem and op2 is imm
instrument_test: op1 is mem and op2 is imm
instrument_test: op1 is mem and op2 is imm
instrument_test: op1 is mem and op2 is imm
instrument_test: op1 is mem and op2 is imm
instrument_addorsub: arith ins is SUB (0xb7e83a8f)
instrument_addorsub: op1 is register and op2 is mem
instrument_test: op1 is mem and op2 is register
instrument_taint_regmem2flag: flags 63, reg 10 size 4, memsize 4
instrument_test: op1 is mem and op2 is imm
instrument_test: op1 is mem and op2 is imm
instrument_addorsub: arith ins is XOR (0xb7e83ad1)
instrument_addorsub: op1 and op2 of Arith are registers: 8 (edx), 8 (edx)
handling reg reset
instrument_addorsub: arith ins is SUB (0xb7e83ad9)
instrument_addorsub: op1 and op2 of Arith are registers: 10 (eax), 3 (edi)
instrument_addorsub: arith ins is ADD (0xb7e83adb)
instrument_addorsub: op1 and op2 of Arith are registers: 9 (ecx), 10 (eax)
instrument_test: op1 is mem and op2 is imm
instrument_addorsub: arith ins is SUB (0xb7e83b01)
instrument_addorsub: op1 is register and op2 is mem
instrument_addorsub: arith ins is ADD (0xb7e83b07)
instrument_addorsub: op1 is register and op2 is mem
instrument_test: op1 is mem and op2 is imm
instrument_test: op1 is mem and op2 is imm
instrument_addorsub: arith ins is OR (0xb7e83b45)
instrument_addorsub: op1 is register and op2 is mem
instrument_addorsub: arith ins is OR (0xb7e83b4b)
instrument_addorsub: op1 is register and op2 is mem
instrument_test: op1 is reg and op2 is imm
instrument_addorsub: arith ins is ADC (0xb7e83b54)
instrument_addorsub: op1 is mem and op2 is immediate
instrument_test: op1 is mem and op2 is imm
instrument_test: op1 is mem and op2 is imm
instrument_test: op1 is mem and op2 is register
instrument_taint_regmem2flag: flags 63, reg 10 size 4, memsize 4
instrument_test: op1 and op2 of are registers 10(eax), 10(eax)
17 EFLAGS eflags, 1, 0
instrument_test: op1 is mem and op2 is imm
instrument_test: op1 is mem and op2 is register
instrument_taint_regmem2flag: flags 63, reg 10 size 4, memsize 4
LEA: base reg is 10(eax) index reg invalid, dst 8(edx)
instrument_test: op1 is mem and op2 is imm
instrument_test: op1 is mem and op2 is imm
instrument_test: op1 is mem and op2 is register
instrument_taint_regmem2flag: flags 63, reg 10 size 4, memsize 4
LEA: base reg is 10(eax) index reg invalid, dst 8(edx)
instrument_test: op1 is mem and op2 is imm
instrument_test: op1 is mem and op2 is register
instrument_taint_regmem2flag: flags 63, reg 10 size 4, memsize 4
LEA: base reg is 10(eax) index reg invalid, dst 8(edx)
instrument_test: op1 is mem and op2 is imm
instrument_test: op1 is mem and op2 is imm
instrument_test: op1 is mem and op2 is imm
instrument_addorsub: arith ins is ADD (0xb7e83c19)
instrument_addorsub: op1 is register and op2 is mem
instrument_test: op1 and op2 of are registers 10(eax), 10(eax)
17 EFLAGS eflags, 1, 0
instrument_test: op1 is mem and op2 is imm
[movx] 0xb7e83c6b movsx eax, byte ptr [esi+0x46]
instrument_addorsub: arith ins is SUB (0xb7e83c7c)
instrument_addorsub: op1 and op2 of Arith are registers: 3 (edi), 9 (ecx)
instrument_addorsub: arith ins is SUB (0xb7eadbe6)
instrument_addorsub: op1 and op2 of Arith are registers: 9 (ecx), 8 (edx)
instrument_test: op1 is mem and op2 is register
instrument_taint_regmem2flag: flags 63, reg 9 size 4, memsize 4
instrument_addorsub: arith ins is ADD (0xb7eadbf2)
instrument_addorsub: op1 and op2 of Arith are registers: 5 (ebp), 4 (esi)
instrument_test: op1 and op2 of are registers 4(esi), 5(ebp)
17 EFLAGS eflags, 1, 0
instrument_test: op1 is mem and op2 is imm
LEA: base reg is 5(ebp) index reg invalid, dst 10(eax)
instrument_test: op1 and op2 of are registers 10(eax), 4(esi)
17 EFLAGS eflags, 1, 0
instrument_addorsub: arith ins is SUB (0xb7eadc08)
instrument_addorsub: op1 is reg (10) and op2 is immediate
instrument_test: op1 is mem and op2 is imm
instrument_test: op1 and op2 of are registers 10(eax), 4(esi)
17 EFLAGS eflags, 1, 0
instrument_test: op1 is mem and op2 is register
instrument_taint_regmem2flag: flags 63, reg 9 size 4, memsize 4
instrument mov is mem read: reg: 9 (ecx), size of mem read is 4
instrument_addorsub: arith ins is XOR (0xb7eadb2b)
instrument_addorsub: op1 and op2 of Arith are registers: 10 (eax), 10 (eax)
handling reg reset
instrument_test: op1 is reg and op2 is imm
[movx] 0xb7eadb38 movzx ecx, byte ptr [esi+eax*1]
instrument_addorsub: arith ins is ADD (0xb7eadb3f)
instrument_addorsub: op1 is reg (10) and op2 is immediate
instrument_test: op1 and op2 of are registers 10(eax), 5(ebp)
17 EFLAGS eflags, 1, 0
instrument_addorsub: arith ins is ADD (0xb7eadb46)
instrument_addorsub: op1 and op2 of Arith are registers: 8 (edx), 5 (ebp)
instrument_addorsub: arith ins is ADD (0xb7eadb48)
instrument_addorsub: op1 and op2 of Arith are registers: 4 (esi), 5 (ebp)
instrument_addorsub: arith ins is SUB (0xb7eadb51)
instrument_addorsub: op1 and op2 of Arith are registers: 10 (eax), 5 (ebp)
instrument_addorsub: arith ins is ADD (0xb7eadb59)
instrument_addorsub: op1 and op2 of Arith are registers: 10 (eax), 5 (ebp)
instrument_test: op1 and op2 of are registers 10(eax), 10(eax)
17 EFLAGS eflags, 1, 0
[movx] 0xb7eadb38 movzx ecx, byte ptr [esi+eax*1]
instrument_addorsub: arith ins is ADD (0xb7eadb3f)
instrument_addorsub: op1 is reg (10) and op2 is immediate
instrument_test: op1 and op2 of are registers 10(eax), 5(ebp)
17 EFLAGS eflags, 1, 0
instrument_addorsub: arith ins is ADD (0xb7eadb46)
instrument_addorsub: op1 and op2 of Arith are registers: 8 (edx), 5 (ebp)
instrument_addorsub: arith ins is ADD (0xb7eadb48)
instrument_addorsub: op1 and op2 of Arith are registers: 4 (esi), 5 (ebp)
instrument_addorsub: arith ins is SUB (0xb7eadb51)
instrument_addorsub: op1 and op2 of Arith are registers: 10 (eax), 5 (ebp)
instrument_addorsub: arith ins is ADD (0xb7eadb59)
instrument_addorsub: op1 and op2 of Arith are registers: 10 (eax), 5 (ebp)
instrument_test: op1 and op2 of are registers 10(eax), 10(eax)
17 EFLAGS eflags, 1, 0
instrument_addorsub: arith ins is SUB (0xb7eadb63)
instrument_addorsub: op1 and op2 of Arith are registers: 10 (eax), 5 (ebp)
instrument_addorsub: arith ins is ADD (0xb7eadb65)
instrument_addorsub: op1 is reg (6) and op2 is immediate
instrument_test: op1 and op2 of are registers 3(edi), 10(eax)
17 EFLAGS eflags, 1, 0
instrument_addorsub: arith ins is SUB (0xb7e83c99)
instrument_addorsub: op1 is register and op2 is mem
instrument_test: op1 and op2 of are registers 3(edi), 10(eax)
17 EFLAGS eflags, 1, 0
instrument_addorsub: arith ins is ADD (0xb7e83ca7)
instrument_addorsub: op1 is mem and op2 is register
instrument_test: op1 is mem and op2 is imm
instrument_addorsub: arith ins is ADD (0xb7e83931)
instrument_addorsub: op1 is reg (9) and op2 is immediate
instrument_test: op1 is mem and op2 is imm
[movx] 0xb7e83959 movsx eax, byte ptr [esi+0x46]
instrument_addorsub: arith ins is SUB (0xb7e8395d)
instrument_addorsub: op1 and op2 of Arith are registers: 8 (edx), 9 (ecx)
instrument_addorsub: arith ins is SUB (0xb7eadc68)
instrument_addorsub: op1 and op2 of Arith are registers: 10 (eax), 4 (esi)
LEA: base reg is 10(eax) index reg invalid, dst 9(ecx)
instrument_test: op1 and op2 of are registers 9(ecx), 9(ecx)
17 EFLAGS eflags, 1, 0
instrument_test: op1 is mem and op2 is register
instrument_taint_regmem2flag: flags 63, reg 9 size 4, memsize 4
instrument mov is mem read: reg: 9 (ecx), size of mem read is 4
instrument_addorsub: arith ins is XOR (0xb7eadb2b)
instrument_addorsub: op1 and op2 of Arith are registers: 10 (eax), 10 (eax)
handling reg reset
instrument_test: op1 is reg and op2 is imm
[movx] 0xb7eadb38 movzx ecx, byte ptr [esi+eax*1]
instrument_addorsub: arith ins is ADD (0xb7eadb3f)
instrument_addorsub: op1 is reg (10) and op2 is immediate
instrument_test: op1 and op2 of are registers 10(eax), 5(ebp)
17 EFLAGS eflags, 1, 0
[movx] 0xb7eadb86 movsx eax, byte ptr [edi+0x46]
instrument_addorsub: arith ins is SUB (0xb7eac5f8)
instrument_addorsub: op1 is reg (6) and op2 is immediate
instrument_addorsub: arith ins is ADD (0xb7eac600)
instrument_addorsub: op1 is reg (7) and op2 is immediate
instrument_test: op1 is mem and op2 is imm
LEA: base reg is 10(eax) index reg invalid, dst 3(edi)
[movx] 0xb7eac622 movsx eax, byte ptr [esi+0x46]
LEA: base reg is 4(esi) index reg invalid, dst 3(edi)
instrument_test: op1 and op2 of are registers 10(eax), 8(edx)
17 EFLAGS eflags, 1, 0
[movx] 0xb7eac688 movsx ecx, byte ptr [esi+0x46]
instrument_addorsub: arith ins is SUB (0xb7eac68c)
instrument_addorsub: op1 and op2 of Arith are registers: 8 (edx), 10 (eax)
[movx] 0xb7eac622 movsx eax, byte ptr [esi+0x46]
instrument_addorsub: arith ins is SUB (0xb7ead553)
instrument_addorsub: op1 is reg (6) and op2 is immediate
instrument_test: op1 and op2 of are registers 10(eax), 10(eax)
17 EFLAGS eflags, 1, 0
instrument_test: op1 is mem and op2 is imm
instrument_test: op1 is mem and op2 is imm
instrument_test: op1 is reg and op2 is imm
instrument_test: op1 and op2 of are registers 10(eax), 10(eax)
17 EFLAGS eflags, 1, 0
instrument_addorsub: arith ins is OR (0xb7ead599)
instrument_addorsub: op1 is mem and op2 is immediate
instrument_addorsub: arith ins is SUB (0xb7ead59d)
instrument_addorsub: op1 and op2 of Arith are registers: 10 (eax), 4 (esi)
instrument_test: op1 and op2 of are registers 9(ecx), 9(ecx)
17 EFLAGS eflags, 1, 0
instrument_addorsub: arith ins is ADD (0xb7ead5b0)
instrument_addorsub: op1 and op2 of Arith are registers: 4 (esi), 8 (edx)
instrument_addorsub: arith ins is ADC (0xb7ead5b2)
instrument_addorsub: op1 and op2 of Arith are registers: 3 (edi), 9 (ecx)
instrument_addorsub: arith ins is ADD (0xb7ead5ba)
instrument_addorsub: op1 is reg (6) and op2 is immediate
instrument_addorsub: arith ins is SUB (0xb7ead570)
instrument_addorsub: op1 and op2 of Arith are registers: 4 (esi), 10 (eax)
instrument_addorsub: arith ins is ADD (0xb7ead572)
instrument_addorsub: op1 and op2 of Arith are registers: 3 (edi), 10 (eax)
instrument_test: op1 and op2 of are registers 4(esi), 4(esi)
17 EFLAGS eflags, 1, 0
instrument_test: op1 is mem and op2 is imm
instrument_addorsub: arith ins is SUB (0xb7ead5cc)
instrument_addorsub: op1 and op2 of Arith are registers: 10 (eax), 4 (esi)
instrument_test: op1 and op2 of are registers 9(ecx), 9(ecx)
17 EFLAGS eflags, 1, 0
instrument_addorsub: arith ins is ADD (0xb7ead5b0)
instrument_addorsub: op1 and op2 of Arith are registers: 4 (esi), 8 (edx)
instrument_addorsub: arith ins is ADC (0xb7ead5b2)
instrument_addorsub: op1 and op2 of Arith are registers: 3 (edi), 9 (ecx)
instrument_addorsub: arith ins is ADD (0xb7ead5ba)
instrument_addorsub: op1 is reg (6) and op2 is immediate
instrument_addorsub: arith ins is ADD (0xb7ead5ba)
instrument_addorsub: op1 is reg (6) and op2 is immediate
[movx] 0xb7eac63d movzx eax, word ptr [esi+0x44]
instrument_test: op1 and op2 of are registers 21(ax), 21(ax)
17 EFLAGS eflags, 1, 0
instrument_test: op1 and op2 of are registers 10(eax), 10(eax)
17 EFLAGS eflags, 1, 0
instrument_addorsub: arith ins is ADD (0xb7eac66f)
instrument_addorsub: op1 is reg (6) and op2 is immediate
instrument_test: op1 is mem and op2 is imm
instrument_addorsub: arith ins is ADD (0xb7eac66f)
instrument_addorsub: op1 is reg (6) and op2 is immediate
instrument_test: op1 and op2 of are registers 4(esi), 10(eax)
17 EFLAGS eflags, 1, 0
[movx] 0xb7eadec3 movzx eax, al
instrument movx address 0xb7eadec3 is src reg: 19 into dst reg: 10
instrument_addorsub: arith ins is ADD (0xb7eadec8)
instrument_addorsub: op1 is reg (6) and op2 is immediate
instrument_test: op1 and op2 of are registers 8(edx), 10(eax)
17 EFLAGS eflags, 1, 0
instrument_addorsub: arith ins is SUB (0xb7e8398d)
instrument_addorsub: op1 is register and op2 is mem
instrument_test: op1 and op2 of are registers 8(edx), 10(eax)
17 EFLAGS eflags, 1, 0
instrument_addorsub: arith ins is ADD (0xb7e8399b)
instrument_addorsub: op1 is mem and op2 is register
instrument_test: op1 is mem and op2 is imm
instrument_test: op1 is mem and op2 is imm
instrument_addorsub: arith ins is SUB (0xb7e822ba)
instrument_addorsub: op1 is mem and op2 is immediate
instrument_test: op1 and op2 of are registers 8(edx), 8(edx)
17 EFLAGS eflags, 1, 0
instrument_test: op1 is mem and op2 is imm
instrument_addorsub: arith ins is SUB (0xb7e82489)
instrument_addorsub: op1 is mem and op2 is immediate
instrument_test: op1 and op2 of are registers 8(edx), 8(edx)
17 EFLAGS eflags, 1, 0
instrument_addorsub: arith ins is SUB (0xb7e8248a)
instrument_addorsub: op1 is mem and op2 is immediate
instrument_test: op1 and op2 of are registers 8(edx), 8(edx)
17 EFLAGS eflags, 1, 0
LEA: base reg is 5(ebp) index reg invalid, dst 8(edx)
instrument_addorsub: arith ins is XOR (0xb7e824b8)
instrument_addorsub: op1 is register and op2 is mem
LEA: base reg is 5(ebp) index reg invalid, dst 6(esp)
instrument_addorsub: arith ins is ADD (0xb7e8b8ef)
instrument_addorsub: op1 is reg (6) and op2 is immediate
instrument_test: op1 is reg and op2 is imm
instrument_test: op1 is reg and op2 is imm
instrument_test: op1 and op2 of are registers 9(ecx), 9(ecx)
17 EFLAGS eflags, 1, 0
instrument_test: op1 is mem and op2 is imm
instrument_test: op1 is mem and op2 is imm
instrument_test: op1 and op2 of are registers 10(eax), 10(eax)
17 EFLAGS eflags, 1, 0
instrument_test: op1 is mem and op2 is register
instrument_taint_regmem2flag: flags 63, reg 3 size 4, memsize 4
instrument_test: op1 and op2 of are registers 3(edi), 10(eax)
17 EFLAGS eflags, 1, 0
instrument_test: op1 is mem and op2 is imm
instrument_addorsub: arith ins is SUB (0xb7e822ba)
instrument_addorsub: op1 is mem and op2 is immediate
instrument_test: op1 and op2 of are registers 22(cl), 22(cl)
17 EFLAGS eflags, 1, 0
instrument_test: op1 and op2 of are registers 22(cl), 25(dl)
17 EFLAGS eflags, 1, 0
instrument_test: op1 and op2 of are registers 23(ch), 23(ch)
17 EFLAGS eflags, 1, 0
instrument_addorsub: arith ins is SUB (0xb7ea4274)
instrument_addorsub: op1 is reg (6) and op2 is immediate
instrument_addorsub: arith ins is ADD (0xb7ea427c)
instrument_addorsub: op1 is reg (7) and op2 is immediate
instrument_addorsub: arith ins is AND (0xb7eb91c9)
instrument_addorsub: op1 and op2 of Arith are registers: 8 (edx), 10 (eax)
instrument_test: op1 is mem and op2 is register
instrument_taint_regmem2flag: flags 63, reg 26 size 1, memsize 1
instrument_test: op1 is mem and op2 is register
instrument_taint_regmem2flag: flags 63, reg 26 size 1, memsize 1
instrument_addorsub: arith ins is XOR (0xb7eb91e1)
instrument_addorsub: op1 is reg (8) and op2 is immediate
instrument_test: op1 is mem and op2 is register
instrument_taint_regmem2flag: flags 63, reg 26 size 1, memsize 1
instrument_addorsub: arith ins is XOR (0xb7eb91ef)
instrument_addorsub: op1 and op2 of Arith are registers: 8 (edx), 8 (edx)
handling reg reset
instrument_addorsub: arith ins is ADD (0xb7eb91f3)
instrument_addorsub: op1 is reg (10) and op2 is immediate
instrument_addorsub: arith ins is SUB (0xb7eb91f6)
instrument_addorsub: op1 and op2 of Arith are registers: 8 (edx), 9 (ecx)
instrument_addorsub: arith ins is ADD (0xb7eb91f8)
instrument_addorsub: op1 is reg (9) and op2 is immediate
instrument_addorsub: arith ins is XOR (0xb7eb9201)
instrument_addorsub: op1 and op2 of Arith are registers: 8 (edx), 9 (ecx)
instrument_addorsub: arith ins is AND (0xb7eb9203)
instrument_addorsub: op1 is reg (8) and op2 is immediate
instrument_addorsub: arith ins is ADD (0xb7eb920d)
instrument_addorsub: op1 is reg (10) and op2 is immediate
instrument_addorsub: arith ins is SUB (0xb7eb9210)
instrument_addorsub: op1 and op2 of Arith are registers: 8 (edx), 9 (ecx)
instrument_addorsub: arith ins is ADD (0xb7eb9212)
instrument_addorsub: op1 is reg (9) and op2 is immediate
instrument_addorsub: arith ins is XOR (0xb7eb921b)
instrument_addorsub: op1 and op2 of Arith are registers: 8 (edx), 9 (ecx)
instrument_addorsub: arith ins is AND (0xb7eb921d)
instrument_addorsub: op1 is reg (8) and op2 is immediate
instrument_addorsub: arith ins is ADD (0xb7eb9227)
instrument_addorsub: op1 is reg (10) and op2 is immediate
instrument_addorsub: arith ins is SUB (0xb7eb922a)
instrument_addorsub: op1 and op2 of Arith are registers: 8 (edx), 9 (ecx)
instrument_addorsub: arith ins is ADD (0xb7eb922c)
instrument_addorsub: op1 is reg (9) and op2 is immediate
instrument_addorsub: arith ins is XOR (0xb7eb9235)
instrument_addorsub: op1 and op2 of Arith are registers: 8 (edx), 9 (ecx)
instrument_addorsub: arith ins is AND (0xb7eb9237)
instrument_addorsub: op1 is reg (8) and op2 is immediate
instrument_addorsub: arith ins is SUB (0xb7eb9259)
instrument_addorsub: op1 is reg (10) and op2 is immediate
instrument_addorsub: arith ins is SUB (0xb7eb925c)
instrument_addorsub: op1 is reg (9) and op2 is immediate
instrument_test: op1 is reg and op2 is imm
instrument_test: op1 and op2 of are registers 23(ch), 23(ch)
17 EFLAGS eflags, 1, 0
instrument_test: op1 is reg and op2 is imm
instrument_addorsub: arith ins is SUB (0xb7eb9276)
instrument_addorsub: op1 is register and op2 is mem
instrument_addorsub: arith ins is AND (0xb7ea429a)
instrument_addorsub: op1 is reg (10) and op2 is immediate
instrument_test: op1 is mem and op2 is register
instrument_taint_regmem2flag: flags 63, reg 9 size 4, memsize 4
instrument_test: op1 is mem and op2 is imm
instrument_addorsub: arith ins is ADD (0xb7ea42de)
instrument_addorsub: op1 is mem and op2 is immediate
[movx] 0xb7ea42e2 movsx eax, byte ptr [edx+0x46]
instrument_test: op1 and op2 of are registers 19(al), 19(al)
17 EFLAGS eflags, 1, 0
instrument_test: op1 and op2 of are registers 10(eax), 10(eax)
17 EFLAGS eflags, 1, 0
instrument_test: op1 and op2 of are registers 10(eax), 10(eax)
17 EFLAGS eflags, 1, 0
instrument_test: op1 is reg and op2 is imm
[movx] 0xb7ea4312 movsx eax, byte ptr [edx+0x46]
instrument_test: op1 and op2 of are registers 4(esi), 10(eax)
17 EFLAGS eflags, 1, 0
instrument_test: op1 is mem and op2 is register
instrument_taint_regmem2flag: flags 63, reg 8 size 4, memsize 4
LEA: base reg is 8(edx) index reg invalid, dst 9(ecx)
instrument_addorsub: arith ins is ADD (0xb7ea434e)
instrument_addorsub: op1 is reg (4) and op2 is immediate
instrument_test: op1 is mem and op2 is imm
instrument_addorsub: arith ins is SUB (0xb7eaf0d2)
instrument_addorsub: op1 is reg (6) and op2 is immediate
instrument_addorsub: arith ins is ADD (0xb7eaf0de)
instrument_addorsub: op1 is reg (7) and op2 is immediate
instrument_test: op1 and op2 of are registers 8(edx), 8(edx)
17 EFLAGS eflags, 1, 0
instrument_test: op1 and op2 of are registers 10(eax), 10(eax)
17 EFLAGS eflags, 1, 0
[movx] 0xb7eaf0fc movsx eax, byte ptr [esi+0x46]
[movx] 0xb7eaf0fc movsx eax, byte ptr [esi+0x46]
instrument_addorsub: arith ins is SUB (0xb7eae715)
instrument_addorsub: op1 and op2 of Arith are registers: 10 (eax), 8 (edx)
instrument_test: op1 is reg and op2 is imm
[movx] 0xb7eae696 movzx eax, al
instrument movx address 0xb7eae696 is src reg: 19 into dst reg: 10
instrument_addorsub: arith ins is ADD (0xb7eae699)
instrument_addorsub: op1 is reg (6) and op2 is immediate
instrument_addorsub: arith ins is ADD (0xb7eaf115)
instrument_addorsub: op1 is reg (6) and op2 is immediate
instrument_addorsub: arith ins is ADD (0xb7ea43ac)
instrument_addorsub: op1 is reg (10) and op2 is immediate
LEA: base reg is 4(esi) index reg invalid, dst 4(esi)
instrument_addorsub: arith ins is ADD (0xb7ea434e)
instrument_addorsub: op1 is reg (4) and op2 is immediate
instrument_test: op1 is mem and op2 is imm
instrument_addorsub: arith ins is SUB (0xb7ea4364)
instrument_addorsub: op1 is mem and op2 is immediate
instrument_test: op1 is mem and op2 is imm
instrument_addorsub: arith ins is SUB (0xb7ea437c)
instrument_addorsub: op1 is mem and op2 is immediate
instrument_addorsub: arith ins is ADD (0xb7ea4385)
instrument_addorsub: op1 is reg (6) and op2 is immediate
instrument_addorsub: arith ins is ADD (0xb7e75536)
instrument_addorsub: op1 is reg (7) and op2 is immediate
instrument_addorsub: arith ins is SUB (0xb7e7553c)
instrument_addorsub: op1 is reg (6) and op2 is immediate
LEA: base reg is 7(ebx) index reg invalid, dst 10(eax)
instrument_addorsub: arith ins is SUB (0xb7e75434)
instrument_addorsub: op1 is reg (6) and op2 is immediate
instrument_addorsub: arith ins is ADD (0xb7e7543c)
instrument_addorsub: op1 is reg (7) and op2 is immediate
instrument_test: op1 and op2 of are registers 5(ebp), 5(ebp)
17 EFLAGS eflags, 1, 0
instrument_test: op1 and op2 of are registers 10(eax), 10(eax)
17 EFLAGS eflags, 1, 0
instrument_addorsub: arith ins is SUB (0xb7e7546a)
instrument_addorsub: op1 is reg (10) and op2 is immediate
instrument_test: op1 is reg and op2 is imm
instrument_test: op1 is reg and op2 is imm
instrument_test: op1 is reg and op2 is imm
instrument_addorsub: arith ins is SUB (0xb7e75483)
instrument_addorsub: op1 is reg (8) and op2 is immediate
instrument_test: op1 and op2 of are registers 10(eax), 10(eax)
17 EFLAGS eflags, 1, 0
instrument_addorsub: arith ins is XOR (0xb7e754ed)
instrument_addorsub: op1 is register and op2 is mem
instrument_addorsub: arith ins is ADD (0xb7fed8ab)
instrument_addorsub: op1 is reg (7) and op2 is immediate
instrument_addorsub: arith ins is SUB (0xb7fed8b7)
instrument_addorsub: op1 is reg (6) and op2 is immediate
LEA: base reg is 7(ebx) index reg invalid, dst 10(eax)
instrument_addorsub: arith ins is SUB (0xb7fed8e4)
instrument_addorsub: op1 is reg (10) and op2 is immediate
imul instruction: imul eax, eax, 0x4c
num operands is 4
LEA: base reg is 7(ebx) index reg invalid, dst 10(eax)
LEA: base reg is 7(ebx) index reg invalid, dst 10(eax)
instrument_test: op1 and op2 of are registers 8(edx), 8(edx)
17 EFLAGS eflags, 1, 0
[movx] 0xb7fed958 movzx ecx, byte ptr [eax+0x195]
instrument_addorsub: arith ins is AND (0xb7fed962)
instrument_addorsub: op1 is reg (9) and op2 is immediate
instrument_test: op1 is mem and op2 is register
instrument_taint_regmem2flag: flags 63, reg 9 size 4, memsize 4
LEA: index reg is 8(edx) base reg invalid, dst 9(ecx)
instrument_test: op1 and op2 of are registers 3(edi), 3(edi)
17 EFLAGS eflags, 1, 0
instrument_test: op1 is mem and op2 is register
instrument_taint_regmem2flag: flags 63, reg 9 size 4, memsize 4
instrument_test: op1 and op2 of are registers 4(esi), 4(esi)
17 EFLAGS eflags, 1, 0
LEA: base reg is 9(ecx) index reg invalid, dst 4(esi)
instrument_addorsub: arith ins is AND (0xb7fed98d)
instrument_addorsub: op1 is reg (4) and op2 is immediate
instrument_addorsub: arith ins is SUB (0xb7fed990)
instrument_addorsub: op1 and op2 of Arith are registers: 6 (esp), 4 (esi)
LEA: base reg is 6(esp) index reg invalid, dst 3(edi)
instrument_addorsub: arith ins is AND (0xb7fed999)
instrument_addorsub: op1 is mem and op2 is immediate
instrument_addorsub: arith ins is XOR (0xb7fed9a0)
instrument_addorsub: op1 and op2 of Arith are registers: 9 (ecx), 9 (ecx)
handling reg reset
instrument_test: op1 is mem and op2 is register
instrument_taint_regmem2flag: flags 63, reg 10 size 4, memsize 4
instrument_test: op1 and op2 of are registers 8(edx), 9(ecx)
17 EFLAGS eflags, 1, 0
instrument_addorsub: arith ins is ADD (0xb7fed9c5)
instrument_addorsub: op1 is reg (9) and op2 is immediate
instrument_addorsub: arith ins is ADD (0xb7fed9c8)
instrument_addorsub: op1 is mem and op2 is immediate
instrument_test: op1 and op2 of are registers 10(eax), 10(eax)
17 EFLAGS eflags, 1, 0
instrument_test: op1 and op2 of are registers 9(ecx), 8(edx)
17 EFLAGS eflags, 1, 0
instrument_addorsub: arith ins is XOR (0xb7fed9e4)
instrument_addorsub: op1 and op2 of Arith are registers: 9 (ecx), 9 (ecx)
handling reg reset
instrument_addorsub: arith ins is SUB (0xb7fed668)
instrument_addorsub: op1 is reg (6) and op2 is immediate
instrument_addorsub: arith ins is ADD (0xb7fed670)
instrument_addorsub: op1 is reg (7) and op2 is immediate
instrument_test: op1 is reg and op2 is imm
instrument_addorsub: arith ins is XOR (0xb7fed68e)
instrument_addorsub: op1 and op2 of Arith are registers: 9 (ecx), 9 (ecx)
handling reg reset
instrument_test: op1 and op2 of are registers 10(eax), 10(eax)
17 EFLAGS eflags, 1, 0
LEA: base reg is 8(edx) index reg invalid, dst 10(eax)
instrument_addorsub: arith ins is AND (0xb7fed698)
instrument_addorsub: op1 is reg (10) and op2 is immediate
instrument_addorsub: arith ins is SUB (0xb7fed69b)
instrument_addorsub: op1 and op2 of Arith are registers: 6 (esp), 10 (eax)
LEA: base reg is 6(esp) index reg invalid, dst 4(esi)
LEA: base reg is 9(ecx) index reg invalid, dst 10(eax)
LEA: base reg is 3(edi) index reg invalid, dst 10(eax)
[movx] 0xb7fed716 movzx eax, byte ptr [ecx+edi*1]
instrument_addorsub: arith ins is ADD (0xb7fed71d)
instrument_addorsub: op1 is reg (10) and op2 is immediate
LEA: index reg is 3(edi) base reg invalid, dst 10(eax)
instrument_addorsub: arith ins is ADD (0xb7fed735)
instrument_addorsub: op1 and op2 of Arith are registers: 10 (eax), 9 (ecx)
instrument_test: op1 and op2 of are registers 4(esi), 10(eax)
17 EFLAGS eflags, 1, 0
instrument_test: op1 is mem and op2 is imm
instrument_test: op1 and op2 of are registers 3(edi), 10(eax)
17 EFLAGS eflags, 1, 0
LEA: base reg is 4(esi) index reg invalid, dst 4(esi)
instrument_test: op1 and op2 of are registers 10(eax), 10(eax)
17 EFLAGS eflags, 1, 0
instrument_test: op1 and op2 of are registers 10(eax), 10(eax)
17 EFLAGS eflags, 1, 0
instrument_addorsub: arith ins is SUB (0xb7fed78b)
instrument_addorsub: op1 is mem and op2 is immediate
instrument_addorsub: arith ins is SUB (0xb7fed78f)
instrument_addorsub: op1 is reg (3) and op2 is immediate
instrument_test: op1 is mem and op2 is register
instrument_taint_regmem2flag: flags 63, reg 10 size 4, memsize 4
instrument_test: op1 is mem and op2 is register
instrument_taint_regmem2flag: flags 63, reg 10 size 4, memsize 4
instrument_test: op1 and op2 of are registers 10(eax), 10(eax)
17 EFLAGS eflags, 1, 0
instrument_test: op1 and op2 of are registers 8(edx), 8(edx)
17 EFLAGS eflags, 1, 0
instrument_test: op1 and op2 of are registers 10(eax), 10(eax)
17 EFLAGS eflags, 1, 0
instrument_addorsub: arith ins is SUB (0xb7fed78b)
instrument_addorsub: op1 is mem and op2 is immediate
instrument_addorsub: arith ins is SUB (0xb7fed78f)
instrument_addorsub: op1 is reg (3) and op2 is immediate
instrument_test: op1 is mem and op2 is register
instrument_taint_regmem2flag: flags 63, reg 10 size 4, memsize 4
instrument_addorsub: arith ins is ADD (0xb7fed770)
instrument_addorsub: op1 is reg (10) and op2 is immediate
instrument_test: op1 and op2 of are registers 4(esi), 8(edx)
17 EFLAGS eflags, 1, 0
instrument_test: op1 and op2 of are registers 8(edx), 8(edx)
17 EFLAGS eflags, 1, 0
instrument_test: op1 and op2 of are registers 10(eax), 10(eax)
17 EFLAGS eflags, 1, 0
instrument_addorsub: arith ins is SUB (0xb7fed78b)
instrument_addorsub: op1 is mem and op2 is immediate
instrument_addorsub: arith ins is SUB (0xb7fed78f)
instrument_addorsub: op1 is reg (3) and op2 is immediate
instrument_test: op1 is mem and op2 is register
instrument_taint_regmem2flag: flags 63, reg 10 size 4, memsize 4
instrument_test: op1 is mem and op2 is register
instrument_taint_regmem2flag: flags 63, reg 10 size 4, memsize 4
LEA: base reg is 5(ebp) index reg invalid, dst 6(esp)
instrument_addorsub: arith ins is SUB (0xb7fed6f8)
instrument_addorsub: op1 and op2 of Arith are registers: 8 (edx), 3 (edi)
instrument_addorsub: arith ins is ADD (0xb7fed6fa)
instrument_addorsub: op1 and op2 of Arith are registers: 10 (eax), 3 (edi)
instrument_addorsub: arith ins is ADD (0xb7fed70a)
instrument_addorsub: op1 is reg (10) and op2 is immediate
[movx] 0xb7fed716 movzx eax, byte ptr [ecx+edi*1]
instrument_addorsub: arith ins is ADD (0xb7fed71d)
instrument_addorsub: op1 is reg (10) and op2 is immediate
LEA: index reg is 3(edi) base reg invalid, dst 10(eax)
instrument_addorsub: arith ins is ADD (0xb7fed735)
instrument_addorsub: op1 and op2 of Arith are registers: 10 (eax), 9 (ecx)
instrument_test: op1 and op2 of are registers 4(esi), 10(eax)
17 EFLAGS eflags, 1, 0
instrument_test: op1 is mem and op2 is imm
instrument_test: op1 and op2 of are registers 3(edi), 10(eax)
17 EFLAGS eflags, 1, 0
instrument_addorsub: arith ins is XOR (0xb7ff6912)
instrument_addorsub: op1 is reg (8) and op2 is immediate
instrument_addorsub: arith ins is AND (0xb7ff691e)
instrument_addorsub: op1 is reg (8) and op2 is immediate
imul instruction: imul eax, eax, 0x1010101
num operands is 4
instrument_test: op1 is mem and op2 is register
instrument_taint_regmem2flag: flags 63, reg 10 size 4, memsize 4
instrument_addorsub: arith ins is SUB (0xb7fed6f8)
instrument_addorsub: op1 and op2 of Arith are registers: 8 (edx), 3 (edi)
instrument_addorsub: arith ins is ADD (0xb7fed6fa)
instrument_addorsub: op1 and op2 of Arith are registers: 10 (eax), 3 (edi)
LEA: base reg is 5(ebp) index reg invalid, dst 6(esp)
instrument_addorsub: arith ins is SUB (0xb7fed9f9)
instrument_addorsub: op1 is reg (6) and op2 is immediate
instrument_test: op1 and op2 of are registers 3(edi), 3(edi)
17 EFLAGS eflags, 1, 0
LEA: base reg is 4(esi) index reg invalid, dst 4(esi)
[movx] 0xb7feda21 movzx eax, byte ptr [esi+0x194]
instrument_test: op1 is reg and op2 is imm
instrument_addorsub: arith ins is AND (0xb7feda30)
instrument_addorsub: op1 is reg (10) and op2 is immediate
instrument_test: op1 and op2 of are registers 10(eax), 10(eax)
17 EFLAGS eflags, 1, 0
instrument_test: op1 is mem and op2 is imm
instrument_test: op1 and op2 of are registers 10(eax), 10(eax)
17 EFLAGS eflags, 1, 0
instrument_addorsub: arith ins is ADD (0xb7feda5f)
instrument_addorsub: op1 and op2 of Arith are registers: 9 (ecx), 10 (eax)
instrument_test: op1 and op2 of are registers 10(eax), 10(eax)
17 EFLAGS eflags, 1, 0
instrument_test: op1 is mem and op2 is imm
instrument_addorsub: arith ins is SUB (0x804845c)
instrument_addorsub: op1 is reg (6) and op2 is immediate
instrument_addorsub: arith ins is SUB (0x80483e5)
instrument_addorsub: op1 is reg (10) and op2 is immediate
instrument_test: op1 is reg and op2 is imm
instrument_addorsub: arith ins is SUB (0xb7feda7c)
instrument_addorsub: op1 is reg (4) and op2 is immediate
instrument_test: op1 and op2 of are registers 10(eax), 10(eax)
17 EFLAGS eflags, 1, 0
instrument_addorsub: arith ins is ADD (0xb7feda8e)
instrument_addorsub: op1 is register and op2 is mem
instrument_addorsub: arith ins is SUB (0x8048589)
instrument_addorsub: op1 is reg (6) and op2 is immediate
instrument_addorsub: arith ins is ADD (0x8048592)
instrument_addorsub: op1 is reg (7) and op2 is immediate
instrument_addorsub: arith ins is ADD (0x8048598)
instrument_addorsub: op1 is reg (6) and op2 is immediate
instrument_test: op1 and op2 of are registers 10(eax), 10(eax)
17 EFLAGS eflags, 1, 0
instrument_test: op1 and op2 of are registers 10(eax), 10(eax)
17 EFLAGS eflags, 1, 0
instrument_addorsub: arith ins is ADD (0xb7fedaad)
instrument_addorsub: op1 is mem and op2 is immediate
instrument_addorsub: arith ins is SUB (0xb7fedab4)
instrument_addorsub: op1 is mem and op2 is immediate
instrument_test: op1 is mem and op2 is register
instrument_taint_regmem2flag: flags 63, reg 10 size 4, memsize 4
[movx] 0xb7feda21 movzx eax, byte ptr [esi+0x194]
instrument_test: op1 is reg and op2 is imm
instrument_addorsub: arith ins is AND (0xb7feda30)
instrument_addorsub: op1 is reg (10) and op2 is immediate
instrument_test: op1 and op2 of are registers 10(eax), 10(eax)
17 EFLAGS eflags, 1, 0
instrument_test: op1 is mem and op2 is imm
instrument_addorsub: arith ins is ADD (0xb7fedaad)
instrument_addorsub: op1 is mem and op2 is immediate
instrument_addorsub: arith ins is SUB (0xb7fedab4)
instrument_addorsub: op1 is mem and op2 is immediate
instrument_test: op1 is mem and op2 is register
instrument_taint_regmem2flag: flags 63, reg 10 size 4, memsize 4
instrument_addorsub: arith ins is SUB (0xb7fedac4)
instrument_addorsub: op1 is mem and op2 is immediate
instrument_addorsub: arith ins is SUB (0xb7fedac8)
instrument_addorsub: op1 is mem and op2 is immediate
instrument_test: op1 and op2 of are registers 9(ecx), 9(ecx)
17 EFLAGS eflags, 1, 0
instrument_test: op1 and op2 of are registers 8(edx), 8(edx)
17 EFLAGS eflags, 1, 0
instrument_test: op1 is mem and op2 is imm
instrument_test: op1 is mem and op2 is imm
instrument_test: op1 and op2 of are registers 10(eax), 10(eax)
17 EFLAGS eflags, 1, 0
instrument_test: op1 and op2 of are registers 10(eax), 10(eax)
17 EFLAGS eflags, 1, 0
instrument_addorsub: arith ins is ADD (0xb7fedaad)
instrument_addorsub: op1 is mem and op2 is immediate
instrument_addorsub: arith ins is SUB (0xb7fedab4)
instrument_addorsub: op1 is mem and op2 is immediate
instrument_test: op1 is mem and op2 is register
instrument_taint_regmem2flag: flags 63, reg 10 size 4, memsize 4
instrument_addorsub: arith ins is SUB (0xb7fedac4)
instrument_addorsub: op1 is mem and op2 is immediate
instrument_addorsub: arith ins is SUB (0xb7fedac8)
instrument_addorsub: op1 is mem and op2 is immediate
instrument_test: op1 and op2 of are registers 9(ecx), 9(ecx)
17 EFLAGS eflags, 1, 0
instrument_test: op1 and op2 of are registers 8(edx), 8(edx)
17 EFLAGS eflags, 1, 0
instrument_test: op1 is mem and op2 is imm
LEA: base reg is 5(ebp) index reg invalid, dst 6(esp)
instrument_test: op1 and op2 of are registers 10(eax), 10(eax)
17 EFLAGS eflags, 1, 0
instrument_addorsub: arith ins is SUB (0xb7e7546a)
instrument_addorsub: op1 is reg (10) and op2 is immediate
instrument_test: op1 is reg and op2 is imm
instrument_test: op1 is reg and op2 is imm
instrument_test: op1 and op2 of are registers 10(eax), 10(eax)
17 EFLAGS eflags, 1, 0
instrument_test: op1 is mem and op2 is imm
LEA: base reg is 7(ebx) index reg invalid, dst 3(edi)
LEA: base reg is 7(ebx) index reg invalid, dst 5(ebp)
instrument_test: op1 and op2 of are registers 3(edi), 5(ebp)
17 EFLAGS eflags, 1, 0
instrument_addorsub: arith ins is ADD (0xb7eafdb9)
instrument_addorsub: op1 is reg (7) and op2 is immediate
instrument_addorsub: arith ins is SUB (0xb7eafdbf)
instrument_addorsub: op1 is reg (6) and op2 is immediate
instrument_addorsub: arith ins is SUB (0xb7eafb54)
instrument_addorsub: op1 is reg (6) and op2 is immediate
instrument_addorsub: arith ins is ADD (0xb7eafb60)
instrument_addorsub: op1 is reg (7) and op2 is immediate
instrument_test: op1 and op2 of are registers 3(edi), 3(edi)
17 EFLAGS eflags, 1, 0
instrument_test: op1 and op2 of are registers 10(eax), 10(eax)
17 EFLAGS eflags, 1, 0
LEA: base reg is 7(ebx) index reg invalid, dst 10(eax)
instrument_test: op1 is mem and op2 is register
instrument_taint_regmem2flag: flags 63, reg 8 size 4, memsize 4
instrument_test: op1 and op2 of are registers 4(esi), 4(esi)
17 EFLAGS eflags, 1, 0
0xb7eafbf7: not instrument noop nop 
instrument_test: op1 and op2 of are registers 3(edi), 3(edi)
17 EFLAGS eflags, 1, 0
instrument_addorsub: arith ins is AND (0xb7eafc04)
instrument_addorsub: op1 is reg (10) and op2 is immediate
instrument_test: op1 and op2 of are registers 10(eax), 10(eax)
17 EFLAGS eflags, 1, 0
[movx] 0xb7eafc49 movzx edx, byte ptr [esi+0x46]
instrument_test: op1 and op2 of are registers 25(dl), 25(dl)
17 EFLAGS eflags, 1, 0
LEA: base reg is 4(esi) index reg invalid, dst 4(esi)
instrument_test: op1 and op2 of are registers 3(edi), 3(edi)
17 EFLAGS eflags, 1, 0
instrument_test: op1 is mem and op2 is register
instrument_taint_regmem2flag: flags 63, reg 10 size 4, memsize 4
[movx] 0xb7eafd4c movzx edx, byte ptr [esi+0x46]
instrument_test: op1 and op2 of are registers 3(edi), 3(edi)
17 EFLAGS eflags, 1, 0
instrument_test: op1 is mem and op2 is imm
instrument_addorsub: arith ins is SUB (0xb7eafc67)
instrument_addorsub: op1 is mem and op2 is immediate
instrument_test: op1 and op2 of are registers 5(ebp), 10(eax)
17 EFLAGS eflags, 1, 0
instrument_test: op1 and op2 of are registers 4(esi), 4(esi)
17 EFLAGS eflags, 1, 0
instrument_test: op1 and op2 of are registers 3(edi), 3(edi)
17 EFLAGS eflags, 1, 0
instrument_test: op1 and op2 of are registers 4(esi), 4(esi)
17 EFLAGS eflags, 1, 0
instrument_test: op1 and op2 of are registers 3(edi), 3(edi)
17 EFLAGS eflags, 1, 0
instrument_addorsub: arith ins is SUB (0xb7eafcb4)
instrument_addorsub: op1 is mem and op2 is immediate
instrument_test: op1 and op2 of are registers 3(edi), 3(edi)
17 EFLAGS eflags, 1, 0
instrument_addorsub: arith ins is AND (0xb7eafc04)
instrument_addorsub: op1 is reg (10) and op2 is immediate
instrument_test: op1 is mem and op2 is register
instrument_taint_regmem2flag: flags 63, reg 9 size 4, memsize 4
instrument_test: op1 and op2 of are registers 9(ecx), 9(ecx)
17 EFLAGS eflags, 1, 0
LEA: base reg is 6(esp) index reg invalid, dst 8(edx)
instrument_addorsub: arith ins is XOR (0xb7eafcde)
instrument_addorsub: op1 is register and op2 is mem
instrument_addorsub: arith ins is ADD (0xb7eafcee)
instrument_addorsub: op1 is reg (6) and op2 is immediate
instrument_test: op1 and op2 of are registers 4(esi), 4(esi)
17 EFLAGS eflags, 1, 0
0xb7eafde7: not instrument noop nop 
instrument_test: op1 is reg and op2 is imm
instrument_addorsub: arith ins is AND (0xb7eafdf2)
instrument_addorsub: op1 is reg (10) and op2 is immediate
instrument_test: op1 is reg and op2 is imm
instrument_test: op1 and op2 of are registers 4(esi), 4(esi)
17 EFLAGS eflags, 1, 0
instrument_addorsub: arith ins is ADD (0xb7eafe86)
instrument_addorsub: op1 is reg (6) and op2 is immediate
instrument_test: op1 is reg and op2 is imm
instrument_addorsub: arith ins is AND (0xb7eafdf2)
instrument_addorsub: op1 is reg (10) and op2 is immediate
instrument_test: op1 is reg and op2 is imm
instrument_test: op1 and op2 of are registers 10(eax), 10(eax)
17 EFLAGS eflags, 1, 0
instrument_addorsub: arith ins is XOR (0xb7eafe03)
instrument_addorsub: op1 and op2 of Arith are registers: 3 (edi), 3 (edi)
handling reg reset
instrument_test: op1 and op2 of are registers 8(edx), 8(edx)
17 EFLAGS eflags, 1, 0
instrument_test: op1 is mem and op2 is register
instrument_taint_regmem2flag: flags 63, reg 5 size 4, memsize 4
instrument_addorsub: arith ins is XOR (0xb7eafe15)
instrument_addorsub: op1 and op2 of Arith are registers: 10 (eax), 10 (eax)
handling reg reset
instrument_test: op1 is mem and op2 is imm
instrument_test: op1 and op2 of are registers 10(eax), 10(eax)
17 EFLAGS eflags, 1, 0
instrument_test: op1 is mem and op2 is imm
instrument_test: op1 is reg and op2 is imm
instrument_addorsub: arith ins is OR (0xb7eafea8)
instrument_addorsub: op1 is reg (10) and op2 is immediate
instrument_addorsub: arith ins is SUB (0xb7eafec5)
instrument_addorsub: op1 and op2 of Arith are registers: 10 (eax), 8 (edx)
[movx] 0xb7eafe4a movsx eax, byte ptr [esi+0x46]
instrument_addorsub: arith ins is SUB (0xb7eac522)
instrument_addorsub: op1 is reg (6) and op2 is immediate
instrument_addorsub: arith ins is ADD (0xb7eac52e)
instrument_addorsub: op1 is reg (7) and op2 is immediate
instrument_addorsub: arith ins is SUB (0xb7eaf6b3)
instrument_addorsub: op1 is reg (6) and op2 is immediate
instrument_addorsub: arith ins is ADD (0xb7eaf6bf)
instrument_addorsub: op1 is reg (7) and op2 is immediate
[movx] 0xb7eaf6c9 movsx eax, byte ptr [esi+0x46]
instrument_addorsub: arith ins is SUB (0xb7eae842)
instrument_addorsub: op1 is reg (6) and op2 is immediate
instrument_addorsub: arith ins is ADD (0xb7eae84e)
instrument_addorsub: op1 is reg (7) and op2 is immediate
instrument_test: op1 and op2 of are registers 8(edx), 10(eax)
17 EFLAGS eflags, 1, 0
instrument_test: op1 and op2 of are registers 9(ecx), 9(ecx)
17 EFLAGS eflags, 1, 0
instrument_addorsub: arith ins is SUB (0xb7eae879)
instrument_addorsub: op1 and op2 of Arith are registers: 10 (eax), 8 (edx)
instrument_addorsub: arith ins is SUB (0xb7eae897)
instrument_addorsub: op1 is register and op2 is mem
instrument_addorsub: arith ins is XOR (0xb7eae8a3)
instrument_addorsub: op1 and op2 of Arith are registers: 10 (eax), 10 (eax)
handling reg reset
instrument_addorsub: arith ins is ADD (0xb7eae8ac)
instrument_addorsub: op1 is reg (6) and op2 is immediate
instrument_test: op1 is reg and op2 is imm
instrument_test: op1 and op2 of are registers 3(edi), 3(edi)
17 EFLAGS eflags, 1, 0
instrument_test: op1 and op2 of are registers 9(ecx), 9(ecx)
17 EFLAGS eflags, 1, 0
instrument_addorsub: arith ins is OR (0xb7eaf6ef)
instrument_addorsub: op1 is mem and op2 is immediate
LEA: base reg is 4(esi) index reg invalid, dst 10(eax)
LEA: base reg is 4(esi) index reg invalid, dst 10(eax)
instrument_addorsub: arith ins is OR (0xb7eaf407)
instrument_addorsub: op1 is reg (10) and op2 is immediate
instrument_addorsub: arith ins is ADD (0xb7eaf40c)
instrument_addorsub: op1 is reg (6) and op2 is immediate
instrument_addorsub: arith ins is ADD (0xb7eaf73c)
instrument_addorsub: op1 is reg (6) and op2 is immediate
instrument_test: op1 and op2 of are registers 10(eax), 10(eax)
17 EFLAGS eflags, 1, 0
instrument_addorsub: arith ins is ADD (0xb7eac567)
instrument_addorsub: op1 is reg (6) and op2 is immediate
instrument_test: op1 is reg and op2 is imm
instrument_test: op1 and op2 of are registers 4(esi), 4(esi)
17 EFLAGS eflags, 1, 0
instrument_addorsub: arith ins is ADD (0xb7eafe86)
instrument_addorsub: op1 is reg (6) and op2 is immediate
instrument_test: op1 and op2 of are registers 8(edx), 8(edx)
17 EFLAGS eflags, 1, 0
instrument_addorsub: arith ins is SUB (0xb7eafed7)
instrument_addorsub: op1 is mem and op2 is immediate
instrument_test: op1 is mem and op2 is imm
instrument_addorsub: arith ins is SUB (0xb7eafeef)
instrument_addorsub: op1 is mem and op2 is immediate
instrument_addorsub: arith ins is ADD (0xb7e754b0)
instrument_addorsub: op1 is reg (3) and op2 is immediate
instrument_test: op1 and op2 of are registers 3(edi), 5(ebp)
17 EFLAGS eflags, 1, 0
